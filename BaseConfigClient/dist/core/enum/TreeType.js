define(["require", "exports", "../server/enum/CameraTypeEnum"], function (require, exports, CameraTypeEnum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeType = {
        area: { value: "area", text: "区域树" },
        businessLib: { value: "businessLib", text: "人脸库树" },
        camera: { value: "camera", text: "摄像机树" },
        person: { value: "person", text: "用户树" },
        unit: { value: "unit", text: '单位树' },
        iod: { value: "iod", text: "IOD树" },
        rfid: { value: "rfid", text: "RFID树" },
        lamp: { value: "lamp", text: "LAMP树" },
        wifi: { value: "wifi", text: "wifi树" },
        rmpGate: { value: "RmpGate", text: "rmpGate树" },
        ElectronicFence: { value: "ElectronicFence", text: "electronicFence树" },
    };
    exports.TreeIconSkin = {
        Area: "area",
        BusinessLib: "businessLib",
        NormalCamera: "camera",
        BodyCamera: "bodycamera",
        FaceCamera: "facecamera",
        PortraitCamera: "portraitcamera",
        Unit: "unit",
        Police: "police",
        Person: "person",
        Rfid: 'rfid',
        Iod: "iod",
        Lamp: "lamp",
        ElectronicFence: 'ElectronicFence',
        wifi: 'wifi',
        rmpGate: 'rmpGate'
    };
    var func = (function () {
        var cameraType = {}, normalCamera = CameraTypeEnum_1.CameraTypeEnum[0], faceCamera = CameraTypeEnum_1.CameraTypeEnum[1], bodyCamera = CameraTypeEnum_1.CameraTypeEnum[2], portraitCamera = CameraTypeEnum_1.CameraTypeEnum[3];
        if (normalCamera) {
            cameraType[normalCamera.value] = exports.TreeIconSkin.NormalCamera;
        }
        if (faceCamera) {
            cameraType[faceCamera.value] = exports.TreeIconSkin.FaceCamera;
        }
        if (bodyCamera) {
            cameraType[bodyCamera.value] = exports.TreeIconSkin.BodyCamera;
        }
        if (portraitCamera) {
            cameraType[portraitCamera.value] = exports.TreeIconSkin.PortraitCamera;
        }
        return function (type) {
            return (cameraType[type] || exports.TreeIconSkin.NormalCamera);
        };
    })();
    exports.GetCameraIconByCameraType = func;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QVMsSUFBWTtZQUN4QixNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksb0JBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUE7SUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRU0sUUFBQSx5QkFBeUIsR0FBRyxJQUE2QixDQUFDIiwiZmlsZSI6ImNvcmUvZW51bS9UcmVlVHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2FtZXJhVHlwZUVudW19IGZyb20gXCIuLi9zZXJ2ZXIvZW51bS9DYW1lcmFUeXBlRW51bVwiO1xyXG4vKipcclxuICogIOagkSDnsbvlnovmnprkuL5cclxuICogQHRpbWU6IDIwMTctMDUtMDQgMTU6MzQ6MTdcclxuICogQHBhcmFtczpcclxuICogQHJldHVybjpcclxuICovXHJcbmV4cG9ydCBjb25zdCBUcmVlVHlwZT17XHJcbiAgICBhcmVhOiB7dmFsdWU6IFwiYXJlYVwiLCB0ZXh0OiBcIuWMuuWfn+agkVwifSxcclxuICAgIGJ1c2luZXNzTGliOiB7dmFsdWU6IFwiYnVzaW5lc3NMaWJcIiwgdGV4dDogXCLkurrohLjlupPmoJFcIn0sXHJcbiAgICBjYW1lcmE6IHt2YWx1ZTogXCJjYW1lcmFcIiwgdGV4dDogXCLmkYTlg4/mnLrmoJFcIn0sXHJcbiAgICBwZXJzb246IHt2YWx1ZTogXCJwZXJzb25cIiwgdGV4dDogXCLnlKjmiLfmoJFcIn0sXHJcbiAgICB1bml0OiB7dmFsdWU6IFwidW5pdFwiLCB0ZXh0OiAn5Y2V5L2N5qCRJ30sXHJcbiAgICBpb2Q6IHt2YWx1ZTogXCJpb2RcIiwgdGV4dDogXCJJT0TmoJFcIn0sXHJcbiAgICByZmlkOiB7dmFsdWU6IFwicmZpZFwiLCB0ZXh0OiBcIlJGSUTmoJFcIn0sXHJcbiAgICBsYW1wOiB7dmFsdWU6IFwibGFtcFwiLCB0ZXh0OiBcIkxBTVDmoJFcIn0sXHJcbiAgICB3aWZpOiB7dmFsdWU6IFwid2lmaVwiLCB0ZXh0OiBcIndpZmnmoJFcIn0sXHJcbiAgICBybXBHYXRlOiB7dmFsdWU6IFwiUm1wR2F0ZVwiLCB0ZXh0OiBcInJtcEdhdGXmoJFcIn0sXHJcbiAgICBFbGVjdHJvbmljRmVuY2U6IHt2YWx1ZTogXCJFbGVjdHJvbmljRmVuY2VcIiwgdGV4dDogXCJlbGVjdHJvbmljRmVuY2XmoJFcIn0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVHJlZUljb25Ta2luID0ge1xyXG4gICAgQXJlYTogXCJhcmVhXCIsXHJcbiAgICBCdXNpbmVzc0xpYjogXCJidXNpbmVzc0xpYlwiLFxyXG4gICAgTm9ybWFsQ2FtZXJhOiBcImNhbWVyYVwiLFxyXG4gICAgQm9keUNhbWVyYTogXCJib2R5Y2FtZXJhXCIsXHJcbiAgICBGYWNlQ2FtZXJhOiBcImZhY2VjYW1lcmFcIixcclxuICAgIFBvcnRyYWl0Q2FtZXJhOiBcInBvcnRyYWl0Y2FtZXJhXCIsXHJcbiAgICBVbml0OiBcInVuaXRcIixcclxuICAgIFBvbGljZTogXCJwb2xpY2VcIixcclxuICAgIFBlcnNvbjogXCJwZXJzb25cIixcclxuICAgIFJmaWQ6ICdyZmlkJyxcclxuICAgIElvZDpcImlvZFwiLFxyXG4gICAgTGFtcDpcImxhbXBcIixcclxuICAgIEVsZWN0cm9uaWNGZW5jZTonRWxlY3Ryb25pY0ZlbmNlJyxcclxuICAgIHdpZmk6J3dpZmknLFxyXG4gICAgcm1wR2F0ZToncm1wR2F0ZSdcclxufTtcclxubGV0IGZ1bmM6RnVuY3Rpb24gPSAoZnVuY3Rpb24oKXtcclxuICAgIGxldCBjYW1lcmFUeXBlID0ge30gYXMge1trZXk6c3RyaW5nXTpzdHJpbmd9LFxyXG4gICAgICAgIG5vcm1hbENhbWVyYSA9IENhbWVyYVR5cGVFbnVtWzBdLFxyXG4gICAgICAgIGZhY2VDYW1lcmEgPSBDYW1lcmFUeXBlRW51bVsxXSxcclxuICAgICAgICBib2R5Q2FtZXJhID0gQ2FtZXJhVHlwZUVudW1bMl0sXHJcbiAgICAgICAgcG9ydHJhaXRDYW1lcmEgPSBDYW1lcmFUeXBlRW51bVszXTtcclxuXHJcbiAgICBpZihub3JtYWxDYW1lcmEpe1xyXG4gICAgICAgIGNhbWVyYVR5cGVbbm9ybWFsQ2FtZXJhLnZhbHVlXSA9IFRyZWVJY29uU2tpbi5Ob3JtYWxDYW1lcmE7XHJcbiAgICB9XHJcbiAgICBpZihmYWNlQ2FtZXJhKXtcclxuICAgICAgICBjYW1lcmFUeXBlW2ZhY2VDYW1lcmEudmFsdWVdID0gVHJlZUljb25Ta2luLkZhY2VDYW1lcmE7XHJcbiAgICB9XHJcbiAgICBpZihib2R5Q2FtZXJhKXtcclxuICAgICAgICBjYW1lcmFUeXBlW2JvZHlDYW1lcmEudmFsdWVdID0gVHJlZUljb25Ta2luLkJvZHlDYW1lcmE7XHJcbiAgICB9XHJcbiAgICBpZihwb3J0cmFpdENhbWVyYSl7XHJcbiAgICAgICAgY2FtZXJhVHlwZVtwb3J0cmFpdENhbWVyYS52YWx1ZV0gPSBUcmVlSWNvblNraW4uUG9ydHJhaXRDYW1lcmE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6Zet5YyFLOacgOe7iOS9nOS4uuWHveaVsOi/lOWbnlxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHR5cGU6IHN0cmluZyk6IHN0cmluZ3tcclxuICAgICAgICByZXR1cm4gKGNhbWVyYVR5cGVbdHlwZV0gfHwgVHJlZUljb25Ta2luLk5vcm1hbENhbWVyYSk7XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgbGV0IEdldENhbWVyYUljb25CeUNhbWVyYVR5cGUgPSBmdW5jIGFzICh0eXBlOnN0cmluZyk9PnN0cmluZzsiXX0=
