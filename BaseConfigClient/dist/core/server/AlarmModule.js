define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AlarmLog = (function () {
        function AlarmLog() {
        }
        return AlarmLog;
    }());
    exports.AlarmLog = AlarmLog;
    var PersonInfo = (function () {
        function PersonInfo() {
        }
        return PersonInfo;
    }());
    exports.PersonInfo = PersonInfo;
    var AlarmLogInfo = (function () {
        function AlarmLogInfo() {
        }
        return AlarmLogInfo;
    }());
    exports.AlarmLogInfo = AlarmLogInfo;
    var SearchAlarmLogResult = (function () {
        function SearchAlarmLogResult() {
        }
        return SearchAlarmLogResult;
    }());
    exports.SearchAlarmLogResult = SearchAlarmLogResult;
    var personAlarm = (function () {
        function personAlarm() {
        }
        return personAlarm;
    }());
    exports.personAlarm = personAlarm;
    var VehicleAlarmLog = (function () {
        function VehicleAlarmLog() {
        }
        return VehicleAlarmLog;
    }());
    exports.VehicleAlarmLog = VehicleAlarmLog;
    var VehicleAlarmLogDeitail = (function () {
        function VehicleAlarmLogDeitail() {
        }
        return VehicleAlarmLogDeitail;
    }());
    exports.VehicleAlarmLogDeitail = VehicleAlarmLogDeitail;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb3JlL3NlcnZlci9BbGFybU1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUE2QkE7UUFBQTtRQW1CQSxDQUFDO1FBQUQsZUFBQztJQUFELENBbkJBLEFBbUJDLElBQUE7SUFuQlksNEJBQVE7SUFxQnJCO1FBQUE7UUFnQkEsQ0FBQztRQUFELGlCQUFDO0lBQUQsQ0FoQkEsQUFnQkMsSUFBQTtJQWhCWSxnQ0FBVTtJQWtCdkI7UUFBQTtRQU9BLENBQUM7UUFBRCxtQkFBQztJQUFELENBUEEsQUFPQyxJQUFBO0lBUFksb0NBQVk7SUFZekI7UUFBQTtRQVFBLENBQUM7UUFBRCwyQkFBQztJQUFELENBUkEsQUFRQyxJQUFBO0lBUlksb0RBQW9CO0lBVWpDO1FBQUE7UUFHQSxDQUFDO1FBQUQsa0JBQUM7SUFBRCxDQUhBLEFBR0MsSUFBQTtJQUhZLGtDQUFXO0lBUXhCO1FBQUE7UUFpQkEsQ0FBQztRQUFELHNCQUFDO0lBQUQsQ0FqQkEsQUFpQkMsSUFBQTtJQWpCWSwwQ0FBZTtJQXFCNUI7UUFBQTtRQWdCQSxDQUFDO1FBQUQsNkJBQUM7SUFBRCxDQWhCQSxBQWdCQyxJQUFBO0lBaEJZLHdEQUFzQiIsImZpbGUiOiJjb3JlL3NlcnZlci9BbGFybU1vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC8qKlxyXG4vLyAgKiBDcmVhdGVkIGJ5IGtleSBvbiAyMDE3LzYvMzAuXHJcbi8vICAqL1xyXG4vLyBpbXBvcnQge0xvY2FsU2VhcmNoQWxhcm1Mb2dSZXN1bHR9IGZyb20gXCIuL1NvY2tldEFsYXJtTW9kZWxcIlxyXG4vLyBpbXBvcnQge1BlcnNvbkluZm99IGZyb20gXCIuL1NvY2tldEFsYXJtTW9kZWxcIlxyXG4vL1xyXG4vLyBleHBvcnQgY2xhc3MgQWxhcm1Nb2RlbHtcclxuLy8gICAgIFJlc3VsdDpBcnJheTxMb2NhbFNlYXJjaEFsYXJtTG9nUmVzdWx0IHwgQWxhcm1XaXRoSW1nTW9kdWxlPjtcclxuLy8gICAgIFRhc2tJZDpzdHJpbmc7XHJcbi8vICAgICBUb3RhbENvdW50Om51bWJlclxyXG4vLyB9XHJcbi8vXHJcbi8vIC8v5bim5Zu+54mH55qE5oql6K2m5qOA57SiXHJcbi8vIGV4cG9ydCBjbGFzcyBBbGFybVdpdGhJbWdNb2R1bGV7XHJcbi8vICAgICBBbGFybUxvZ0FycjpBcnJheTxBbGFybUxvZ0l0ZW0+O1xyXG4vLyAgICAgQWxhcm1OdW06bnVtYmVyO1xyXG4vLyAgICAgQWxhcm1QZXJzb25JbmZvOkFsYXJtUGVyc29uSW5mbztcclxuLy8gICAgIExpYk5hbWU6c3RyaW5nO1xyXG4vLyAgICAgU2NvcmU6bnVtYmVyO1xyXG4vLyB9XHJcbi8vXHJcbi8vIGV4cG9ydCBjbGFzcyBBbGFybUxvZ0l0ZW17XHJcbi8vICAgICBBbGFybUxvZzpBbGFybUxvZ1xyXG4vLyAgICAgQXJlYU5hbWU6c3RyaW5nO1xyXG4vLyAgICAgUmVzcG9uc2VQZXJzb25OYW1lOnN0cmluZ1xyXG4vLyB9XHJcbi8vXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEFsYXJtTG9ne1xyXG4gICAgQWNjZXNzTG9nSUQ6c3RyaW5nO1xyXG4gICAgQWxhcm1UaW1lOnN0cmluZztcclxuICAgIEFyZWFJRDpzdHJpbmc7XHJcbiAgICBDYXBGYWNlUGljVXJsOnN0cmluZztcclxuICAgIEV2ZW50VHlwZTpzdHJpbmc7XHJcbiAgICBJRDpzdHJpbmc7XHJcbiAgICBJc1VwbG9hZDpib29sZWFuO1xyXG4gICAgTGV2ZWw6bnVtYmVyO1xyXG4gICAgT2JqZWN0SUQ6c3RyaW5nO1xyXG4gICAgT2JqZWN0TmFtZTpzdHJpbmc7XHJcbiAgICBPYmplY3RUeXBlOnN0cmluZztcclxuICAgIFJlY2VpdmVTdWJBbGFybURhdGVUaW1lOiBzdHJpbmc7XHJcbiAgICBSZXNwb25zZVN0YXRlOnN0cmluZztcclxuICAgIFJlc3BvbnNlVGltZTpzdHJpbmc7XHJcbiAgICBTaW1pbGFydHk6bnVtYmVyO1xyXG4gICAgVGFza0lkOnN0cmluZztcclxuXHJcbiAgICBOb3Rlczogc3RyaW5nOyAvLyBtYWPlnLDlnYDlkI1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBlcnNvbkluZm97XHJcbiAgICBOYW1lOiBzdHJpbmc7XHJcbiAgICBJRDogc3RyaW5nO1xyXG4gICAgTG9nVGltZTogc3RyaW5nO1xyXG4gICAgSURDYXJkTnVtYmVyOiBzdHJpbmc7XHJcbiAgICBGYWNlUGljUGF0aDogQXJyYXk8c3RyaW5nPjtcclxuICAgIEJpcnRoOiBzdHJpbmc7XHJcbiAgICBIb21lQWRkcmVzczogc3RyaW5nO1xyXG4gICAgTmF0aW9uOiBzdHJpbmc7XHJcbiAgICBMaWJJZDogc3RyaW5nO1xyXG4gICAgQmVnaW5EYXRlOiBzdHJpbmc7XHJcbiAgICBDcmVhdGVUaW1lOiBzdHJpbmc7XHJcbiAgICBVcGRhdGVUaW1lOiBzdHJpbmc7XHJcbiAgICBDZXJ0aWZ5aW5nQXV0aG9yaXR5OiBzdHJpbmc7XHJcbiAgICBHZW5kZXI6IHN0cmluZztcclxuICAgIHVzZXJUYWc6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFsYXJtTG9nSW5mb3tcclxuICAgIEFsYXJtTG9nSUQ6IHN0cmluZztcclxuICAgIElEOiBzdHJpbmc7XHJcbiAgICBMaWJJRDogc3RyaW5nO1xyXG4gICAgUGVyc29uSW5mbzogUGVyc29uSW5mbztcclxuICAgIFNpbWlsYXJ0eTogc3RyaW5nO1xyXG4gICAgU2ltaWxhcnR5U3RhdHVzOiBzdHJpbmc7XHJcbn1cclxuLyoqXHJcbiAqIOaKpeitpuajgOe0oue7k+aenFxyXG4gKiDlt7Lkvb/nlKjmqKHlnZcg5oiR55qE5oql6K2mXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VhcmNoQWxhcm1Mb2dSZXN1bHR7XHJcbiAgICBBbGFybUxvZzogQWxhcm1Mb2c7XHJcbiAgICBBbGFybUxvZ0luZm9BcnI6IEFycmF5PEFsYXJtTG9nSW5mbz47XHJcbiAgICBBbGFybU51bTogbnVtYmVyO1xyXG4gICAgQXJlYU5hbWU6IHN0cmluZztcclxuICAgIEF0dGVudGlvbjogYm9vbGVhbjtcclxuICAgIENvbGxlY3RlZDogYm9vbGVhbjtcclxuICAgIFJlc3BvbnNlUGVyc29uTmFtZTogc3RyaW5nOyAvLyDlpITnkIbkurpcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHBlcnNvbkFsYXJte1xyXG4gICAgcmVzdWx0OiBTZWFyY2hBbGFybUxvZ1Jlc3VsdDtcclxuICAgIHJlc3VsdFR5cGU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIOi9pui+huaKpeitplxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlaGljbGVBbGFybUxvZ3tcclxuICAgIF9pZDogbnVtYmVyO1xyXG4gICAgZGVhbFRpbWU6IHN0cmluZztcclxuICAgIGRlYWxVc2VyOiBzdHJpbmcgO1xyXG4gICAgYWxhcm1PYmo6IHN0cmluZyA7XHJcbiAgICBhbGFybU9iak5hbWU6IHN0cmluZyA7XHJcbiAgICBhbGFybUxldmVsOiBzdHJpbmcgO1xyXG4gICAgYWxhcm1UeXBlOiBzdHJpbmcgO1xyXG4gICAgYWxhcm1TdGF0dXM6IHN0cmluZyA7XHJcbiAgICBjb21tZW50OiBzdHJpbmcgO1xyXG4gICAgc291cmNlOiBzdHJpbmcgO1xyXG4gICAgZGVhbFN0YXR1czogc3RyaW5nIDtcclxuICAgIC8v5biD5o6n5oql6K2maWRcclxuICAgIG9yaUlkOiBzdHJpbmcgO1xyXG4gICAgYWJzVGltZTogbnVtYmVyIDtcclxuICAgIHN0YXRpc3RpY1RpbWU6IG51bWJlciA7XHJcbiAgICBkZXRhaWw6IFZlaGljbGVBbGFybUxvZ0RlaXRhaWw7XHJcbn1cclxuLyoqXHJcbiAqIOi9pui+huaKpeitpuivpuaDhVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlaGljbGVBbGFybUxvZ0RlaXRhaWx7XHJcbiAgICB4OnN0cmluZyA7XHJcbiAgICB5OnN0cmluZyA7XHJcbiAgICBtb25pdG9ySWQ6c3RyaW5nIDtcclxuICAgIHZlaGljbGVUeXBlOnN0cmluZyA7XHJcbiAgICBjaGFubmVsTmFtZTpzdHJpbmcgO1xyXG4gICAgaW1hZ2VVUkxzOnN0cmluZyA7XHJcbiAgICBtb25pdG9yTmFtZTpzdHJpbmcgO1xyXG4gICAgcGFzc1RpbWU6c3RyaW5nIDtcclxuICAgIHBsYXRlQ29sb3I6c3RyaW5nIDtcclxuICAgIHZlaGljbGVCcmFuZDpzdHJpbmcgO1xyXG4gICAgY2hhbm5lbElkOnN0cmluZyA7XHJcbiAgICBzcGVlZDpudW1iZXIgO1xyXG4gICAgcGxhdGVUeXBlOnN0cmluZyA7XHJcbiAgICBcclxuICAgIHZlaGljbGVDb2xvcjpzdHJpbmcgO1xyXG59XHJcbi8vXHJcbi8vIGV4cG9ydCBjbGFzcyBBbGFybVBlcnNvbkluZm8gZXh0ZW5kcyBQZXJzb25JbmZve1xyXG4vLyAgICAgRmFjZVBpY1BhdGg6c3RyaW5nW11cclxuLy8gfVxyXG4vL1xyXG4vLyAvL+aTjeS9nOiusOW9lVxyXG4vLyBleHBvcnQgY2xhc3MgT3BlclJlY29yZE1vZGVse1xyXG4vLyAgICAgYWN0aW9uOnN0cmluZztcclxuLy8gICAgIGFsYXJtTG9nSW5mb0FycjpBcnJheTxPcGVyUmVjb3JkSXRlbT47XHJcbi8vICAgICBvcGVyYXRlVGltZTpzdHJpbmc7XHJcbi8vICAgICBvcGVyYXRvck5hbWU6c3RyaW5nO1xyXG4vLyAgICAgb3BlcmF0b3JVaWQ6c3RyaW5nO1xyXG4vLyAgICAgcmVtYXJrczpzdHJpbmc7XHJcbi8vIH1cclxuLy9cclxuLy8gZXhwb3J0IGNsYXNzIE9wZXJSZWNvcmRJdGVte1xyXG4vLyAgICAgYWxhcm1Mb2dJbmZvSWQ6c3RyaW5nO1xyXG4vLyAgICAgbGliSWQ6c3RyaW5nO1xyXG4vLyAgICAgbGliTmFtZTpzdHJpbmc7XHJcbi8vICAgICBwZXJzb25HZW5kZXI6c3RyaW5nO1xyXG4vLyAgICAgcGVyc29uSWQ6c3RyaW5nO1xyXG4vLyAgICAgcGVyc29uSW1hZ2VVcmw6c3RyaW5nO1xyXG4vLyAgICAgcGVyc29uTmFtZTpzdHJpbmc7XHJcbi8vICAgICBzaW1pbGFydHk6bnVtYmVyO1xyXG4vLyB9XHJcbi8vXHJcbi8vIGV4cG9ydCBjbGFzcyBDcmVhdGVQZXJzb257XHJcbi8vICAgICBBcmVhQ29kZTpzdHJpbmc7XHJcbi8vICAgICBBcmVhSUQ6c3RyaW5nO1xyXG4vLyAgICAgQXJlYU5hbWU6c3RyaW5nO1xyXG4vLyAgICAgSUQ6c3RyaW5nO1xyXG4vLyAgICAgUGVyc29uSUQ6c3RyaW5nO1xyXG4vLyAgICAgUGVyc29uTmFtZTpzdHJpbmc7XHJcbi8vICAgICBQb2xpY2VJRDpzdHJpbmc7XHJcbi8vIH0iXX0=
