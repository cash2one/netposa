define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../../core/enum/TreeType", "lodash", "css!../style/tree.css", "../../common/directive/tree/tree.directive.service", "../../common/services/connectTree.service"], function (require, exports, main_app_1, tree_params_1, TreeType_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TreeCameraPopupController = (function () {
        function TreeCameraPopupController($scope, connectTreeService, $timeout, treeService, layer) {
            this.$scope = $scope;
            this.connectTreeService = connectTreeService;
            this.$timeout = $timeout;
            this.treeService = treeService;
            this.layer = layer;
            this.cacheSelCam = [];
            this.selNum = 0;
            this.selectCameraList = [];
            this.selectCtrlCb = $scope.selectCtrlCb || "close.camera.popup";
            this.selectCameraList = $scope.selectCameraList;
            this.initTreeParams();
        }
        TreeCameraPopupController.prototype.initTreeData = function () {
            var _this = this;
            this.connectTreeService.findAreaCamera().then(function (datas) {
                _this.treeParams.treeDatas = datas;
            });
        };
        TreeCameraPopupController.prototype.initTreeParams = function () {
            var _this = this;
            this.treeParams = new tree_params_1.TreeDataParams();
            this.treeParams.treeId = "cameraTree";
            this.searchStr = "";
            this.treeParams.onCheck = function (event, treeId, treeNode) {
                var checkedNodeList = _this.treeService.getCheckedNodes(_this.treeParams.treeId, true);
                _this.checkedUpdate(checkedNodeList);
            };
            this.initTreeData();
        };
        TreeCameraPopupController.prototype.saveCamera = function () {
            var arr = [];
            this.cacheSelCam.forEach(function (item) {
                arr.push(item.ID);
            });
            this.$scope.$emit(this.selectCtrlCb, arr, true, null, "tree");
        };
        ;
        TreeCameraPopupController.prototype.addCache = function () {
            var self = this;
            var paramsList = [];
            angular.forEach(self.selectCameraList, function (id, index) {
                paramsList.push({ key: 'ID', value: id });
            });
            self.treeService.checkNodesByParamsList(self.treeParams.treeId, paramsList, true);
            var checkedNodeList = self.treeService.getCheckedNodes(self.treeParams.treeId, true);
            var cacheSelCam = [];
            self.$timeout(function () {
                angular.forEach(checkedNodeList, function (node) {
                    node.treeType === TreeType_1.TreeType.camera.value && cacheSelCam.push(node);
                });
                self.cacheSelCam = cacheSelCam;
                self.selNum = cacheSelCam.length;
            });
        };
        ;
        TreeCameraPopupController.prototype.clearAll = function () {
            this.selectCameraList = [];
            this.cacheSelCam = [];
            this.selNum = 0;
            this.treeService.checkAllNodes(this.treeParams.treeId, false);
        };
        ;
        TreeCameraPopupController.prototype.cancelCamPop = function () {
            this.cacheSelCam = [];
            this.$scope.$emit(this.selectCtrlCb, [], false);
        };
        ;
        TreeCameraPopupController.prototype.removeChecked = function (node) {
            var _this = this;
            var selectCameraList = _.pull(this.selectCameraList, node.ID);
            this.selectCameraList = selectCameraList;
            angular.forEach(this.cacheSelCam, function (camera, index) {
                camera.ID === node.ID && _this.cacheSelCam.splice(index, 1);
            });
            this.selNum > 0 && (this.selNum = this.selNum - 1);
            this.treeService.updateNodeChecked(this.treeParams.treeId, node.tId, false);
        };
        ;
        TreeCameraPopupController.prototype.onChangeSearch = function () {
            var _this = this;
            if (!this.treeParams.treeDatas) {
                return;
            }
            this.$timeout(function () {
                _this.treeService.filterShowNodes(_this.treeParams.treeId, "Name", _this.searchStr);
            });
            return true;
        };
        ;
        TreeCameraPopupController.prototype.checkedUpdate = function (checkedNodeList) {
            var self = this;
            var cacheSelCam = [];
            self.$timeout(function () {
                angular.forEach(checkedNodeList, function (node) {
                    node.treeType === TreeType_1.TreeType.camera.value && cacheSelCam.push(node);
                });
                self.cacheSelCam = cacheSelCam;
                self.selNum = cacheSelCam.length;
            });
        };
        TreeCameraPopupController.$inject = ['$scope', 'connectTreeService', '$timeout', 'treeDirectiveService', 'layer'];
        return TreeCameraPopupController;
    }());
    main_app_1.app.controller("treeCameraPopupController", TreeCameraPopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
