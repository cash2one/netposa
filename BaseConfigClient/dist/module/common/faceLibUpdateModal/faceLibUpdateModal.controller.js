define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../../core/entity/BusinessLib", "../../../core/entity/Area", "../../../core/entity/ex/BusinessLibEx", "../portrait-tool", "../system-config", "angular", "../../common/services/area.service", "../../common/services/businessLib.service", "../../../core/entity/ex/BusinessLibEx", "./faceLibUpdateModal.factory", "../factory/userinfo.cache.factory", "../factory/layerMsg.factory"], function (require, exports, main_app_1, tree_params_1, BusinessLib_1, Area_1, BusinessLibEx_1, portrait_tool_1, system_config_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FaceLibUpdateModalController = (function () {
        function FaceLibUpdateModalController($scope, $timeout, layerDec, i18nFactory, userInfoCacheFactory, faceLibUpdateModalFactory, areaService, businessLibService) {
            var _this = this;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.layerDec = layerDec;
            this.i18nFactory = i18nFactory;
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.faceLibUpdateModalFactory = faceLibUpdateModalFactory;
            this.areaService = areaService;
            this.businessLibService = businessLibService;
            this.isUpdate = false;
            this.initUpdateModelParams();
            $scope.$on("$destroy", function () {
                _this.faceLibUpdateModalFactory.setUpdateParams(null);
            });
            this.getAreaTree();
        }
        FaceLibUpdateModalController.prototype.initUpdateModelParams = function () {
            this.initTreeParams();
            var modelParams = this.faceLibUpdateModalFactory.getUpdateParams();
            this.currentServe = new BusinessLibEx_1.BusinessLibEx();
            this.currentServe.AreaModel = new Area_1.Area();
            (!!modelParams.updateModalData) && (this.currentServe = modelParams.updateModalData);
            this.currentServe.ParentName = modelParams.parentName;
            this.currentServe.ParentID = modelParams.parentID;
            this.isUpdate = modelParams.isUpdate;
            this.closeModelEmitName = modelParams.modalClosedWatchName;
            (!!modelParams.parentID) && (this.areaTreeDatas.defaultSelectTreeId = modelParams.parentID);
            this.areaTreeDatas.isDefaultSelected = true;
        };
        ;
        FaceLibUpdateModalController.prototype.initTreeParams = function () {
            var _this = this;
            this.areaTreeDatas = new tree_params_1.TreeDataParams(true);
            this.areaTreeDatas.treeId = 'updateFaceLibModalTree';
            this.areaTreeDatas.treeInitComplete = function (treeId) {
            };
            this.areaTreeDatas.onClick = function (event, treeId, treeNode) {
                _this.$timeout(function () {
                    _this.setTreeSelectData(treeNode);
                    _this.currentServe.ParentName = treeNode.Name;
                });
            };
        };
        ;
        FaceLibUpdateModalController.prototype.setTreeSelectData = function (treeData) {
            if (treeData.AreaID) {
                this.currentServe.AreaID = treeData.AreaID;
                this.currentServe.ParentID = treeData.ID;
                this.currentServe.ParentModel = new BusinessLib_1.BusinessLib();
                this.currentServe.ParentModel = treeData;
            }
            else {
                this.currentServe.AreaID = treeData.ID;
                this.currentServe.ParentID = null;
                this.currentServe.ParentModel = new Area_1.Area();
                this.currentServe.ParentModel.Name = treeData.Name;
            }
        };
        ;
        FaceLibUpdateModalController.prototype.commitSaveOrUpdate = function () {
            var _this = this;
            if (!this.validateParams(this.currentServe)) {
                return;
            }
            var reqParams = angular.copy(this.currentServe);
            reqParams.ParentModel = null;
            if (reqParams.ID) {
                console.log("=========更新===============");
                this.businessLibService.update(reqParams).then(function (resp) {
                    if (resp.code == 200) {
                        _this.closeUpdateModel(true, false, _this.currentServe);
                    }
                });
            }
            else {
                console.log("===========新加=============");
                reqParams.Creator = this.userInfoCacheFactory.getCurrentUserId();
                this.businessLibService.save(reqParams).then(function (resp) {
                    if (resp.code == 200) {
                        _this.currentServe.ID = resp.data;
                        _this.closeUpdateModel(true, true, _this.currentServe);
                    }
                });
            }
        };
        ;
        FaceLibUpdateModalController.prototype.closeUpdateModel = function (isCommit, isAdd, modelData) {
            var _this = this;
            if (isCommit) {
                this.$timeout(function () {
                    _this.$scope.$emit(_this.closeModelEmitName, { isCommit: isCommit, isAdd: isAdd, modelData: modelData });
                }, 500);
            }
            else {
                this.$scope.$emit(this.closeModelEmitName, { isCommit: isCommit, isAdd: isAdd, modelData: modelData });
            }
        };
        FaceLibUpdateModalController.prototype.getAreaTree = function (keyword) {
            var _this = this;
            var reqParams = {
                keyword: ''
            };
            if (keyword) {
                reqParams.keyword = keyword;
            }
            var self_this = this;
            this.businessLibService.findTreeWithArea().then(function (resp) {
                if (resp && resp.code && resp.data) {
                    var params = new portrait_tool_1.ClassifyDiffChildParams();
                    params.newChildName = _this.i18nFactory("FDS_00_12_35");
                    var nodeData = portrait_tool_1.default.classifyDiffChild(params, [resp.data]);
                    self_this.setModalAreaTree(nodeData);
                }
                console.error(resp.data);
            });
        };
        FaceLibUpdateModalController.prototype.changeIsShowAreaTree = function () {
            this.areaTreeDatas.isShow = !this.areaTreeDatas.isShow;
        };
        ;
        FaceLibUpdateModalController.prototype.setModalAreaTree = function (data) {
            this.areaTreeDatas.treeDatas = data;
        };
        FaceLibUpdateModalController.prototype.validateParams = function (model) {
            if (!model.AreaID) {
                this.layerDec.warnInfo(this.i18nFactory("FDS_01_06_23"));
                return false;
            }
            if (model.ID && this.currentServe.ParentModel) {
                if (this.currentServe.ParentModel.ID === model.ID || this.currentServe.ParentModel.ParentID === model.ID) {
                    this.layerDec.warnInfo(this.i18nFactory("FDS_00_04_04"));
                    return false;
                }
                if (this.currentServe.ParentModel.ID === system_config_1.SystemConfig.CONST_LIB) {
                    this.layerDec.warnInfo(this.i18nFactory("FDS_01_06_26", { value: this.currentServe.ParentModel.Name }));
                    return false;
                }
            }
            return true;
        };
        FaceLibUpdateModalController.$inject = ['$scope', '$timeout',
            'layerDec', 'i18nFactory',
            'userInfoCacheFactory', 'faceLibUpdateModalFactory', 'areaService', 'businessLibService'];
        return FaceLibUpdateModalController;
    }());
    main_app_1.app
        .controller('faceLibUpdateModalController', FaceLibUpdateModalController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
