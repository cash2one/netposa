define(["require", "exports", "../../common/app/main.app", "../system-config"], function (require, exports, main_app_1, system_config_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UserInfoCacheProvider = (function () {
        function UserInfoCacheProvider() {
            var _this = this;
            this.USER_INFO_KEY = system_config_1.SystemConfig.USER_INFO_KEY;
            this.AUTH_CACHE_KEY_NAME = "AuthCacheKey";
            this.USER_ID_KEY = "UserIDKey";
            this.Cache_User_Infos = null;
            this.Cache_User_FuncAuthMap = {};
            this.IS_OPEN_ALARM_MUSIC_KEY = "IS_OPEN_ALARM_MUSIC";
            this.getUserFuncAuthMap = function () {
                var funcAuthMap = {};
                var userInfo = _this.getUserLoginInfo();
                if (userInfo && userInfo.JsonUserData && userInfo.JsonUserData.ModuleItemList) {
                    var i = 0, len = userInfo.JsonUserData.ModuleItemList.length;
                    for (; i < len; i++) {
                        if (userInfo.JsonUserData.ModuleItemList[i]) {
                            funcAuthMap[userInfo.JsonUserData.ModuleItemList[i].FullNameSpacePath] = userInfo.JsonUserData.ModuleItemList[i];
                        }
                        if (userInfo.JsonUserData.ModuleItemList[i].OperateItemList) {
                            for (var k in userInfo.JsonUserData.ModuleItemList[i].OperateItemList) {
                                funcAuthMap[userInfo.JsonUserData.ModuleItemList[i].OperateItemList[k].FullNameSpacePath] = userInfo.JsonUserData.ModuleItemList[i].OperateItemList[k];
                            }
                        }
                    }
                }
                return funcAuthMap;
            };
            this.getPlayMusicStatusFromLocal = function () {
                var flag = true;
                try {
                    flag = angular.fromJson(localStorage.getItem(_this.IS_OPEN_ALARM_MUSIC_KEY));
                }
                catch (e) {
                    localStorage.setItem(_this.IS_OPEN_ALARM_MUSIC_KEY, angular.toJson(true));
                    flag = true;
                }
                return flag;
            };
            this.Cache_User_Infos = this.getUserLoginInfo();
            this.Cache_User_FuncAuthMap = this.getUserFuncAuthMap();
            this.IS_OPEN_OPEN_ALARM_MUSIC_VALUE = this.getPlayMusicStatusFromLocal();
        }
        UserInfoCacheProvider.prototype.$get = function () {
            var vm = this;
            return {
                hasFuncAuth: function (powerKey) {
                    if (!powerKey)
                        return false;
                    if (vm.Cache_User_FuncAuthMap[powerKey])
                        return true;
                    return false;
                },
                getPlayMusicStatus: function () {
                    return vm.IS_OPEN_OPEN_ALARM_MUSIC_VALUE;
                },
                getCurrentRealName: function () {
                    if (vm.Cache_User_Infos && vm.Cache_User_Infos.JsonUserData && vm.Cache_User_Infos.JsonUserData.Person) {
                        return vm.Cache_User_Infos.JsonUserData.Person.Name;
                    }
                    else {
                        console.warn("UserName Is Null!");
                        return "";
                    }
                },
                getCurrentUserId: function () {
                    if (vm.Cache_User_Infos) {
                        return vm.Cache_User_Infos.ID;
                    }
                    else {
                        console.warn("UserID Is Null!");
                        return "";
                    }
                },
                getCurrentUserIDMap: function () {
                    var result = {};
                    if (vm.Cache_User_Infos) {
                        result[vm.USER_ID_KEY] = vm.Cache_User_Infos.ID;
                    }
                    return result;
                },
                getCurrentUserKeyStr: function () {
                    if (vm.Cache_User_Infos && vm.Cache_User_Infos.JsonUserData) {
                        return vm.Cache_User_Infos.JsonUserData.UserKey;
                    }
                    else {
                        return null;
                    }
                },
                getCurrentUserKey: function () {
                    var result = {};
                    if (vm.Cache_User_Infos && vm.Cache_User_Infos.JsonUserData) {
                        result[vm.AUTH_CACHE_KEY_NAME] = vm.Cache_User_Infos.JsonUserData.UserKey;
                    }
                    return result;
                },
                setPlayMusicStatus: function (params) {
                    localStorage.setItem(vm.IS_OPEN_ALARM_MUSIC_KEY, angular.toJson(params));
                    vm.IS_OPEN_OPEN_ALARM_MUSIC_VALUE = params;
                },
                getCurrentUid: function () {
                    if (vm.Cache_User_Infos && vm.Cache_User_Infos.Uid) {
                        return vm.Cache_User_Infos.Uid;
                    }
                    else {
                        console.warn("Username Is Null!");
                        return null;
                    }
                },
                removeUserCache: function () {
                    try {
                        localStorage.removeItem(vm.USER_INFO_KEY);
                    }
                    catch (e) {
                        if (window.console) {
                            console.error("userinfocachefactory.removeUserCache error: ", e);
                        }
                    }
                },
                getRoleIds: function () {
                    if (vm.roleIds == null) {
                        vm.roleIds = vm.getRoleIds();
                    }
                    return vm.roleIds;
                },
                getUserModuleAuthList: function () {
                    return vm.getUserModuleAuthList();
                }
            };
        };
        UserInfoCacheProvider.prototype.getUserLoginInfo = function () {
            var result = null;
            try {
                result = angular.fromJson(localStorage.getItem(this.USER_INFO_KEY));
            }
            catch (e) {
                result = null;
                console.error("userinfoCacheProvider.getUserLoginInfo", e);
            }
            return result;
        };
        ;
        UserInfoCacheProvider.prototype.getUserModuleAuthList = function () {
            var result = [];
            var userInfo = this.getUserLoginInfo();
            if (userInfo && userInfo.JsonUserData && userInfo.JsonUserData.ModuleItemList) {
                var moduleItems = userInfo.JsonUserData.ModuleItemList;
                var i = 0, len = moduleItems.length;
                for (; i < len; i++) {
                    if (moduleItems[i]) {
                        result.push(moduleItems[i]);
                    }
                }
            }
            return result;
        };
        ;
        UserInfoCacheProvider.prototype.getRoleIds = function () {
            var result;
            if (this.Cache_User_Infos && this.Cache_User_Infos.JsonUserData && this.Cache_User_Infos.JsonUserData.ListRole && this.Cache_User_Infos.JsonUserData.ListRole.length > 0) {
                var arr_1 = [];
                angular.forEach(this.Cache_User_Infos.JsonUserData.ListRole, function (model) {
                    arr_1.push(model.ID);
                });
                result = arr_1.join(",");
            }
            return result;
        };
        return UserInfoCacheProvider;
    }());
    exports.UserInfoCacheProvider = UserInfoCacheProvider;
    main_app_1.app
        .provider('userInfoCacheFactory', UserInfoCacheProvider);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvY29tbW9uL2ZhY3RvcnkvdXNlcmluZm8uY2FjaGUuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUE2RUE7UUFhSTtZQUFBLGlCQUlDO1lBaEJPLGtCQUFhLEdBQUcsNEJBQVksQ0FBQyxhQUFhLENBQUM7WUFDM0Msd0JBQW1CLEdBQUcsY0FBYyxDQUFDO1lBQ3JDLGdCQUFXLEdBQUcsV0FBVyxDQUFDO1lBRTFCLHFCQUFnQixHQUFrQixJQUFJLENBQUM7WUFDdkMsMkJBQXNCLEdBQThCLEVBQUUsQ0FBQztZQUV2RCw0QkFBdUIsR0FBRyxxQkFBcUIsQ0FBQztZQW9IaEQsdUJBQWtCLEdBQUc7Z0JBQ3pCLElBQUksV0FBVyxHQUFHLEVBQStCLENBQUM7Z0JBQ2xELElBQUksUUFBUSxHQUFpQixLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDckQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxZQUFZLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQSxDQUFDO29CQUMxRSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsR0FBRyxHQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztvQkFDekQsR0FBRyxDQUFBLENBQUMsRUFBQyxDQUFDLEdBQUMsR0FBRyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUM7d0JBQ1osRUFBRSxDQUFBLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDOzRCQUN4QyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDckgsQ0FBQzt3QkFDRCxFQUFFLENBQUEsQ0FBQyxRQUFRLENBQUMsWUFBWSxD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QztRQUNsQixDQUFDO1FBQUEsQ0FBQztRQWFNLDBDQUFVLEdBQWxCO1lBQ0ksSUFBSSxNQUFNLENBQUM7WUFDWCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBQztnQkFDckssSUFBSSxLQUFHLEdBQUcsRUFBbUIsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxVQUFDLEtBQVc7b0JBQ3JFLEtBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN2QixDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNLEdBQUcsS0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixDQUFDO1lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQixDQUFDO1FBRUwsNEJBQUM7SUFBRCxDQXJMQSxBQXFMQyxJQUFBO0lBckxZLHNEQUFxQjtJQTJMbEMsY0FBRztTQUNFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDIiwiZmlsZSI6Im1vZHVsZS9jb21tb24vZmFjdG9yeS91c2VyaW5mby5jYWNoZS5mYWN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIGNyZWF0ZSBieSB6eHFcclxuICpcclxuICogQHRpbWU6IDIwMTctMDYtMDggMTc6MzE6NDlcclxuICogQHBhcmFtczpcclxuICogQHJldHVybjpcclxuICovXHJcbmltcG9ydCB7YXBwfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FwcC9tYWluLmFwcFwiO1xyXG5pbXBvcnQge1N5c3RlbUNvbmZpZ30gZnJvbSBcIi4uL3N5c3RlbS1jb25maWdcIjtcclxuaW1wb3J0IHtMb2dpblVzZXJJbmZvfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9lbnRpdHkvZXgvVXNlckV4XCI7XHJcbmltcG9ydCB7TW9kdWxlSXRlbX0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvc2VydmVyL01vZHVsSXRlbU1vZGVsXCI7XHJcbmltcG9ydCBSb2xlIGZyb20gXCIuLi8uLi8uLi9jb3JlL2VudGl0eS9Sb2xlXCI7XHJcbmRlY2xhcmUgbGV0IGFuZ3VsYXI6YW55O1xyXG4vLyDnlLHkuo7nlKjliLDkuoblm73pmYXljJYsIOaJgOS7pemcgOimgeWcqOWbvemZheWMlumFjee9ruWIneWni+WMluS5i+WQjuWKoOi9vVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXJJbmZvQ2FjaGVGYWN0b3J5e1xyXG4gICAgLyoqIGNyZWF0ZSBieSB6eHFcclxuICAgICAqIOiOt+WPliDnlKjmiLfnmbvlvZXlkI7lrZjmnKzlnLDnmoTnlKjmiLflp5PlkI1cclxuICAgICAqIEB0aW1lOiAyMDE3LTA2LTA4IDE3OjQ2OjQ4XHJcbiAgICAgKiBAcmV0dXJuOiDlvZPliY3nlKjmiLfkv53lrZhcclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudFJlYWxOYW1lKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W55m75b2V55qE55So5oi35ZCNXHJcbiAgICAgKiBjcmVhdG9yOiB3eXJcclxuICAgICAqIHRpbWU6IDIwMTcuNi4yN1xyXG4gICAgICovXHJcbiAgICBnZXRDdXJyZW50VWlkKCk6c3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6XdXNlcktleeWtl+espuS4slxyXG4gICAgICogY3JlYXRvcjogd3lyXHJcbiAgICAgKiB0aW1lOiAyMDE3LjYuMjdcclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudFVzZXJLZXlTdHIoKTpzdHJpbmc7XHJcbiAgICAvKiogY3JlYXRlIGJ5IHp4cVxyXG4gICAgICog6I635Y+WIOeUqOaIt+eZu+W9leWQjuWtmOacrOWcsOeahElEXHJcbiAgICAgKiBAdGltZTogMjAxNy0wNi0xNSAxNzo1Nzo0MVxyXG4gICAgICovXHJcbiAgICBnZXRDdXJyZW50VXNlcklkKCk6IHN0cmluZztcclxuXHJcbiAgICBnZXRDdXJyZW50VXNlcktleSgpOiB7W2tleTpzdHJpbmddOnN0cmluZ307XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3nlKjmiLdpZOmUruWAvOWvuSwgaHR0cOaLpuaIquWZqOeUqFxyXG4gICAgICovXHJcbiAgICBnZXRDdXJyZW50VXNlcklETWFwKCk6IHtba2V5OnN0cmluZ106c3RyaW5nfTtcclxuICAgIC8qKiBjcmVhdGUgYnkgenhxXHJcbiAgICAgKiAg5Yik5pat5b2T5YmN55So5oi35piv5ZCm5pyJ5oyH5a6aIOeahCDlip/og73mnYPpmZBcclxuICAgICAqIEB0aW1lOiAyMDE3LTA2LTE1IDE3OjU3OjQxXHJcbiAgICAgKiBAcGFyYW1zOiBwb3dlckNvZGUgOnN0cmluZyDlip/og73mqKHlnZfmnYPpmZAga2V5XHJcbiAgICAgKiBAcmV0dXJuOiBib29sZWFuXHJcbiAgICAgKi9cclxuICAgIGhhc0Z1bmNBdXRoKHBvd2VyS2V5OnN0cmluZyk6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bnlKjmiLcg5piv5ZCm5omT5byA5aOw6Z+z5oql6K2mXHJcbiAgICAgKiBAdGltZTogMjAxNy0wOC0xOSAxNToyMToxMVxyXG4gICAgICogQHBhcmFtczpcclxuICAgICAqIEByZXR1cm46IGJvb2xlYW5cclxuICAgICAqL1xyXG4gICAgZ2V0UGxheU11c2ljU3RhdHVzKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqICDkv67mlLnnlKjmiLcg5piv5ZCm5omT5byA5aOw6Z+z5oql6K2mXHJcbiAgICAgKiBAdGltZTogMjAxNy0wOC0xOSAxNToyMToxMVxyXG4gICAgICogQHBhcmFtczpcclxuICAgICAqIEByZXR1cm46IGJvb2xlYW5cclxuICAgICAqL1xyXG4gICAgc2V0UGxheU11c2ljU3RhdHVzKHBhcmFtczpib29sZWFuKTogdm9pZDtcclxuXHJcbiAgICByZW1vdmVVc2VyQ2FjaGUoKTogdm9pZDtcclxuXHJcbiAgICBnZXRSb2xlSWRzKCk6IHN0cmluZztcclxuXHJcbiAgICBnZXRVc2VyTW9kdWxlQXV0aExpc3QoKTpBcnJheTxNb2R1bGVJdGVtPlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlckluZm9DYWNoZVByb3ZpZGVye1xyXG4gICAgcHJpdmF0ZSBVU0VSX0lORk9fS0VZID0gU3lzdGVtQ29uZmlnLlVTRVJfSU5GT19LRVk7XHJcbiAgICBwcml2YXRlIEFVVEhfQ0FDSEVfS0VZX05BTUUgPSBcIkF1dGhDYWNoZUtleVwiO1xyXG4gICAgcHJpdmF0ZSBVU0VSX0lEX0tFWSA9IFwiVXNlcklES2V5XCI7XHJcblxyXG4gICAgcHJpdmF0ZSBDYWNoZV9Vc2VyX0luZm9zOiBMb2dpblVzZXJJbmZvID0gbnVsbDtcclxuICAgIHByaXZhdGUgQ2FjaGVfVXNlcl9GdW5jQXV0aE1hcDoge1trZXk6c3RyaW5nXTpNb2R1bGVJdGVtfSA9IHt9O1xyXG5cclxuICAgIHByaXZhdGUgSVNfT1BFTl9BTEFSTV9NVVNJQ19LRVkgPSBcIklTX09QRU5fQUxBUk1fTVVTSUNcIjtcclxuICAgIHByaXZhdGUgSVNfT1BFTl9PUEVOX0FMQVJNX01VU0lDX1ZBTFVFOmJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSByb2xlSWRzOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLkNhY2hlX1VzZXJfSW5mb3MgPSB0aGlzLmdldFVzZXJMb2dpbkluZm8oKTtcclxuICAgICAgICB0aGlzLkNhY2hlX1VzZXJfRnVuY0F1dGhNYXAgPSAgdGhpcy5nZXRVc2VyRnVuY0F1dGhNYXAoKTtcclxuICAgICAgICB0aGlzLklTX09QRU5fT1BFTl9BTEFSTV9NVVNJQ19WQUxVRSA9IHRoaXMuZ2V0UGxheU11c2ljU3RhdHVzRnJvbUxvY2FsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgJGdldCgpe1xyXG4gICAgICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc0Z1bmNBdXRoKHBvd2VyS2V5OnN0cmluZyk6Ym9vbGVhbntcclxuICAgICAgICAgICAgICAgIGlmICghcG93ZXJLZXkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh2bS5DYWNoZV9Vc2VyX0Z1bmNBdXRoTWFwW3Bvd2VyS2V5XSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIOmBv+WFjemikee5geiuv+mXriBsb2NhbFN0b3JhZ2UuLi5cclxuICAgICAgICAgICAgZ2V0UGxheU11c2ljU3RhdHVzKCk6Ym9vbGVhbntcclxuICAgICAgICAgICAgICAgIHJldHVybiB2bS5JU19PUEVOX09QRU5fQUxBUk1fTVVTSUNfVkFMVUU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDov5Tlm57nlKjmiLfnmoTlp5PlkI1cclxuICAgICAgICAgICAgICogQHJldHVybnMge251bGx9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZ2V0Q3VycmVudFJlYWxOYW1lKCl7XHJcbiAgICAgICAgICAgICAgICBpZih2bS5DYWNoZV9Vc2VyX0luZm9zICYmIHZtLkNhY2hlX1VzZXJfSW5mb3MuSnNvblVzZXJEYXRhICYmIHZtLkNhY2hlX1VzZXJfSW5mb3MuSnNvblVzZXJEYXRhLlBlcnNvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLkNhY2hlX1VzZXJfSW5mb3MuSnNvblVzZXJEYXRhLlBlcnNvbi5OYW1lO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVXNlck5hbWUgSXMgTnVsbCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRVc2VySWQoKTpzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgaWYodm0uQ2FjaGVfVXNlcl9JbmZvcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLkNhY2hlX1VzZXJfSW5mb3MuSUQ7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVc2VySUQgSXMgTnVsbCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRVc2VySURNYXAoKToge1trZXk6c3RyaW5nXTogc3RyaW5nfXtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB7fSBhcyB7W2tleTpzdHJpbmddOiBzdHJpbmd9O1xyXG4gICAgICAgICAgICAgICAgaWYodm0uQ2FjaGVfVXNlcl9JbmZvcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3ZtLlVTRVJfSURfS0VZXSA9IHZtLkNhY2hlX1VzZXJfSW5mb3MuSUQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRDdXJyZW50VXNlcktleVN0cigpe1xyXG4gICAgICAgICAgICAgICAgaWYodm0uQ2FjaGVfVXNlcl9JbmZvcyAmJiB2bS5DYWNoZV9Vc2VyX0luZm9zLkpzb25Vc2VyRGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLkNhY2hlX1VzZXJfSW5mb3MuSnNvblVzZXJEYXRhLlVzZXJLZXk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOi/lOWbnuW9k+WJjeeUqOaIt+eahOadg+mZkGtleVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGdldEN1cnJlbnRVc2VyS2V5KCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHt9IGFzIHtba2V5OnN0cmluZ106c3RyaW5nfTtcclxuICAgICAgICAgICAgICAgIGlmKHZtLkNhY2hlX1VzZXJfSW5mb3MgJiYgdm0uQ2FjaGVfVXNlcl9JbmZvcy5Kc29uVXNlckRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFt2bS5BVVRIX0NBQ0hFX0tFWV9OQU1FXSA9IHZtLkNhY2hlX1VzZXJfSW5mb3MuSnNvblVzZXJEYXRhLlVzZXJLZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRQbGF5TXVzaWNTdGF0dXMocGFyYW1zOmJvb2xlYW4pe1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odm0uSVNfT1BFTl9BTEFSTV9NVVNJQ19LRVksYW5ndWxhci50b0pzb24ocGFyYW1zKSk7XHJcbiAgICAgICAgICAgICAgICB2bS5JU19PUEVOX09QRU5fQUxBUk1fTVVTSUNfVkFMVUUgPSBwYXJhbXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRVaWQoKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgICAgIGlmKHZtLkNhY2hlX1VzZXJfSW5mb3MgJiYgdm0uQ2FjaGVfVXNlcl9JbmZvcy5VaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5DYWNoZV9Vc2VyX0luZm9zLlVpZDtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVzZXJuYW1lIElzIE51bGwhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW1vdmVVc2VyQ2FjaGUoKTogdm9pZHtcclxuICAgICAgICAgICAgICAgIHRyeXtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh2bS5VU0VSX0lORk9fS0VZKTtcclxuICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcclxuICAgICAgICAgICAgICAgICAgICBpZih3aW5kb3cuY29uc29sZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ1c2VyaW5mb2NhY2hlZmFjdG9yeS5yZW1vdmVVc2VyQ2FjaGUgZXJyb3I6IFwiLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFJvbGVJZHMoKTogc3RyaW5ne1xyXG4gICAgICAgICAgICAgICAgaWYodm0ucm9sZUlkcyA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yb2xlSWRzID0gdm0uZ2V0Um9sZUlkcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLnJvbGVJZHM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFVzZXJNb2R1bGVBdXRoTGlzdCgpOkFycmF5PE1vZHVsZUl0ZW0+e1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmdldFVzZXJNb2R1bGVBdXRoTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gYXMgSVVzZXJJbmZvQ2FjaGVGYWN0b3J5O1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRVc2VyTG9naW5JbmZvKCkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgcmVzdWx0ID0gYW5ndWxhci5mcm9tSnNvbihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlVTRVJfSU5GT19LRVkpKTtcclxuICAgICAgICB9Y2F0Y2ggKGUpe1xyXG4gICAgICAgICAgICByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwidXNlcmluZm9DYWNoZVByb3ZpZGVyLmdldFVzZXJMb2dpbkluZm9cIiwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiBjcmVhdGUgYnkgenhxXHJcbiAgICAgKiAg6I635Y+W5Yqf6IO95p2D6ZmQIOaYoOWwhFxyXG4gICAgICogQHRpbWU6IDIwMTctMDYtMTUgMTk6Mzk6MzFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRVc2VyRnVuY0F1dGhNYXAgPSAoKTp7W2tleTpzdHJpbmddOk1vZHVsZUl0ZW19PT57XHJcbiAgICAgICAgbGV0IGZ1bmNBdXRoTWFwID0ge30gYXMge1trZXk6c3RyaW5nXTpNb2R1bGVJdGVtfTtcclxuICAgICAgICBsZXQgdXNlckluZm86TG9naW5Vc2VySW5mbyA9IHRoaXMuZ2V0VXNlckxvZ2luSW5mbygpO1xyXG4gICAgICAgIGlmKHVzZXJJbmZvICYmIHVzZXJJbmZvLkpzb25Vc2VyRGF0YSAmJiB1c2VySW5mby5Kc29uVXNlckRhdGEuTW9kdWxlSXRlbUxpc3Qpe1xyXG4gICAgICAgICAgICBsZXQgaT0wLGxlbj0gdXNlckluZm8uSnNvblVzZXJEYXRhLk1vZHVsZUl0ZW1MaXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yKDtpPGxlbjtpKyspe1xyXG4gICAgICAgICAgICAgICAgaWYodXNlckluZm8uSnNvblVzZXJEYXRhLk1vZHVsZUl0ZW1MaXN0W2ldKXtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jQXV0aE1hcFt1c2VySW5mby5Kc29uVXNlckRhdGEuTW9kdWxlSXRlbUxpc3RbaV0uRnVsbE5hbWVTcGFjZVBhdGhdID0gdXNlckluZm8uSnNvblVzZXJEYXRhLk1vZHVsZUl0ZW1MaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodXNlckluZm8uSnNvblVzZXJEYXRhLk1vZHVsZUl0ZW1MaXN0W2ldLk9wZXJhdGVJdGVtTGlzdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayBpbiB1c2VySW5mby5Kc29uVXNlckRhdGEuTW9kdWxlSXRlbUxpc3RbaV0uT3BlcmF0ZUl0ZW1MaXN0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY0F1dGhNYXBbdXNlckluZm8uSnNvblVzZXJEYXRhLk1vZHVsZUl0ZW1MaXN0W2ldLk9wZXJhdGVJdGVtTGlzdFtrXS5GdWxsTmFtZVNwYWNlUGF0aF0gPSB1c2VySW5mby5Kc29uVXNlckRhdGEuTW9kdWxlSXRlbUxpc3RbaV0uT3BlcmF0ZUl0ZW1MaXN0W2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY0F1dGhNYXA7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBnZXRVc2VyTW9kdWxlQXV0aExpc3QoKTogQXJyYXk8TW9kdWxlSXRlbT57XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdIGFzIEFycmF5PE1vZHVsZUl0ZW0+O1xyXG4gICAgICAgIGxldCB1c2VySW5mbzogTG9naW5Vc2VySW5mbyA9IHRoaXMuZ2V0VXNlckxvZ2luSW5mbygpO1xyXG4gICAgICAgIGlmKHVzZXJJbmZvICYmIHVzZXJJbmZvLkpzb25Vc2VyRGF0YSAmJiB1c2VySW5mby5Kc29uVXNlckRhdGEuTW9kdWxlSXRlbUxpc3Qpe1xyXG4gICAgICAgICAgICBsZXQgbW9kdWxlSXRlbXMgPSB1c2VySW5mby5Kc29uVXNlckRhdGEuTW9kdWxlSXRlbUxpc3Q7XHJcbiAgICAgICAgICAgIGxldCBpPTAsbGVuPW1vZHVsZUl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yKDsgaTxsZW47IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBpZihtb2R1bGVJdGVtc1tpXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobW9kdWxlSXRlbXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgZ2V0UGxheU11c2ljU3RhdHVzRnJvbUxvY2FsID0gKCk6Ym9vbGVhbj0+e1xyXG4gICAgICAgIGxldCBmbGFnID0gdHJ1ZTtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGZsYWcgPSBhbmd1bGFyLmZyb21Kc29uKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuSVNfT1BFTl9BTEFSTV9NVVNJQ19LRVkpKTtcclxuICAgICAgICB9Y2F0Y2ggKGUpe1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLklTX09QRU5fQUxBUk1fTVVTSUNfS0VZLGFuZ3VsYXIudG9Kc29uKHRydWUpKTtcclxuICAgICAgICAgICAgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbGFnO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIGdldFJvbGVJZHMoKTogc3RyaW5ne1xyXG4gICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgaWYodGhpcy5DYWNoZV9Vc2VyX0luZm9zICYmIHRoaXMuQ2FjaGVfVXNlcl9JbmZvcy5Kc29uVXNlckRhdGEgJiYgdGhpcy5DYWNoZV9Vc2VyX0luZm9zLkpzb25Vc2VyRGF0YS5MaXN0Um9sZSAmJiB0aGlzLkNhY2hlX1VzZXJfSW5mb3MuSnNvblVzZXJEYXRhLkxpc3RSb2xlLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICBsZXQgYXJyID0gW10gYXMgQXJyYXk8c3RyaW5nPjtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuQ2FjaGVfVXNlcl9JbmZvcy5Kc29uVXNlckRhdGEuTGlzdFJvbGUsIChtb2RlbDogUm9sZSk9PntcclxuICAgICAgICAgICAgICAgIGFyci5wdXNoKG1vZGVsLklEKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGFyci5qb2luKFwiLFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDov5nph4zlj5blkI3lj6t1c2VySW5mb0NhY2hlRmFjdG9yeeaYr+S4uuS6huiuqeS4muWKoeS7o+eggeaUueWKqOacgOWwj++8jOaVheS/neaMgeWOn+adpeeahOWQjeWtlyjljp/mnaXkuLpmYWN0b3J5KVxyXG4gKiDkuYvmiYDku6XlgZrmiJBwcm92aWRlciwg5piv5Zug5Li6YXBwLmNvbmZpZ+mcgOimgeeUqOWIsOatpOS7o+eggeS4reeahOWHveaVsFxyXG4gKi9cclxuYXBwXHJcbiAgICAucHJvdmlkZXIoJ3VzZXJJbmZvQ2FjaGVGYWN0b3J5JywgVXNlckluZm9DYWNoZVByb3ZpZGVyKTtcclxuXHJcbiJdfQ==
