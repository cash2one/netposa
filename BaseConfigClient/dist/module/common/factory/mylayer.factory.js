define(["require", "exports", "angular"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IAreaAndPosition = (function () {
        function IAreaAndPosition() {
        }
        return IAreaAndPosition;
    }());
    exports.IAreaAndPosition = IAreaAndPosition;
    var layerOpenParams = (function () {
        function layerOpenParams() {
        }
        return layerOpenParams;
    }());
    exports.layerOpenParams = layerOpenParams;
    function MylayerFactory($rootScope, $compile, $timeout, $q, $http) {
        var _this = this;
        _this.options = {};
        _this.open = function (options) {
            var ele = document.getElementById("mylayer" + options.ID);
            if (ele !== null) {
                console.error("LayerID:" + options.ID + "\u91CD\u590D");
                document.body.removeChild(ele);
                ele = null;
            }
            var left = options.AreaAndPosition.left || 0;
            var top = options.AreaAndPosition.top || 0;
            var width = options.AreaAndPosition.width || 100;
            var height = options.AreaAndPosition.height || 100;
            var zIndex = options.AreaAndPosition.zIndex || 999;
            var injectScope = options.scope || $rootScope.$new();
            var $body = $('body');
            $body.append("\n            <div id=\"mylayer" + options.ID + "\" style=\"display:none;position: absolute;z-index:999\">\n                <!--<iframe class='f-abs u-iframe-layer' style=\"position: absolute; width: 100%; height: 100%; z-index:0;top: 0;left: 0;\"></iframe>-->\n                <div class=\"mylayer-content\">" + options.content + "</div>\n            </div>");
            $body.find("#mylayer" + options.ID).css({
                left: left,
                top: top,
                width: width,
                height: height,
                opacity: 1,
                zIndex: zIndex
            });
            var $content = $body.find("#mylayer" + options.ID);
            var _domStr = $compile($content[0].outerHTML)(injectScope);
            $content.replaceWith(_domStr);
            injectScope.$on("$destroy", function () {
                _domStr.remove();
                _domStr = null;
                injectScope = null;
            });
            $("#mylayer" + options.ID).fadeIn(500).find('.mylayer-close').on('click', function () {
                _this.close(options.ID);
            });
            _this.options = options;
        };
        _this.close = function (ID) {
            if (_this.options.end) {
                _this.options.end();
            }
            $("#mylayer" + ID).fadeOut(200, function () {
                $(this).remove();
            });
        };
        _this.resize = function (params, ID) {
            var left = params.left || _this.options.left;
            var top = params.top || _this.options.top;
            var width = params.width || _this.options.width;
            var height = params.height || _this.options.height;
            var $content = $("#mylayer" + ID);
            $content.animate({
                left: left,
                top: top,
                width: width,
                height: height
            }, 500);
        };
        _this.destroy = function () {
            var eles = $('body').find('.mylayer-content');
            eles.each(function (item) {
                $(this).parent().remove();
            });
        };
        return _this;
    }
    angular
        .module('ng-mylayer', [])
        .factory('mylayer', MylayerFactory);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
