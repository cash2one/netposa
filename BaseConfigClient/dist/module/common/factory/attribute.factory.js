define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getTime(timestamp) {
        var time = new Date(timestamp);
        var year = time.getFullYear();
        var month = time.getMonth() + 1;
        if (month < 10) {
            month = '0' + month;
        }
        var date = time.getDate() < 10 ? "0" + time.getDate() : time.getDate();
        var hour = time.getHours() < 10 ? "0" + time.getHours() : time.getHours();
        var minute = time.getMinutes() < 10 ? "0" + time.getMinutes() : time.getMinutes();
        var second = time.getSeconds() < 10 ? "0" + time.getSeconds() : time.getSeconds();
        var currentTime = year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
        return currentTime;
    }
    var AttributeFactory = (function () {
        function AttributeFactory() {
            this.getAttributeSex = function (Status) {
                var sex = "";
                switch (Status) {
                    case "0":
                        sex = "未知";
                        break;
                    case "1":
                        sex = "男";
                        break;
                    case "2":
                        sex = "女";
                        break;
                }
                return sex;
            };
            this.getAttributeFeature = function (Glass, IsPants, IsSleeve, Mask, Smile) {
                var feature = "";
                switch (Glass) {
                    case 0:
                        feature += "太阳镜 ";
                        break;
                    case 1:
                        feature += "普通眼镜 ";
                        break;
                    default:
                        break;
                }
                switch (IsPants) {
                    case 1:
                        feature += "穿短裤 ";
                        break;
                    default:
                        break;
                }
                switch (IsSleeve) {
                    case 1:
                        feature += "穿短袖 ";
                        break;
                    default:
                        break;
                }
                switch (Mask) {
                    case 1:
                        feature += "戴面具 ";
                        break;
                    default:
                        break;
                }
                switch (Smile) {
                    case 1:
                        feature += "微笑 ";
                        break;
                    default:
                        break;
                }
                return feature;
            };
            this.getAttributeAge = function (num) {
                var ageName = "";
                if ((num <= 20) && (num >= 1)) {
                    ageName = "少年";
                }
                else if ((num <= 40) && (num >= 21)) {
                    ageName = "青年";
                }
                else if ((num <= 60) && (num >= 41)) {
                    ageName = "壮年";
                }
                else if (num > 60) {
                    ageName = "老年";
                }
                return ageName;
            };
            this.getAttributeHairStyle = function () {
                return "未知";
            };
            this.getAttributeGlasses = function (num) {
                var name = "";
                switch (num) {
                    case 0:
                        name = "太阳镜";
                        break;
                    case 1:
                        name = "普通眼镜";
                        break;
                    default:
                        break;
                }
                return name;
            };
            this.getAttributeEquipment = function (num) {
                var name = "";
                return name;
            };
            this.getAttributeClothing = function (param) {
                var name = "";
                switch (param.IsSleeve) {
                    case 0:
                        name += "穿长袖 ";
                        break;
                    case 1:
                        name += "穿短袖 ";
                        break;
                    default:
                        break;
                }
                switch (param.IsPants) {
                    case 0:
                        name += "穿长袖 ";
                        break;
                    case 1:
                        name += "穿短裤 ";
                        break;
                    default:
                        break;
                }
                return name;
            };
            this.getAttributeCap = function () {
                var name = "";
                return name;
            };
            this.getAttributeMask = function (num) {
                var name = "";
                switch (num) {
                    case 0:
                        name = "没戴口罩";
                        break;
                    case 1:
                        name = "戴口罩";
                        break;
                    default:
                        name = "未知";
                        break;
                }
                return name;
            };
            this.getAttributeBelongings = function () {
                var name = "";
                return name;
            };
            this.getAttributeShoe = function () {
                var name = "";
                return name;
            };
            this.getCrossTrainTime = function (num) {
                var timestamp = (new Date()).valueOf();
                var time = {
                    startTime: "",
                    endTime: ""
                };
                time.endTime = getTime(timestamp);
                if (num === 1) {
                    timestamp = timestamp - 1 * 24 * 60 * 60 * 1000;
                }
                else if (num === 2) {
                    timestamp = timestamp - 7 * 24 * 60 * 60 * 1000;
                }
                else if (num === 3) {
                    timestamp = timestamp - 30 * 24 * 60 * 60 * 1000;
                }
                else if (num === 0) {
                    timestamp = timestamp - 365 * 24 * 60 * 60 * 1000;
                }
                time.startTime = getTime(timestamp);
                return time;
            };
            this.numTransform = function (num) {
                if (num > 0) {
                    var reg = /(?=(?!\b)(\d{3})+$)/g;
                    return String(num).replace(reg, ',');
                }
                else {
                    return "0";
                }
            };
        }
        return AttributeFactory;
    }());
    exports.AttributeFactory = AttributeFactory;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
