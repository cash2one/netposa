define(["require", "exports", "../../../portrait-tool"], function (require, exports, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TraceAnalyzeModel = (function () {
        function TraceAnalyzeModel(points, mapId, layer, opts) {
            this.speed = opts.speed || 100;
            this.opts = opts || {};
            this.mapId = mapId;
            this.points = points || [];
            this.layer = layer;
            this.startMarkUrl = opts.startMarkUrl || '/images/map/map-marker-start.png';
            this.endMarkUrl = opts.endMarkUrl || '/images/map/map-marker-end.png';
            this.normalMarkUrl = opts.normalMarkUrl || '/images/map/map-marker-smallpink.png';
            this.moveUrl = opts.moveUrl || "/images/map/temptracker.png";
            this.showMarkers = opts.showMarkers || false;
            if (angular.isArray(this.points) && this.points.length > 0) {
                this.init();
            }
            else {
                console.error("TraceAnalyzeModel init error: points is null!");
            }
        }
        TraceAnalyzeModel.prototype.init = function () {
            this.id = portrait_tool_1.default.getUUID();
            this.animationLine = new NPMapLib.Symbols.AnimationLine(this.mapId, this.points, this.getAnimationLineOpt(this.points[0], this.opts));
            this.bindEvent();
            this.speed = this.opts.speed || this.speed;
            this.animationLine.setSpeed(this.opts.speed || this.speed);
            this.setLayer();
            if (this.showMarkers) {
                this.initMarkers();
            }
        };
        TraceAnalyzeModel.prototype.initMarkers = function () {
            var markers = [];
            var i, len, point, key, temp = {};
            for (i = 0, len = this.points.length; i < len; i++) {
                point = this.points[i];
                key = getPointKey(point.lat, point.lon);
                if (temp[key] == null) {
                    temp[key] = 0;
                }
                else {
                    temp[key] = temp[key] + 1;
                }
                markers.push(this.createPointMarker(point, (i + 1) + "", i, temp[key], i === (len - 1)));
            }
            this.markers = markers;
            function getPointKey(lat, lon) {
                return lat + "_" + lon;
            }
        };
        TraceAnalyzeModel.prototype.createPointMarker = function (point, label, index, repeat, isEnd) {
            var marker = new NPMapLib.Symbols.Marker(point);
            if (index == 0) {
                marker.setIcon(new NPMapLib.Symbols.Icon(this.startMarkUrl, new NPMapLib.Geometry.Size(32, 32), { anchor: new NPMapLib.Geometry.Size(-14, -29) }));
            }
            else if (isEnd) {
                marker.setIcon(new NPMapLib.Symbols.Icon(this.endMarkUrl, new NPMapLib.Geometry.Size(32, 32), { anchor: new NPMapLib.Geometry.Size(-14, -26) }));
            }
            else {
                marker.setIcon(new NPMapLib.Symbols.Icon(this.normalMarkUrl, new NPMapLib.Geometry.Size(32, 32), { anchor: new NPMapLib.Geometry.Size(-14, -26) }));
                var l = new NPMapLib.Symbols.Label(label, {
                    "position": point,
                    "offset": new NPMapLib.Geometry.Size(2, 16)
                });
                l.setStyle({ fontSize: 12, fontFamily: 'Arail', color: 'white', align: 'center', isBold: true });
                marker.setLabel(l);
            }
            return marker;
        };
        TraceAnalyzeModel.prototype.getAnimationLineOpt = function (point, opts) {
            return {
                headerMarker: this.createHeaderMarker(point),
                color: opts.color || 'red',
                opacity: opts.opacity || 0.8,
                weight: opts.weight || 10
            };
        };
        TraceAnalyzeModel.prototype.createHeaderMarker = function (point) {
            var marker = new NPMapLib.Symbols.Marker(point, { offset: new NPMapLib.Geometry.Size(0, -12) });
            marker.setIcon(new NPMapLib.Symbols.Icon(this.moveUrl, new NPMapLib.Geometry.Size(29, 29)));
            marker.setData({ name: 'move' });
            this.layer.addOverlay(marker);
            return marker;
        };
        TraceAnalyzeModel.prototype.start = function () {
            if (this.animationLine) {
                this.animationLine.start();
            }
        };
        TraceAnalyzeModel.prototype.restart = function () {
            this.clear();
            if (this.animationLine) {
                this.animationLine.restart();
            }
        };
        TraceAnalyzeModel.prototype.pause = function () {
            if (this.animationLine) {
                this.animationLine.pause();
            }
        };
        TraceAnalyzeModel.prototype.stop = function () {
            if (this.animationLine) {
                this.animationLine.stop();
            }
        };
        TraceAnalyzeModel.prototype.clear = function () {
            if (this.markers) {
                var i = void 0, len = void 0;
                for (i = 0, len = this.markers.length; i < len; i++) {
                    this.layer.removeOverlay(this.markers[i]);
                }
            }
        };
        TraceAnalyzeModel.prototype.remove = function () {
            if (this.animationLine) {
                this.animationLine.remove();
            }
            this.animationLine = null;
            this.layer.removeAllOverlays();
            this.points = null;
            this.markers = null;
        };
        TraceAnalyzeModel.prototype.drawMarkerInPreDraw = function (index) {
            if (this.markers) {
                var marker = this.markers[index];
                this.layer.addOverlay(marker);
                marker.showLabel();
            }
        };
        TraceAnalyzeModel.prototype.bindEvent = function () {
            var _this = this;
            if (this.animationLine == null || !this.opts) {
                return;
            }
            if (typeof this.opts.afterDraw === "function") {
                this.animationLine.events.register('afterDraw', function (evt) {
                    _this.opts.afterDraw(evt);
                });
            }
            this.animationLine.events.register('preDraw', function (evt) {
                _this.drawMarkerInPreDraw(evt.index);
                if (typeof _this.opts.preDraw === "function") {
                    _this.opts.preDraw(evt);
                }
            });
            if (typeof this.opts.afterStep === "function") {
                this.animationLine.events.register('afterStep', function (evt) {
                    _this.opts.afterStep(evt);
                });
            }
            if (typeof this.opts.start === "function") {
                this.animationLine.addEventListener(NPMapLib.ANIMATION_EVENT_START, function () {
                    _this.opts.start();
                });
            }
            if (typeof this.opts.pause === "function") {
                this.animationLine.addEventListener(NPMapLib.ANIMATION_EVENT_PAUSE, function () {
                    _this.opts.pause();
                });
            }
            if (typeof this.opts.stop === "function") {
                this.animationLine.addEventListener(NPMapLib.ANIMATION_EVENT_STOP, function () {
                    _this.opts.stop();
                });
            }
            if (typeof this.opts.moving === "function") {
                this.animationLine.addEventListener(NPMapLib.ANIMATION_EVENT_MOVING, this.opts.moving);
            }
            if (typeof this.opts.moved === "function") {
                this.animationLine.addEventListener(NPMapLib.ANIMATION_EVENT_MOVED, this.opts.moved);
            }
        };
        TraceAnalyzeModel.prototype.setLayer = function () {
            if (this.animationLine && this.layer) {
                this.animationLine.setLayer(this.layer);
            }
        };
        TraceAnalyzeModel.prototype.setSpeed = function (speed) {
            if (this.animationLine) {
                this.animationLine.setSpeed(speed || this.speed);
            }
        };
        return TraceAnalyzeModel;
    }());
    var TraceAnalyzeFactory = (function () {
        function TraceAnalyzeFactory(mapAdapter) {
            this.cacheAnimationLine = {};
            this.traceAnalyzeLayer = null;
            this.mapAdapter = mapAdapter;
            this.getTraceAnalyzeLayer();
        }
        TraceAnalyzeFactory.prototype.getTraceAnalyzeLayer = function () {
            if (this.traceAnalyzeLayer == null) {
                this.traceAnalyzeLayer = new NPMapLib.Layers.OverlayLayer(TraceAnalyzeFactory.TRACE_ANALYZE_LAYER_NAME);
                this.mapAdapter.addLayer(this.traceAnalyzeLayer);
            }
            return this.traceAnalyzeLayer;
        };
        TraceAnalyzeFactory.prototype.createTraceAnalyze = function (points, opts) {
            opts = opts || {};
            if (!angular.isArray(points)) {
                console.error("creatTraceAnalyze error: points is not array");
            }
            var model = this.createTraceAnalyzeModel(points, opts);
            this.saveAnimationLine(model.id, model);
            model.layer.setZIndex(201);
            return model.id;
        };
        TraceAnalyzeFactory.prototype.createTraceAnalyzeModel = function (points, opts) {
            return new TraceAnalyzeModel(points, this.mapAdapter.getMapId(), this.getTraceAnalyzeLayer(), opts);
        };
        TraceAnalyzeFactory.prototype.startTraceAnalyze = function (lineId) {
            var model = this.getAnimationLine(lineId);
            if (model) {
                model.start();
            }
        };
        TraceAnalyzeFactory.prototype.reStartTraceAnalyze = function (lineId) {
            var model = this.getAnimationLine(lineId);
            if (model) {
                model.restart();
            }
        };
        TraceAnalyzeFactory.prototype.stopTraceAnalyze = function (lineId) {
            var animationLine = this.getAnimationLine(lineId);
            if (animationLine) {
                animationLine.stop();
            }
        };
        TraceAnalyzeFactory.prototype.pauseTraceAnalyze = function (lineId, flag) {
            var model = this.getAnimationLine(lineId);
            if (model) {
                flag === false ? model.start() : model.pause();
            }
        };
        TraceAnalyzeFactory.prototype.clearTraceAnalyze = function (lineId) {
            var model = this.getAnimationLine(lineId);
            if (model) {
                model.remove();
            }
            this.removeAnimationLine(lineId);
        };
        TraceAnalyzeFactory.prototype.setSpeed = function (lineId, speed) {
            var model = this.getAnimationLine(lineId);
            if (model) {
                model.setSpeed(speed || TraceAnalyzeFactory.DEFAULT_SPEED);
            }
        };
        TraceAnalyzeFactory.prototype.destroy = function () {
            this.cacheAnimationLine = null;
        };
        TraceAnalyzeFactory.prototype.getAnimationLine = function (lineId) {
            return this.cacheAnimationLine[lineId];
        };
        TraceAnalyzeFactory.prototype.saveAnimationLine = function (lineId, traceAnalyzeModel) {
            if (lineId != null) {
                this.cacheAnimationLine[lineId] = traceAnalyzeModel;
            }
            else {
                console.error("TraceAnalyzeFactory.saveAnimationLine fail: lineId is null!");
            }
        };
        TraceAnalyzeFactory.prototype.removeAnimationLine = function (lineId) {
            if (this.cacheAnimationLine[lineId]) {
                delete this.cacheAnimationLine[lineId];
            }
        };
        TraceAnalyzeFactory.TRACE_ANALYZE_LAYER_NAME = "traceAnalyze";
        TraceAnalyzeFactory.DEFAULT_SPEED = 1000;
        return TraceAnalyzeFactory;
    }());
    exports.TraceAnalyzeFactory = TraceAnalyzeFactory;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
