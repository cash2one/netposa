define(["require", "exports", "../../../portrait-tool"], function (require, exports, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InfoWindowFactory = (function () {
        function InfoWindowFactory() {
        }
        InfoWindowFactory.prototype.removeInfoWindow = function (winId) {
            var result;
            if (this.cacheInfoWindows && this.cacheInfoWindows[winId]) {
                result = this.cacheInfoWindows[winId];
                this.cacheInfoWindows[winId] = null;
                delete this.cacheInfoWindows[winId];
            }
            return result;
        };
        InfoWindowFactory.prototype.getById = function (winId) {
            if (this.cacheInfoWindows && this.cacheInfoWindows[winId]) {
                return this.cacheInfoWindows[winId];
            }
            else {
                return;
            }
        };
        InfoWindowFactory.prototype.addInfoWindow = function (win) {
            if (!this.cacheInfoWindows) {
                this.cacheInfoWindows = {};
            }
            var uuid = portrait_tool_1.default.getUUID();
            this.cacheInfoWindows[uuid] = win;
            return uuid;
        };
        InfoWindowFactory.prototype.addEventListener = function (win, uuid, callbacks) {
            if (win == null)
                return;
            if (callbacks == null)
                return;
            win.addEventListener(NPMapLib.INFOWINDOW_EVENT_OPEN, function () {
                if (typeof callbacks["open"] === "function") {
                    callbacks["open"].call(win, uuid);
                }
            });
            win.addEventListener(NPMapLib.INFOWINDOW_EVENT_CLOSE, function () {
                if (typeof callbacks["close"] === "function") {
                    callbacks["close"].call(win, uuid);
                }
            });
            win.addEventListener(NPMapLib.INFOWINDOW_EVENT_HIDE, function () {
                if (typeof callbacks["hide"] === "function") {
                    callbacks["hide"].call(win, uuid);
                }
            });
        };
        InfoWindowFactory.getInfoWindow = function (point, title, dom, opts) {
            return new NPMapLib.Symbols.InfoWindow(point, title, dom, opts);
        };
        InfoWindowFactory.getInfoWindowOpts = function (opts) {
            return portrait_tool_1.default.extend(true, {}, this.getDefaultInfoWindowOpts(), opts);
        };
        InfoWindowFactory.getDefaultInfoWindowOpts = function () {
            return {
                width: 404,
                height: 404,
                offset: new NPMapLib.Geometry.Size(0, 15),
                iscommon: false,
                enableCloseOnClick: false,
                isAnimationOpen: true,
                isAdaptation: true,
                positionBlock: {
                    imageSrc: "/libs/npgis/localImg/iw_tail.png",
                    imageSize: new NPMapLib.Geometry.Size(17, 12)
                }
            };
        };
        return InfoWindowFactory;
    }());
    exports.InfoWindowFactory = InfoWindowFactory;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
