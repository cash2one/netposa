define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ClusterMarkerFactory = (function () {
        function ClusterMarkerFactory(mapAdapter) {
            this.points = [];
            this.markers = [];
            this.mapAdapter = mapAdapter;
        }
        ClusterMarkerFactory.prototype.getSystemPointByID = function (objectId) {
            if (!this.points && this.points.length <= 0)
                return null;
            var points = this.points;
            var i, len, result;
            for (i = 0, len = points.length; i < len; i++) {
                if (points[i].ObjectID === objectId) {
                    result = points[i];
                    break;
                }
            }
            return result;
        };
        ClusterMarkerFactory.prototype.setPoints = function (points) {
            var i, len, _points = this.points, temp;
            for (i = 0, len = points.length; i < len; i++) {
                temp = points[i];
                if (temp.ObjectID && (temp.Lon != 0 || temp.Lat != 0)) {
                    _points.push(temp);
                }
            }
        };
        ClusterMarkerFactory.prototype.getPoints = function () {
            return this.points || [];
        };
        ClusterMarkerFactory.prototype.removePointByParams = function (paramName, paramValue) {
            if (!this.points && this.points.length <= 0)
                return;
            var i, len, temp;
            for (i = 0, len = this.points.length; i < len; i++) {
                temp = this.points[i];
                if (!temp) {
                    console.log(i, "不存在", this.points);
                }
                if (temp[paramName] != null && temp[paramName] === paramValue) {
                    this.points.splice(i, 1);
                    i--;
                    len--;
                }
            }
        };
        ClusterMarkerFactory.prototype.removePointByPoints = function (points) {
            if (!this.points && this.points.length <= 0)
                return;
            var arr = [];
            this.points.forEach(function (tempPoint) {
                var s = false;
                points.forEach(function (delPoint) {
                    if (tempPoint.ID === delPoint.ID) {
                        s = true;
                    }
                });
                if (!s) {
                    arr.push(tempPoint);
                }
            });
            this.points = arr;
            console.log(this.points);
        };
        ClusterMarkerFactory.prototype.addPoint = function (point) {
            var index = this.getPointIndexInPoints(point);
            if (index === -1) {
                this.points.push(point);
            }
            else {
                this.points[index] = point;
            }
        };
        ClusterMarkerFactory.prototype.createClusterMarker = function (lon, lat, markType, model) {
            var result = this.mapAdapter.createClusterMarker({
                lon: lon,
                lat: lat
            }, { markType: markType });
            result.ID = model.ID;
            result.ObjectName = model.ObjectName || '此设备无名称';
            result.ObjectID = model.ObjectID;
            result.Descrption = model.Descrption;
            result.ObjectType = model.ObjectType;
            result.TaskStatus = model.TaskStatus;
            result.ObjectState = model.ObjectState;
            result.LayerType = model.LayerType;
            return result;
        };
        ;
        ClusterMarkerFactory.prototype.getPointIndexInPoints = function (point) {
            if (!this.points && this.points.length <= 0 && point)
                return;
            var i, len, points = this.points, result = -1;
            for (i = 0, len = points.length; i < len; i++) {
                if (point.ObjectID === points[i].ObjectID) {
                    result = i;
                }
            }
            return result;
        };
        ClusterMarkerFactory.prototype.createClusterMarkers = function (points) {
            var i, len, temp, result = [];
            for (i = 0, len = points.length; i < len; i++) {
                temp = points[i];
                if (temp && temp.Lat && temp.Lon) {
                    result.push(this.createClusterMarker(temp.Lon, temp.Lat, temp.LayerType, temp));
                }
                else {
                    console.log(temp);
                }
            }
            return result;
        };
        ClusterMarkerFactory.prototype.createClusterPoints = function (points) {
            return new NPMapLib.Symbols.ClusterPoints(points, { threshold: 0 });
        };
        ClusterMarkerFactory.prototype.getClusterPoints = function (points) {
            if (points && points.length > 0) {
                return this.createClusterPoints(this.createClusterMarkers(points));
            }
            else {
                return null;
            }
        };
        return ClusterMarkerFactory;
    }());
    exports.ClusterMarkerFactory = ClusterMarkerFactory;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
