define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MapToolBar = (function () {
        function MapToolBar(mapTools, mapAdapter) {
            this.mapTools = mapTools;
            this.mapAdapter = mapAdapter;
        }
        MapToolBar.prototype.addCircleSearchControl = function (center, callBack, minDistance, maxDistance) {
            this.mapTools.addCircleSearchControl(center, callBack, minDistance, maxDistance);
        };
        MapToolBar.prototype.removeCircleSearchControl = function () {
            this.mapTools.removeCircleSearchControl();
        };
        MapToolBar.prototype.addSelectGeometry = function (overlay) {
            if (!this.cacheSelectGeometry) {
                this.cacheSelectGeometry = new Array();
            }
            this.cacheSelectGeometry.push(overlay);
            this.setCacheSelectGeometryForMap();
        };
        MapToolBar.prototype.removeOverlay = function (overlay) {
            var id = overlay.getId();
            for (var i = 0; i < this.cacheSelectGeometry.length; i++) {
                if (id === this.cacheSelectGeometry[i].getId()) {
                    this.cacheSelectGeometry.splice(i, 1);
                    break;
                }
            }
            delete this.cacheSelectGeometryForMap[id];
        };
        MapToolBar.prototype.setCacheSelectGeometryForMap = function () {
            var _this = this;
            if (!this.cacheSelectGeometryForMap) {
                this.cacheSelectGeometryForMap = {};
            }
            this.cacheSelectGeometry.forEach(function (overlay) {
                var id = overlay.getId();
                _this.cacheSelectGeometryForMap[id] = overlay;
            });
        };
        MapToolBar.prototype.getSelectGeometrys = function () {
            return this.cacheSelectGeometry;
        };
        MapToolBar.prototype.resetSelectGeometrys = function () {
            this.cacheSelectGeometry = null;
        };
        MapToolBar.prototype.measureDistance = function () {
            this.mapTools.measureDistance();
        };
        MapToolBar.prototype.measureArea = function () {
            this.mapTools.measureArea();
        };
        MapToolBar.prototype.cancelMeasure = function () {
            this.mapTools.cancelMeasure();
        };
        MapToolBar.prototype.drawLine = function (callBackMethod, style) {
            var _this = this;
            this.mapTools.drawLine(function (extent, geometry) {
                if (style) {
                    geometry = new NPMapLib.Geometry.Polyline(geometry.getPath(), style);
                }
                _this.mapAdapter.addOverlay(geometry);
                _this.addSelectGeometry(geometry);
                if (callBackMethod) {
                    callBackMethod(extent, geometry);
                }
            });
        };
        MapToolBar.prototype.drawPolygon = function (callBackMethod, style) {
            var _this = this;
            this.mapTools.drawPolygon(function (extent, geometry) {
                if (style) {
                    geometry = new NPMapLib.Geometry.Polygon(geometry.getPath(), style);
                }
                _this.mapAdapter.addOverlay(geometry);
                _this.addSelectGeometry(geometry);
                if (callBackMethod) {
                    callBackMethod(extent, geometry);
                }
            });
        };
        MapToolBar.prototype.drawRectangle = function (callBackMethod, style) {
            var _this = this;
            this.mapTools.drawRectangle(function (extent, geometry) {
                if (style) {
                    geometry = new NPMapLib.Geometry.Polygon(geometry.getPath(), style);
                }
                console.log(geometry);
                _this.mapAdapter.addOverlay(geometry);
                _this.addSelectGeometry(geometry);
                if (callBackMethod) {
                    callBackMethod(extent, geometry);
                }
            });
        };
        MapToolBar.prototype.drawCircle = function (callBackMethod, style) {
            var _this = this;
            this.mapTools.drawCircle(function (extent, geometry) {
                if (style) {
                    geometry = new NPMapLib.Geometry.Circle(geometry.getCenter(), geometry.getRadius(), style);
                }
                _this.mapAdapter.addOverlay(geometry);
                _this.addSelectGeometry(geometry);
                if (callBackMethod) {
                    callBackMethod(extent, geometry);
                }
            });
        };
        MapToolBar.prototype.drawCircleByDiameter = function (callBackMethod) {
        };
        MapToolBar.prototype.clearOverlayByID = function (ID) {
        };
        MapToolBar.prototype.cancelDraw = function () {
            this.mapTools.cancelDraw();
        };
        return MapToolBar;
    }());
    exports.MapToolBar = MapToolBar;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
