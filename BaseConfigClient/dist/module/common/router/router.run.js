define(["require", "exports", "../app/main.app", "angular"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RouterRunConfig = (function () {
        function RouterRunConfig($state, $rootScope) {
            if (!RouterRunConfig.redirectToMap) {
                console.error("redirectToMap初始化失败!");
            }
            $rootScope.$on("$stateChangeStart", function (evt, toState, toParams, fromState, fromParams) {
                if (RouterRunConfig.redirectToMap[toState['name']]) {
                    $state.go(RouterRunConfig.redirectToMap[toState['name']]);
                    evt.preventDefault();
                }
            });
        }
        RouterRunConfig.$inject = ['$state', '$rootScope'];
        return RouterRunConfig;
    }());
    var RouterRun = (function () {
        function RouterRun() {
            this._init = function (authorList) {
                var parentMap = {}, redirectToMap = {}, i, len;
                var vm = this;
                for (i = 0, len = authorList.length; i < len; i++) {
                    if (authorList[i]['parent']) {
                        if (!parentMap[authorList[i]['parent']]) {
                            parentMap[authorList[i]['parent']] = [];
                        }
                        parentMap[authorList[i]['parent']].push(authorList[i]['key']);
                    }
                }
                for (i = 0, len = authorList.length; i < len; i++) {
                    if (authorList[i]['redirectTo']) {
                        if (parentMap[authorList[i]['key']]) {
                            redirectToMap[authorList[i]['key']] = parentMap[authorList[i]['key']][0];
                        }
                    }
                }
                RouterRunConfig.redirectToMap = redirectToMap;
                main_app_1.app.run(RouterRunConfig).run(['$state', '$stateParams', angular.noop]);
            };
            this.init = function (authorList) {
                this._init(authorList);
            };
        }
        RouterRun.getInstance = function () {
            return this._instance = this._instance || new RouterRun();
        };
        return RouterRun;
    }());
    exports.default = RouterRun;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvY29tbW9uL3JvdXRlci9yb3V0ZXIucnVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQVVBO1FBR0kseUJBQVksTUFBVSxFQUFFLFVBQWM7WUFFbEMsRUFBRSxDQUFBLENBQUMsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUEsQ0FBQztnQkFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7WUFNRCxVQUFVLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLFVBQVUsR0FBTyxFQUFFLE9BQVcsRUFBRSxRQUFZLEVBQUUsU0FBYSxFQUFFLFVBQWM7Z0JBQzNHLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUlqRCxNQUFNLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUQsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN6QixDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBcEJNLHVCQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFxQjlDLHNCQUFDO0tBdkJELEFBdUJDLElBQUE7SUFFRDtRQUNJO1lBU0EsVUFBSyxHQUFHLFVBQVMsVUFBZ0M7Z0JBRzdDLElBQUksU0FBUyxHQUFrQyxFQUFFLEVBQUUsYUFBYSxHQUEwQixFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztnQkFDckcsSUFBSSxFQUFFLEdBQUcsSUFBVyxDQUFDO2dCQUVyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDaEQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUN0QyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO3dCQUM1QyxDQUFDO3dCQUNELFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2xFLENBQUM7Z0JBQ0wsQ0FBQztnQkFFRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDaEQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFFOUIsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDbEMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQztvQkFDTCxDQUFDO2dCQUNMLENBQUM7Z0JBRUQsZUFBZSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7Z0JBQzlDLGNBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUUzRSxDQUFDLENBQUM7WUFFRixTQUFJLEdBQUcsVUFBVSxVQUFnQztnQkFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUM7UUF2Q0YsQ0FBQztRQUlhLHFCQUFXLEdBQXpCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQzlELENBQUM7UUFtQ0wsZ0JBQUM7SUFBRCxDQTNDQSxBQTJDQyxJQUFBIiwiZmlsZSI6Im1vZHVsZS9jb21tb24vcm91dGVyL3JvdXRlci5ydW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lSb3V0ZXJDb25maWd9IGZyb20gXCIuL3JvdXRlclwiO1xyXG4vKipcclxuICogQ3JlYXRlZCBieSBkZWxsIG9uIDIwMTcvMy8yMy5cclxuICovXHJcblxyXG5kZWNsYXJlIGxldCBhbmd1bGFyOiBhbnk7XHJcblxyXG5pbXBvcnQge2FwcH0gZnJvbSBcIi4uL2FwcC9tYWluLmFwcFwiO1xyXG5pbXBvcnQgJ2FuZ3VsYXInO1xyXG5cclxuY2xhc3MgUm91dGVyUnVuQ29uZmlne1xyXG4gICAgc3RhdGljIHJlZGlyZWN0VG9NYXA6IHtba2V5OnN0cmluZ106c3RyaW5nfTtcclxuICAgIHN0YXRpYyAkaW5qZWN0ID0gWyckc3RhdGUnLCAnJHJvb3RTY29wZSddO1xyXG4gICAgY29uc3RydWN0b3IoJHN0YXRlOmFueSwgJHJvb3RTY29wZTphbnkpe1xyXG5cclxuICAgICAgICBpZighUm91dGVyUnVuQ29uZmlnLnJlZGlyZWN0VG9NYXApe1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVkaXJlY3RUb01hcOWIneWni+WMluWksei0pSFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOi9rOaNouWHuumcgOimgei/m+ihjHJlZGlyZWN0VG/nmoTlr7nosaEsIOW5tuWMuemFjXJlZGlyZWN0VG/nmoTlgLxcclxuXHJcbiAgICAgICAgLy8gdG9TdGF0ZTog5Y675ZOq5Liqc3RhdGVcclxuICAgICAgICAvLyBmcm9tU3RhdGU65LuO5ZOq5Liqc3RhdGXmnaVcclxuICAgICAgICAvLyDov5nph4zpnIDopoHnm5HlkKxyb3V0ZXJDb25maWfkuK3ljIXlkKtyZWRpcmVjdFRv5bGe5oCn55qE5a+56LGhLCDlvZPot7PovazliLDlkKvmnIlyZWRpcmVjdFRv5bGe5oCn55qE5a+56LGh5pe2LCDov5vooYzlho3mrKHot7PovaxcclxuICAgICAgICAkcm9vdFNjb3BlLiRvbihcIiRzdGF0ZUNoYW5nZVN0YXJ0XCIsIGZ1bmN0aW9uIChldnQ6YW55LCB0b1N0YXRlOmFueSwgdG9QYXJhbXM6YW55LCBmcm9tU3RhdGU6YW55LCBmcm9tUGFyYW1zOmFueSkge1xyXG4gICAgICAgICAgICBpZiAoUm91dGVyUnVuQ29uZmlnLnJlZGlyZWN0VG9NYXBbdG9TdGF0ZVsnbmFtZSddXSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRvU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coUm91dGVyUnVuQ29uZmlnLnJlZGlyZWN0VG9NYXBbdG9TdGF0ZVsnbmFtZSddXSk7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oUm91dGVyUnVuQ29uZmlnLnJlZGlyZWN0VG9NYXBbdG9TdGF0ZVsnbmFtZSddXSk7XHJcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXJSdW57XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFJvdXRlclJ1bjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IFJvdXRlclJ1biB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlID0gdGhpcy5faW5zdGFuY2UgfHwgbmV3IFJvdXRlclJ1bigpO1xyXG4gICAgfVxyXG5cclxuICAgIF9pbml0ID0gZnVuY3Rpb24oYXV0aG9yTGlzdDogQXJyYXk8SVJvdXRlckNvbmZpZz4pe1xyXG4gICAgICAgIC8vIOi9rOaNouWHuumcgOimgei/m+ihjHJlZGlyZWN0VG/nmoTlr7nosaEsIOW5tuWMuemFjXJlZGlyZWN0VG/nmoTlgLxcclxuXHJcbiAgICAgICAgbGV0IHBhcmVudE1hcDoge1trZXk6c3RyaW5nXTogQXJyYXk8c3RyaW5nPn0gPSB7fSwgcmVkaXJlY3RUb01hcDoge1trZXk6c3RyaW5nXTpzdHJpbmd9ID0ge30sIGksIGxlbjtcclxuICAgICAgICBsZXQgdm0gPSB0aGlzIGFzIGFueTtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gYXV0aG9yTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXV0aG9yTGlzdFtpXVsncGFyZW50J10pIHtcclxuICAgICAgICAgICAgICAgIGlmICghcGFyZW50TWFwW2F1dGhvckxpc3RbaV1bJ3BhcmVudCddXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE1hcFthdXRob3JMaXN0W2ldWydwYXJlbnQnXV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhcmVudE1hcFthdXRob3JMaXN0W2ldWydwYXJlbnQnXV0ucHVzaChhdXRob3JMaXN0W2ldWydrZXknXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGF1dGhvckxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGF1dGhvckxpc3RbaV1bJ3JlZGlyZWN0VG8nXSkge1xyXG4gICAgICAgICAgICAgICAgLy8g5LuO5Lit5om+5a2Q6IqC54K555qE56ys5LiA5LiqXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50TWFwW2F1dGhvckxpc3RbaV1bJ2tleSddXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG9NYXBbYXV0aG9yTGlzdFtpXVsna2V5J11dID0gcGFyZW50TWFwW2F1dGhvckxpc3RbaV1bJ2tleSddXVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUm91dGVyUnVuQ29uZmlnLnJlZGlyZWN0VG9NYXAgPSByZWRpcmVjdFRvTWFwO1xyXG4gICAgICAgIGFwcC5ydW4oUm91dGVyUnVuQ29uZmlnKS5ydW4oWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgYW5ndWxhci5ub29wXSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBpbml0ID0gZnVuY3Rpb24gKGF1dGhvckxpc3Q6IEFycmF5PElSb3V0ZXJDb25maWc+KSB7XHJcbiAgICAgICAgdGhpcy5faW5pdChhdXRob3JMaXN0KTtcclxuICAgIH07XHJcblxyXG59XHJcbiJdfQ==
