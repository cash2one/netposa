define(["require", "exports", "../../common/app/main.app", "jquery", "css!./alarmPopup.css"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var alarmPopulController = (function () {
        function alarmPopulController($scope, $timeout, $interval) {
            var _this = this;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.$interval = $interval;
            this.percent = 90.0;
            this.radius = 20;
            this.lineWidth = 10;
            this.fontSize = 30;
            this.process = 0.0;
            window.setTimeout(function () {
                _this.canvas = document.getElementById("canvas");
                _this.ctx = _this.canvas.getContext('2d');
                _this.circleX = _this.ctx.width / 2;
                _this.circleY = _this.canvas.height / 2;
                _this.draw();
            }, 2000);
        }
        alarmPopulController.prototype.circle = function (cx, cy, r) {
            var ctx = this.ctx;
            ctx.beginPath();
            ctx.moveTo(cx + r, cy);
            ctx.lineWidth = this.lineWidth;
            ctx.strokeStyle = '#eee';
            ctx.arc(cx, cy, r, 0, Math.PI * 2);
            ctx.closePath();
            ctx.stroke();
        };
        alarmPopulController.prototype.sector = function (cx, cy, r, startAngle, endAngle) {
            var ctx = this.ctx;
            ctx.beginPath();
            ctx.lineWidth = this.lineWidth;
            var linGrad = ctx.createLinearGradient(70, 40, 70, 100);
            linGrad.addColorStop(0.0, '#fcaa01');
            linGrad.addColorStop(1.0, '#1cbe6f');
            ctx.strokeStyle = linGrad;
            ctx.lineCap = 'round';
            ctx.arc(cx, cy, r, startAngle * (Math.PI / 180.0) + (Math.PI * 1.5), endAngle * (Math.PI / 180.0) + (Math.PI * 1.5));
            ctx.stroke();
        };
        alarmPopulController.prototype.loading = function () {
            var ctx = this.ctx;
            if (this.process >= this.percent) {
                this.$interval.cancel(this.timer);
            }
            ctx.clearRect(0, 0, this.circleX * 2, this.circleY * 2);
            ctx.font = this.fontSize + 'px April';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillStyle = '#fff';
            ctx.fillText(parseFloat(this.process).toFixed(0) + '%', this.circleX, this.circleY);
            this.circle(this.circleX, this.circleY, this.radius);
            this.sector(this.circleX, this.circleY, this.radius, 0, this.process / 100 * 360);
            if (this.process / this.percent > 0.90) {
                this.process += 0.30;
            }
            else if (this.process / this.percent > 0.80) {
                this.process += 0.55;
            }
            else if (this.process / this.percent > 0.70) {
                this.process += 0.75;
            }
            else {
                this.process += 1.0;
            }
        };
        alarmPopulController.prototype.draw = function () {
            var _this = this;
            this.timer = this.$interval(function () {
                _this.loading();
            }, 20);
        };
        alarmPopulController.$inject = ['$scope', '$timeout', '$interval'];
        return alarmPopulController;
    }());
    main_app_1.app.controller('alarmPopulController', alarmPopulController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
