define(["require", "exports", "text!./table.html", "text!./table-tr-td.html", "text!./table-tr-tdd.html", "../../app/main.app", "css!./table.css", "angular"], function (require, exports, tableHtml, tableTrTdHtml, tableTrTddHtml, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UtilTabledHeadDirective = (function () {
        function UtilTabledHeadDirective() {
            this.restrict = 'E';
            this.replace = true;
            this.transclude = true;
            this.scope = {
                tableHeaders: '=',
                tableHasSerial: '=',
                tableHasCheck: '=',
                tableSortFun: '&',
                tableAfterCheck: '&',
            };
            this.controllerAs = 'tablectrl';
            this.template = tableHtml;
            this.controller = function ($scope) {
                var vm = this;
                vm.init = function () {
                    vm.checkBoxAll = false;
                    if ((typeof ($scope.tableHasSerial) != "undefined" && ($scope.tableHasSerial == false))) {
                        vm.hasSerial = false;
                    }
                    else {
                        vm.hasSerial = true;
                    }
                    vm.hasCheck = $scope.tableHasCheck || false;
                    vm.bodyTrList = [];
                    vm.changeCheckBoxCallBack();
                };
                vm.changeTrCheckBoxStatus = function (index) {
                    if (index == -1) {
                        if (vm.bodyTrList && vm.bodyTrList.length > 0) {
                            vm.checkBoxAll = !vm.checkBoxAll;
                            var i = void 0, len = void 0, flag = vm.checkBoxAll;
                            for (i = 0, len = vm.bodyTrList.length; i < len; i++) {
                                vm.bodyTrList[i].trCheckBoxStatus = flag;
                            }
                        }
                    }
                    else {
                        vm.bodyTrList[index].trCheckBoxStatus = !vm.bodyTrList[index].trCheckBoxStatus;
                        if (vm.checkBoxAll) {
                            vm.checkBoxAll = false;
                        }
                        else {
                            var i = void 0, len = void 0, flag = true;
                            for (i = 0, len = vm.bodyTrList.length; i < len; i++) {
                                if (!vm.bodyTrList[i].trCheckBoxStatus) {
                                    flag = false;
                                    i = len;
                                }
                            }
                            vm.checkBoxAll = flag;
                        }
                    }
                    vm.changeCheckBoxCallBack();
                    return;
                };
                vm.changeCheckBoxCallBack = function () {
                    if (typeof $scope.tableAfterCheck === "function") {
                        var i = void 0, len = void 0;
                        var resultList = [];
                        for (i = 0, len = vm.bodyTrList.length; i < len; i++) {
                            resultList.push(vm.bodyTrList[i].trCheckBoxStatus);
                        }
                        $scope.tableAfterCheck({ checkList: resultList, isCheckAll: vm.checkBoxAll });
                    }
                };
                vm.changeTdShowStatus = function (index, showStatus) {
                    vm.headDataList[index].isShow = !showStatus;
                };
                vm.changeTdInTrShowStatus = function (index, showStatus) {
                    var i, len;
                    for (i = 0, len = vm.bodyTrList.length; i < len; i++) {
                        if (vm.bodyTrList[i].tdInTrList[index]) {
                            vm.bodyTrList[i].tdInTrList[index].setTdInTrStatus(showStatus);
                        }
                    }
                };
                vm.initUnitTableTr = function (tableBodyTr) {
                    var _index = vm.bodyTrList.length;
                    var i, len;
                    if (vm.headDataList && (vm.headDataList.length == tableBodyTr.tdInTrList.length)) {
                        for (i = 0, len = tableBodyTr.tdInTrList.length; i < len; i++) {
                            tableBodyTr.tdInTrList[i].setTdInTrStatus(vm.headDataList[i].isShow);
                        }
                    }
                    vm.bodyTrList.push(tableBodyTr);
                    return _index;
                };
                vm.initTrTd = function (tableBodyTr) {
                    var _index = vm.bodyTrList.length;
                    vm.bodyTrList.push(tableBodyTr);
                    return _index;
                };
                vm.tableBySort = function (header_index) {
                    if (vm.headDataList[header_index].isSort) {
                        var isAsc = -1;
                        if (vm.headDataList[header_index].isAsc == true) {
                            isAsc = false;
                        }
                        else {
                            isAsc = true;
                        }
                        var fieldName = vm.headDataList[header_index].field;
                        $scope.tableSortFun({ sortIndex: header_index, fieldName: fieldName, sortStatus: isAsc });
                        vm.headDataList[header_index].isAsc = isAsc;
                        angular.forEach(vm.headDataList, function (data, index) {
                            if (data.isSort && index != header_index) {
                                vm.headDataList[index].isAsc = -1;
                            }
                        });
                    }
                };
                $scope.$watch('tableHasCheck', watchTableHasCheck, true);
                function watchTableHasCheck(newData, oldData) {
                    vm.hasCheck = newData;
                }
                $scope.$watch('tableHeaders', watchHeaderDatasParams, true);
                function watchHeaderDatasParams(newVal, oldVal) {
                    if (newVal) {
                        var i = void 0, len = void 0;
                        for (i = 0, len = oldVal.length; i < len; i++) {
                            if (oldVal[i] && newVal[i]) {
                                if (oldVal[i].isShow != newVal[i].isShow) {
                                    vm.changeTdInTrShowStatus(i, newVal[i].isShow);
                                    vm.headDataList[i] = newVal[i].isShow;
                                }
                            }
                        }
                        vm.headDataList = headDataFormat(newVal);
                    }
                }
                function headDataFormat(dataList) {
                    var resultList = new Array();
                    angular.forEach(dataList, function (data) {
                        var result = angular.copy(data);
                        if (typeof result.isShow == 'undefined') {
                            result.isShow = true;
                        }
                        if (typeof data.isSort == 'undefined') {
                            result.isSort = false;
                        }
                        resultList.push(result);
                    });
                    return resultList;
                }
            };
            this.link = function (scope, element, attrs, controller) {
                controller.init();
            };
        }
        UtilTabledHeadDirective.instance = function () {
            return new UtilTabledHeadDirective();
        };
        UtilTabledHeadDirective.$inject = [];
        return UtilTabledHeadDirective;
    }());
    var UtilTableTrDirective = (function () {
        function UtilTableTrDirective() {
            this.restrict = 'AE';
            this.replace = true;
            this.transclude = true;
            this.require = '?^utilTableHead';
            this.scope = true;
            this.controller = function ($scope, $element, $attrs, $compile) {
                $scope.$compile = $compile;
                var vm = this;
                $scope.tdInTrList = [];
                vm.initTdInTr = function (tdInTrData) {
                    tdInTrData.setTdInTrIndex = $scope.tdInTrList.length;
                    $scope.tdInTrList.push(tdInTrData);
                };
            };
            this.template = '<tr  class="" ng-transclude>';
            this.link = function (scope, $element, attrs, tableCtrl) {
                var vm = scope;
                vm.init = function () {
                    vm.trInTableIndex = tableCtrl.initUnitTableTr(vm);
                    vm.trCheckBoxStatus = false;
                    if (tableCtrl.hasSerial) {
                        var temStr = '';
                        if (tableCtrl.hasCheck) {
                            temStr = tableTrTdHtml;
                        }
                        else {
                            temStr = tableTrTddHtml;
                        }
                        var _element = vm.$compile(temStr)(vm);
                        $element.prepend(_element);
                    }
                };
                vm.changeCheckBoxStatus = function (index) {
                    tableCtrl.changeTrCheckBoxStatus(index);
                };
                vm.init();
                scope.$on("$destroy", function () {
                    if (vm.trInTableIndex == 0) {
                        tableCtrl.init();
                    }
                });
            };
        }
        UtilTableTrDirective.instance = function () {
            return new UtilTableTrDirective();
        };
        UtilTableTrDirective.$inject = ['$compile'];
        return UtilTableTrDirective;
    }());
    var UtilTableTrTdDirective = (function () {
        function UtilTableTrTdDirective() {
            this.restrict = 'AE';
            this.replace = true;
            this.transclude = true;
            this.template = '<td ng-show="tdInTrStatus" ng-transclude></td>';
            this.require = '^?utilTableTr';
            this.scope = true;
            this.link = function (scope, element, attrs, trCtrl) {
                var vm = scope;
                vm.setTdInTrStatus = function (status) {
                    vm.tdInTrStatus = status;
                };
                vm.setTdInTrIndex = function (index) {
                    vm.tdInTrIndex = index;
                };
                trCtrl.initTdInTr(vm);
            };
        }
        UtilTableTrTdDirective.instance = function () {
            return new UtilTableTrTdDirective();
        };
        UtilTableTrTdDirective.$inject = [];
        return UtilTableTrTdDirective;
    }());
    main_app_1.app
        .directive('utilTableHead', UtilTabledHeadDirective.instance)
        .directive('utilTableTr', UtilTableTrDirective.instance)
        .directive('utilTableTrTd', UtilTableTrTdDirective.instance);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
