define(["require", "exports", "../../app/main.app", "../../../../core/enum/TreeType"], function (require, exports, main_app_1, TreeType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TreeDirectiveService = (function () {
        function TreeDirectiveService() {
        }
        TreeDirectiveService.prototype.getSelectedNodes = function (treeId) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj)
                return;
            return ztreeObj.getSelectedNodes();
        };
        TreeDirectiveService.prototype.moveNodes = function (treeId, treeNodes, targetNode, moveType, isSilent) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj && treeNodes && treeNodes.length <= 0 && targetNode)
                return;
            var i, len;
            for (i = 0, len = treeNodes.length; i < len; i++) {
                ztreeObj.moveNode(targetNode, treeNodes[i], moveType, isSilent);
            }
        };
        TreeDirectiveService.prototype.moveNode = function (treeId, treeNode, targetNode, moveType, isSilent) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj && treeNode && targetNode)
                return;
            ztreeObj.moveNode(targetNode, treeNode, moveType, isSilent);
        };
        TreeDirectiveService.prototype.getNodeByParam = function (treeId, key, value, parentNode) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj)
                return null;
            return ztreeObj.getNodeByParam(key, value, parentNode);
        };
        TreeDirectiveService.prototype.getCheckedNodes = function (treeId, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            var nodes = [];
            if (!ztreeObj)
                return nodes;
            nodes = ztreeObj.getCheckedNodes(flag);
            return nodes;
        };
        TreeDirectiveService.prototype.updateNodeChecked = function (treeId, tId, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj) {
                return false;
            }
            var node = ztreeObj.getNodeByTId(tId);
            if (node) {
                ztreeObj.checkNode(node, flag, true, false);
            }
            else {
                console.error("找不到树节点");
            }
            return true;
        };
        TreeDirectiveService.prototype.checkAllNodes = function (treeId, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj) {
                return false;
            }
            ztreeObj.checkAllNodes(flag);
            return true;
        };
        TreeDirectiveService.prototype.selectInvertNodes = function (treeId) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            var nodes = ztreeObj.getNodes();
            invertFun(nodes);
            function invertFun(nodes) {
                angular.forEach(nodes, function (node) {
                    !!node.children && invertFun(node.children);
                    node.checked = !node.checked;
                    ztreeObj.updateNode(node);
                });
            }
        };
        TreeDirectiveService.prototype.checkNodesByParamsList = function (treeId, ParamsList, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj) {
                return false;
            }
            var resultList = this.getNodesByParam(treeId, ParamsList);
            resultList.forEach(function (val) {
                console.log();
                ztreeObj.checkNode(val, flag, true, false);
            });
            return true;
        };
        TreeDirectiveService.prototype.checkNodesByIds = function (treeId, idsList, idKeyAlias, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj) {
                return false;
            }
            var nodes = ztreeObj.transformToArray(ztreeObj.getNodes());
            var idsMap = {};
            var i = 0, len = (idsList && idsList.length) || 0, temp;
            for (; i < len; i++) {
                idsMap[idsList[i]] = true;
            }
            var checkNodes = nodes.filter(function (val) {
                return idsMap[val[idKeyAlias]];
            });
            for (i = 0, len = checkNodes.length; i < len; i++) {
                temp = ztreeObj.getNodeByTId(checkNodes[i].tId);
                if (temp) {
                    ztreeObj.checkNode(temp, flag, true, false);
                }
            }
            return true;
        };
        TreeDirectiveService.prototype.getNodesByParam = function (treeId, paramsList) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            var resultList = [];
            if (!ztreeObj) {
                return resultList;
            }
            paramsList.forEach(function (val) {
                val.parentNode = val.parentNode ? val.parentNode : null;
                resultList = resultList.concat(ztreeObj.getNodesByParam(val.key, val.value, val.parentNode));
            });
            return resultList;
        };
        TreeDirectiveService.prototype.filterShowNodes = function (treeId, paramName, paramValue) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj) {
                return false;
            }
            var nodeList = ztreeObj.getNodesByParamFuzzy(paramName, paramValue);
            console.log(nodeList);
            var nodes = ztreeObj.transformToArray(ztreeObj.getNodes());
            var concatParentMap = {};
            var concatParentList = nodeList;
            var showPList;
            for (var i = 0, len = nodeList.length; i < len; i++) {
                concatParentMap[nodeList[i].tId] = true;
            }
            for (var i = 0, len = nodeList.length; i < len; i++) {
                showPList = nodeList[i].getPath().filter(function (val) {
                    if (!concatParentMap[val.tId]) {
                        concatParentMap[val.tId] = true;
                        return true;
                    }
                    return false;
                });
                if (showPList && showPList.length > 0) {
                    concatParentList = concatParentList.concat(showPList);
                }
            }
            var reHideNodes = nodes.filter(function (val) {
                return !concatParentMap[val.tId];
            });
            ztreeObj.showNodes(concatParentList);
            ztreeObj.hideNodes(reHideNodes);
            ztreeObj.expandAll(true);
            return true;
        };
        TreeDirectiveService.prototype.filterShowNodesEx = function (treeId, paramName, paramValue) {
            return this.filterShowNodes(treeId, paramName, paramValue);
        };
        TreeDirectiveService.prototype.locateDiyDom = function (treeId, treeNode) {
            if (treeNode && treeNode.Lat && treeNode.Lon) {
                var locateStr = "<span class='js-locate-diy-dom'>√</span>";
                var aObj = angular.element(document.getElementById(treeNode.tId + "_a"), "#" + treeNode.tId + "_a");
                if (aObj.children(".js-locate-diy-dom").size() <= 0) {
                    aObj.append(locateStr);
                }
            }
            else if (treeNode) {
                var aObj = angular.element(document.getElementById(treeNode.tId + "_a"), "#" + treeNode.tId + "_a");
                if (aObj.children(".js-locate-diy-dom").size() >= 0) {
                    aObj.children(".js-locate-diy-dom").remove();
                }
            }
        };
        TreeDirectiveService.prototype.changeTreeNodeLocateStatus = function (treeId, treeNodeIdKey, treeNodeId, lon, lat) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (ztreeObj == null)
                return;
            var node = ztreeObj.getNodeByParam(treeNodeIdKey, treeNodeId);
            if (node == null)
                return;
            node.Lon = lon;
            node.Lat = lat;
            ztreeObj.updateNode(node);
            this.locateDiyDom(treeId, node);
        };
        TreeDirectiveService.prototype.locateAndAttentionDiyDom = function (treeId, treeNode, func1, func2) {
            if (treeNode && treeNode.treeType === TreeType_1.TreeType.camera.value) {
                var isAttention = treeNode.isAttention;
                var locateBtnStr = "<span class='js-dynamic-diy-dom f-cfb'><i class='m-left5 i-ztree-locate js-locate'></i><i class='m-left5 i-ztree-attention " + (isAttention ? "z-select" : "") + " js-attention'></i></span>";
                var aObj = angular.element(document.getElementById(treeNode.tId + "_a"), "#" + treeNode.tId + "_a");
                if (aObj.children(".js-dynamic-diy-dom").size() <= 0) {
                    aObj.append(locateBtnStr);
                }
                var locateBtn = aObj.find(".js-locate");
                locateBtn.off("click").on("click", { "treeId": treeId, "treeNode": treeNode }, func1);
                var attentionBtn = aObj.find(".js-attention");
                attentionBtn.off("click").on("click", { "treeId": treeId, "treeNode": treeNode }, func2);
            }
        };
        TreeDirectiveService.prototype.changeLocateAndAttentionDiyDom = function (treeId, treeNodeIdKey, treeNodeId, isAttention) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (ztreeObj == null)
                return;
            var node = ztreeObj.getNodeByParam(treeNodeIdKey, treeNodeId);
            if (node == null)
                return;
            node.isAttention = isAttention;
            ztreeObj.updateNode(node);
            var aObj = angular.element(document.getElementById(node.tId + "_a"), "#" + node.tId + "_a");
            var attentionBtn = aObj.find(".js-attention");
            isAttention ? attentionBtn.addClass("z-select") : attentionBtn.removeClass("z-select");
        };
        TreeDirectiveService.prototype.checkNodesBy = function (treeId, keyName, keyValueList, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeId);
            if (!ztreeObj) {
                return false;
            }
            if (!keyName) {
                keyName = "ID";
            }
            if (keyValueList.length > 0) {
                var checkParamsList_1 = [];
                angular.forEach(keyValueList, function (val) {
                    checkParamsList_1.push({ key: keyName, value: val });
                });
                var resultList = this.getNodesByParam(treeId, checkParamsList_1);
                console.log("勾选目的节点：" + resultList.length);
                resultList.forEach(function (val) {
                    ztreeObj.checkNode(val, flag, true, false);
                });
            }
            return true;
        };
        TreeDirectiveService.prototype.expandAll = function (treeID, flag) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeID);
            ztreeObj.expandAll(flag);
            return true;
        };
        TreeDirectiveService.prototype.setChkDisabled = function (treeID, treeNodes, disabled, inheritParent, inheritChildren) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeID);
            treeNodes.forEach(function (item) {
                var node = ztreeObj.getNodeByParam(item.key, item.value);
                if (node) {
                    ztreeObj.setChkDisabled(node, disabled, !inheritParent ? false : inheritParent, !inheritChildren ? false : inheritChildren);
                }
                else {
                    console.error('无节点');
                }
            });
        };
        TreeDirectiveService.prototype.updateNode = function (treeID, node) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeID);
            ztreeObj.updateNode(node);
        };
        TreeDirectiveService.prototype.updateNodes = function (treeID, nodes) {
            var _this = this;
            nodes.forEach(function (item) {
                _this.updateNode(treeID, item);
            });
        };
        TreeDirectiveService.prototype.removeNodes = function (treeID, treeNodes, callbackFlag) {
            var treeObj = $.fn.zTree.getZTreeObj(treeID);
            for (var i = 0, l = treeNodes.length; i < l; i++) {
                var node = treeObj.getNodeByParam('ID', treeNodes[i].ID);
                if (node) {
                    treeObj.removeNode(node, callbackFlag ? callbackFlag : false);
                }
                else {
                    console.log('需删除的节点不存在！');
                }
            }
        };
        TreeDirectiveService.prototype.addNodes = function (treeID, newNodes, parentNode, isSlient) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeID);
            var p;
            if (parentNode)
                p = ztreeObj.getNodeByParam('ID', parentNode.ID);
            newNodes.forEach(function (item) {
                var n = ztreeObj.getNodeByParam('ID', item.ID);
                if (!p)
                    p = ztreeObj.getNodeByParam('ID', item.ParentID);
                ztreeObj.removeNode(n, true);
                ztreeObj.addNodes(p, item, isSlient ? isSlient : false);
            });
        };
        TreeDirectiveService.prototype.setChkDisabledAll = function (treeID, disabled) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeID);
            var nodes = ztreeObj.getNodes();
            nodes.forEach(function (item) {
                ztreeObj.setChkDisabled(item, disabled, true, true);
            });
        };
        TreeDirectiveService.prototype.addDiyDomIsConfiStatus = function (treeID, treeNode, markKey) {
            var ztreeObj = $.fn.zTree.getZTreeObj(treeID);
            var node = ztreeObj.getNodeByParam('ID', treeNode.ID);
            var key = markKey || 'isConfigLamp';
            if (node) {
                if (treeNode[key]) {
                    var locateStr = "<span class='js-locate-diy-dom'></span>";
                    var aObj = angular.element(document.getElementById(treeNode.tId + "_a"), "#" + treeNode.tId + "_a");
                    if (aObj.parent().children(".js-locate-diy-dom").size() <= 0) {
                        aObj.parent().children().eq(0).after(locateStr);
                    }
                }
                else {
                    var aObj = angular.element(document.getElementById(treeNode.tId + "_a"), "#" + treeNode.tId + "_a");
                    if (aObj.parent().children(".js-locate-diy-dom").size() >= 0) {
                        aObj.parent().children(".js-locate-diy-dom").remove();
                    }
                }
            }
        };
        return TreeDirectiveService;
    }());
    main_app_1.app.service("treeDirectiveService", TreeDirectiveService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvY29tbW9uL2RpcmVjdGl2ZS90cmVlL3RyZWUuZGlyZWN0aXZlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBd0VBO1FBa0JJO1FBQ0EsQ0FBQztRQWxCRCwrQ0FBZ0IsR0FBaEIsVUFBaUIsTUFBYztZQUMzQixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7Z0JBQUMsTUFBTSxDQUFDO1lBRXRCLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN2QyxDQUFDO1FBRUQsd0NBQVMsR0FBVCxVQUFVLE1BQWMsRUFBRSxTQUFxQixFQUFFLFVBQWUsRUFBRSxRQUFnQixFQUFFLFFBQWtCO1lBQ2xHLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDO2dCQUFDLE1BQU0sQ0FBQztZQUUxRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7WUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDL0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0wsQ0FBQztRQWFELHVDQUFRLEdBQVIsVUFBUyxNQUFjLEVBQUUsUUFBYSxFQUFFLFVBQWUsRUFBRSxRQUFnQixF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cmVlLmRpcmVjdGl2ZS5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwIH0gZnJvbSBcIi4uLy4uL2FwcC9tYWluLmFwcFwiO1xyXG5pbXBvcnQgeyBUcmVlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb3JlL2VudW0vVHJlZVR5cGVcIjtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEJsYWNrZmFuZyBvbiAyMDE3LzUvMTIuXHJcbiAqIOeUseS6juagkeaOp+S7tuS6pOS6kui+g+Wkjeadgu+8jOS4lOmcgOimgeacieS4u+WKqOWOu+inpuWPkeagkeaOp+S7tuaUueWPmOeahOS4gOezu+WIl+aWueazle+8jOaVheS4uuS6huS+v+S6jue7n+S4gOe7tOaKpO+8jOWwhuaJgOacieS4u+WKqOiwg+eUqOagkeiKgueCueeahOaWueazlemDveaUvuWIsOi/meS4qnNlcnZpY2XkuK3ov5vooYxcclxuICovXHJcbmRlY2xhcmUgbGV0ICQ6IGFueTtcclxuZGVjbGFyZSBsZXQgYW5ndWxhcjogYW55O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVHJlZURpcmVjdGl2ZVNlcnZpY2Uge1xyXG4gICAgbW92ZU5vZGUodHJlZUlkOiBzdHJpbmcsIHRyZWVOb2RlOiBhbnksIHRhcmdldE5vZGU6IGFueSwgbW92ZVR5cGU6IHN0cmluZywgaXNTaWxlbnQ/OiBib29sZWFuKTogdm9pZDtcclxuXHJcbiAgICBtb3ZlTm9kZXModHJlZUlkOiBzdHJpbmcsIHRyZWVOb2RlczogQXJyYXk8YW55PiwgdGFyZ2V0Tm9kZTogYW55LCBtb3ZlVHlwZTogc3RyaW5nLCBpc1NpbGVudD86IGJvb2xlYW4pOiB2b2lkO1xyXG5cclxuICAgIGdldE5vZGVCeVBhcmFtKHRyZWVJZDogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgcGFyZW50Tm9kZT86IGFueSk6IGFueTtcclxuXHJcbiAgICBnZXRDaGVja2VkTm9kZXModHJlZUlkOiBzdHJpbmcsIGZsYWc6IGJvb2xlYW4pOiBBcnJheTxhbnk+O1xyXG5cclxuICAgIHVwZGF0ZU5vZGVDaGVja2VkKHRyZWVJZDogc3RyaW5nLCBub2RlSWQ6IHN0cmluZywgZmxhZzogYm9vbGVhbik6IGJvb2xlYW47XHJcblxyXG4gICAgY2hlY2tBbGxOb2Rlcyh0cmVlSWQ6IHN0cmluZywgZmxhZzogYm9vbGVhbik6IGJvb2xlYW47XHJcblxyXG4gICAgY2hlY2tOb2Rlc0J5UGFyYW1zTGlzdCh0cmVlSWQ6IHN0cmluZywgUGFyYW1zTGlzdDogQXJyYXk8eyBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bWJlciwgcGFyZW50Tm9kZT86IHN0cmluZyB9PiwgZmxhZzogYm9vbGVhbik6IGJvb2xlYW47XHJcblxyXG4gICAgLy8g5qC55o2uaWRLZXlBbGlhc+eahOWxnuaAp+WQjeadpemAieS4reaIluiAheWPjemAieWMuemFjeWIsGlkc0xpc3TljLnphY3liLDnmoTmoJHnu5PngrlcclxuICAgIC8vIOacrOadpeW3sue7j+aciWNoZWNrTm9kZXNCeVBhcmFtc0xpc3Qg5ZKMIGNoZWNrTm9kZXNCeeaWueazlSwg5L2G5piv6L+Z5Lik5Liq5pa55rOV6YGN5Y6G5qCR6IqC54K555qE5qyh5pWw5a6e5Zyo5aSq5aSa5LqGXHJcbiAgICAvLyDmlYXlnKjov5nph4zlhpnkuKrlh4/lsJHlvqrnjq/moJHoioLngrnnmoTmlrnms5VcclxuICAgIGNoZWNrTm9kZXNCeUlkcyh0cmVlSWQ6IHN0cmluZywgaWRzTGlzdDogQXJyYXk8c3RyaW5nPiwgaWRLZXlBbGlhczogc3RyaW5nLCBmbGFnOiBib29sZWFuKTogYm9vbGVhbjtcclxuXHJcbiAgICBzZWxlY3RJbnZlcnROb2Rlcyh0cmVlSWQ6IHN0cmluZyk6IHZvaWQ7XHJcblxyXG4gICAgLy8g6I635Y+W6YCJ5Lit55qE5qCR6IqC54K5XHJcbiAgICBnZXRTZWxlY3RlZE5vZGVzKHRyZWVJZDogc3RyaW5nKTogQXJyYXk8YW55PjtcclxuXHJcbiAgICBmaWx0ZXJTaG93Tm9kZXModHJlZUlkOiBzdHJpbmcsIHBhcmFtTmFtZTogc3RyaW5nLCBwYXJhbVZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xyXG5cclxuICAgIGZpbHRlclNob3dOb2Rlc0V4KHRyZWVJZDogc3RyaW5nLCBwYXJhbU5hbWU6IHN0cmluZywgcGFyYW1WYWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcclxuXHJcbiAgICAvLyDmoJHmjqfku7blrprkvY3moIflv5fnlKjnmoRkaXnmoLflvI8s5Lia5Yqh55u45YWz5Luj56CBLOWcsOWbvumFjee9rueVjOmdoueUqFxyXG4gICAgbG9jYXRlRGl5RG9tKHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZTogYW55KTogdm9pZDtcclxuXHJcbiAgICAvLyDkuLvliqjmlLnlj5jmoJHmjqfku7bluIPngrnmoIflv5fmoLflvI8s5Lia5Yqh55u45YWz5Luj56CBLOWcsOWbvumFjee9rueVjOmdoueUqFxyXG4gICAgY2hhbmdlVHJlZU5vZGVMb2NhdGVTdGF0dXModHJlZUlkOiBzdHJpbmcsIHRyZWVJZEtleTogc3RyaW5nLCB0cmVlTm9kZUlkOiBzdHJpbmcsIGxvbjogbnVtYmVyLCBsYXQ6IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gICAgLy8g5qCR5o6n5Lu25a6a5L2N5oyJ6ZKu5ZKM5YWz5rOo5oyJ6ZKuaG92ZXIgZGl55qC35byPLCDkuJrliqHnm7jlhbPku6PnoIEsIOWKqOaAgeW4g+aOp+W3puS+p+eVjOmdoueUqCBjcmVhdG9yOiB3eXJcclxuICAgIGxvY2F0ZUFuZEF0dGVudGlvbkRpeURvbSh0cmVlSWQ6IHN0cmluZywgdHJlZU5vZGU6IGFueSwgZnVuYzE6IEZ1bmN0aW9uLCBmdW5jMjogRnVuY3Rpb24pOiB2b2lkO1xyXG5cclxuICAgIGNoYW5nZUxvY2F0ZUFuZEF0dGVudGlvbkRpeURvbSh0cmVlSWQ6IHN0cmluZywgdHJlZU5vZGVJZEtleTogc3RyaW5nLCB0cmVlTm9kZUlkOiBzdHJpbmcsIGlzQXR0ZW50aW9uOiBib29sZWFuKTogdm9pZDtcclxuXHJcbiAgICAvLyDmoLnmja7lkIzmn5DkuIDlsZ7mgKfvvIhrZXlOYW1l77yJIOWAvOS4uiBrZXlWYWx1ZUxpc3Qg6ZuG5ZCIIOi/m+ihjOaJk+mSqVxyXG4gICAgY2hlY2tOb2Rlc0J5KHRyZWVJZDogc3RyaW5nLCBrZXlOYW1lOiBzdHJpbmcsIGtleVZhbHVlTGlzdDogQXJyYXk8c3RyaW5nPiwgZmxhZzogYm9vbGVhbik6IGJvb2xlYW47XHJcblxyXG4gICAgZ2V0Tm9kZXNCeVBhcmFtKHRyZWVJZDogc3RyaW5nLCBwYXJhbXNMaXN0OiBBcnJheTx7IGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLCBwYXJlbnROb2RlPzogc3RyaW5nIH0+KTogQXJyYXk8YW55PjtcclxuXHJcbiAgICBleHBhbmRBbGwodHJlZUlEOiBzdHJpbmcsIGZsYWc6IGJvb2xlYW4pOiB2b2lkO1xyXG5cclxuICAgIHNldENoa0Rpc2FibGVkKHRyZWVJRDogc3RyaW5nLCB0cmVlTm9kZXM6IEFycmF5PGFueT4sIGRpc2FibGVkOiBib29sZWFuLCBpbmhlcml0UGFyZW50PzogYm9vbGVhbiwgaW5oZXJpdENoaWxkcmVuPzogYm9vbGVhbik6IHZvaWQ7XHJcblxyXG4gICAgdXBkYXRlTm9kZSh0cmVlSUQ6IHN0cmluZywgdHJlZU5vZGU6IGFueSk6IHZvaWQ7XHJcblxyXG4gICAgdXBkYXRlTm9kZXModHJlZUlEOiBzdHJpbmcsIHRyZWVOb2RlOiBBcnJheTxhbnk+KTogdm9pZDtcclxuXHJcbiAgICByZW1vdmVOb2Rlcyh0cmVlSUQ6IHN0cmluZywgdHJlZU5vZGVzOiBBcnJheTxhbnk+LCBjYWxsQmFja0ZsYWc/OiBib29sZWFuKTogdm9pZFxyXG5cclxuICAgIGFkZE5vZGVzKHRyZWVJRDogc3RyaW5nLCBuZXdOb2RlczogQXJyYXk8YW55PiwgcGFyZW50Tm9kZT86IGFueSwgaXNTbGllbnQ/OiBib29sZWFuKTogdm9pZFxyXG5cclxuICAgIHNldENoa0Rpc2FibGVkQWxsKHRyZWVJRDogc3RyaW5nLCBkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XHJcblxyXG4gICAgYWRkRGl5RG9tSXNDb25maVN0YXR1cyh0cmVlSUQ6IHN0cmluZywgdHJlZU5vZGU6IGFueSwga2V5Pzogc3RyaW5nKTogdm9pZDtcclxufVxyXG5cclxuY2xhc3MgVHJlZURpcmVjdGl2ZVNlcnZpY2UgaW1wbGVtZW50cyBJVHJlZURpcmVjdGl2ZVNlcnZpY2Uge1xyXG4gICAgZ2V0U2VsZWN0ZWROb2Rlcyh0cmVlSWQ6IHN0cmluZyk6IEFycmF5PGFueT4ge1xyXG4gICAgICAgIGxldCB6dHJlZU9iaiA9ICQuZm4uelRyZWUuZ2V0WlRyZWVPYmoodHJlZUlkKTtcclxuICAgICAgICBpZiAoIXp0cmVlT2JqKSByZXR1cm47XHJcblxyXG4gICAgICAgIHJldHVybiB6dHJlZU9iai5nZXRTZWxlY3RlZE5vZGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZU5vZGVzKHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZXM6IEFycmF5PGFueT4sIHRhcmdldE5vZGU6IGFueSwgbW92ZVR5cGU6IHN0cmluZywgaXNTaWxlbnQ/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIGlmICghenRyZWVPYmogJiYgdHJlZU5vZGVzICYmIHRyZWVOb2Rlcy5sZW5ndGggPD0gMCAmJiB0YXJnZXROb2RlKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBpLCBsZW47XHJcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gdHJlZU5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHp0cmVlT2JqLm1vdmVOb2RlKHRhcmdldE5vZGUsIHRyZWVOb2Rlc1tpXSwgbW92ZVR5cGUsIGlzU2lsZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnKjmjIflrprnmoTmoJHkuIrnp7vliqjnu5PngrlcclxuICAgICAqIEBwYXJhbSB0cmVlSWRcclxuICAgICAqIEBwYXJhbSB0cmVlTm9kZVxyXG4gICAgICogQHBhcmFtIHRhcmdldE5vZGVcclxuICAgICAqIEBwYXJhbSBtb3ZlVHlwZVxyXG4gICAgICogQHBhcmFtIGlzU2lsZW50XHJcbiAgICAgKi9cclxuICAgIG1vdmVOb2RlKHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZTogYW55LCB0YXJnZXROb2RlOiBhbnksIG1vdmVUeXBlOiBzdHJpbmcsIGlzU2lsZW50PzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGxldCB6dHJlZU9iaiA9ICQuZm4uelRyZWUuZ2V0WlRyZWVPYmoodHJlZUlkKTtcclxuICAgICAgICBpZiAoIXp0cmVlT2JqICYmIHRyZWVOb2RlICYmIHRhcmdldE5vZGUpIHJldHVybjtcclxuXHJcbiAgICAgICAgenRyZWVPYmoubW92ZU5vZGUodGFyZ2V0Tm9kZSwgdHJlZU5vZGUsIG1vdmVUeXBlLCBpc1NpbGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7lsZ7mgKfmn6Xmib7oioLngrnkv6Hmga9cclxuICAgICAqIEBwYXJhbSB0cmVlSWRcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHBhcmVudE5vZGVcclxuICAgICAqIEByZXR1cm5zIHthbnl9XHJcbiAgICAgKi9cclxuICAgIGdldE5vZGVCeVBhcmFtKHRyZWVJZDogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgcGFyZW50Tm9kZT86IGFueSkge1xyXG4gICAgICAgIGxldCB6dHJlZU9iaiA9ICQuZm4uelRyZWUuZ2V0WlRyZWVPYmoodHJlZUlkKTtcclxuICAgICAgICBpZiAoIXp0cmVlT2JqKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHp0cmVlT2JqLmdldE5vZGVCeVBhcmFtKGtleSwgdmFsdWUsIHBhcmVudE5vZGUpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruagkUlEIOiOt+WPliBmbGFnIOeKtuaAgeeahOiKgueCuSDliJfooahcclxuICAgICAqIEBwYXJhbSB0cmVlSWRcclxuICAgICAqIEBwYXJhbSBmbGFnXHJcbiAgICAgKiBAcmV0dXJucyB7YW55fVxyXG4gICAgICovXHJcbiAgICBnZXRDaGVja2VkTm9kZXModHJlZUlkOiBzdHJpbmcsIGZsYWc6IGJvb2xlYW4pOiBBcnJheTxhbnk+IHtcclxuXHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIGxldCBub2RlczogQXJyYXk8YW55PiA9IFtdO1xyXG4gICAgICAgIGlmICghenRyZWVPYmopIHJldHVybiBub2RlcztcclxuICAgICAgICBub2RlcyA9IHp0cmVlT2JqLmdldENoZWNrZWROb2RlcyhmbGFnKTtcclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7oioLngrnmiYDlnKjmoJEgdElkIOaUueWPmOW9k+WJjSDli77pgInnirbmgIFcclxuICAgICAqIEBwYXJhbSB0cmVlSWRcclxuICAgICAqIEBwYXJhbSB0SWRcclxuICAgICAqIEBwYXJhbSBmbGFnXHJcbiAgICAgKiBAcmV0dXJucyB7YW55fVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVOb2RlQ2hlY2tlZCh0cmVlSWQ6IHN0cmluZywgdElkOiBzdHJpbmcsIGZsYWc6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgenRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJZCk7XHJcbiAgICAgICAgaWYgKCF6dHJlZU9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBub2RlID0genRyZWVPYmouZ2V0Tm9kZUJ5VElkKHRJZCk7XHJcbiAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgLy/miafooYzmraTmlrnms5Xml7bkuI3op6blj5Hkuovku7blm57osIPlh73mlbBcclxuICAgICAgICAgICAgenRyZWVPYmouY2hlY2tOb2RlKG5vZGUsIGZsYWcsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5om+5LiN5Yiw5qCR6IqC54K5XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruagkUlEIOmHjee9ruWFqOmDqOiKgueCueWLvumAieeKtuaAgeS4uiBmbGFnXHJcbiAgICAgKiBAcGFyYW0gdHJlZUlkXHJcbiAgICAgKiBAcGFyYW0gZmxhZ1xyXG4gICAgICogQHJldHVybnMge2FueX1cclxuICAgICAqL1xyXG4gICAgY2hlY2tBbGxOb2Rlcyh0cmVlSWQ6IHN0cmluZywgZmxhZzogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCB6dHJlZU9iaiA9ICQuZm4uelRyZWUuZ2V0WlRyZWVPYmoodHJlZUlkKTtcclxuICAgICAgICBpZiAoIXp0cmVlT2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgICB6dHJlZU9iai5jaGVja0FsbE5vZGVzKGZsYWcpO1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7moJFJRCDlj43pgInlhajpg6joioLngrnli77pgInnirbmgIFcclxuICAgICAqIEBwYXJhbSB0cmVlSWRcclxuICAgICAqIEByZXR1cm5zIHthbnl9XHJcbiAgICAgKi9cclxuICAgIHNlbGVjdEludmVydE5vZGVzKHRyZWVJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIGxldCBub2RlcyA9IHp0cmVlT2JqLmdldE5vZGVzKCk7XHJcbiAgICAgICAgaW52ZXJ0RnVuKG5vZGVzKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW52ZXJ0RnVuKG5vZGVzOiBhbnkpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG5vZGVzLCAobm9kZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAhIW5vZGUuY2hpbGRyZW4gJiYgaW52ZXJ0RnVuKG5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5jaGVja2VkID0gIW5vZGUuY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIHp0cmVlT2JqLnVwZGF0ZU5vZGUobm9kZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7oioLngrkg6buY6K6k5Yu+6YCJIOagkeiKgueCuVxyXG4gICAgICogQHBhcmFtIHRyZWVJZFxyXG4gICAgICogQHBhcmFtIFBhcmFtc0xpc3QgOiBBcnJheTx7a2V5OnN0cmluZywgdmFsdWU6c3RyaW5nLCBwYXJlbnROb2RlPzpzdHJpbmd9PlxyXG4gICAgICogQHBhcmFtIGZsYWc6IGJvb2xlYW7nm67nmoTnirbmgIEg6buY6K6kIGZhbHNlO1xyXG4gICAgICogQHJldHVybnMge2FueX1cclxuICAgICAqL1xyXG4gICAgY2hlY2tOb2Rlc0J5UGFyYW1zTGlzdCh0cmVlSWQ6IHN0cmluZywgUGFyYW1zTGlzdDogQXJyYXk8eyBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bWJlciwgcGFyZW50Tm9kZT86IHN0cmluZyB9PiwgZmxhZzogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCB6dHJlZU9iaiA9ICQuZm4uelRyZWUuZ2V0WlRyZWVPYmoodHJlZUlkKTtcclxuICAgICAgICBpZiAoIXp0cmVlT2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlc3VsdExpc3QgPSB0aGlzLmdldE5vZGVzQnlQYXJhbSh0cmVlSWQsIFBhcmFtc0xpc3QpO1xyXG4gICAgICAgIHJlc3VsdExpc3QuZm9yRWFjaCgodmFsOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coKTtcclxuICAgICAgICAgICAgenRyZWVPYmouY2hlY2tOb2RlKHZhbCwgZmxhZywgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrTm9kZXNCeUlkcyh0cmVlSWQ6IHN0cmluZywgaWRzTGlzdDogQXJyYXk8c3RyaW5nPiwgaWRLZXlBbGlhczogc3RyaW5nLCBmbGFnOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIGlmICghenRyZWVPYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5vZGVzOiBBcnJheTxhbnk+ID0genRyZWVPYmoudHJhbnNmb3JtVG9BcnJheSh6dHJlZU9iai5nZXROb2RlcygpKTtcclxuICAgICAgICBsZXQgaWRzTWFwID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH07XHJcbiAgICAgICAgbGV0IGkgPSAwLCBsZW4gPSAoaWRzTGlzdCAmJiBpZHNMaXN0Lmxlbmd0aCkgfHwgMCwgdGVtcDogYW55O1xyXG4gICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWRzTWFwW2lkc0xpc3RbaV1dID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNoZWNrTm9kZXMgPSBub2Rlcy5maWx0ZXIoKHZhbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZHNNYXBbdmFsW2lkS2V5QWxpYXNdXTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY2hlY2tOb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZU5vZGVDaGVja2VkKGNoZWNrTm9kZXNbaV1baWRLZXlBbGlhc10pO1xyXG4gICAgICAgICAgICB0ZW1wID0genRyZWVPYmouZ2V0Tm9kZUJ5VElkKGNoZWNrTm9kZXNbaV0udElkKTtcclxuICAgICAgICAgICAgaWYgKHRlbXApIHtcclxuICAgICAgICAgICAgICAgIHp0cmVlT2JqLmNoZWNrTm9kZSh0ZW1wLCBmbGFnLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogIOagueaNruiKgueCueaVsOaNrueahOWxnuaAp+aQnOe0ou+8jOiOt+WPluadoeS7tuWujOWFqOWMuemFjeeahOiKgueCueaVsOaNriBKU09OIOWvueixoembhuWQiFxyXG4gICAgICogQHBhcmFtIHRyZWVJZFxyXG4gICAgICogQHBhcmFtIHBhcmFtc0xpc3Qge0BrZXkg6ZyA6KaB57K+56Gu5Yy56YWN55qE5bGe5oCn5ZCN56ewLEB2YWx1ZSAg6ZyA6KaB57K+56Gu5Yy56YWN55qE5bGe5oCn5YC877yM5Y+v5Lul5piv5Lu75L2V57G75Z6L77yM5Y+q6KaB5L+d6K+B5LiOIGtleSDmjIflrprnmoTlsZ7mgKflgLzkv53mjIHkuIDoh7TljbPlj68sQHBhcmVudE5vZGUg5Y+v5Lul5oyH5a6a5Zyo5p+Q5Liq54i26IqC54K55LiL55qE5a2Q6IqC54K55Lit5pCc57SiIOW/veeVpeatpOWPguaVsO+8jOihqOekuuWcqOWFqOmDqOiKgueCueS4reaQnOe0on1cclxuICAgICAqIEByZXR1cm5zIEFycmF5KEpTT04pIOWmguaXoOe7k+aenO+8jOi/lOWbniBbIF1cclxuICAgICAqL1xyXG4gICAgZ2V0Tm9kZXNCeVBhcmFtKHRyZWVJZDogc3RyaW5nLCBwYXJhbXNMaXN0OiBBcnJheTx7IGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLCBwYXJlbnROb2RlPzogc3RyaW5nIH0+KTogQXJyYXk8YW55PiB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIGxldCByZXN1bHRMaXN0ID0gW10gYXMgQXJyYXk8YW55PjtcclxuICAgICAgICBpZiAoIXp0cmVlT2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRMaXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJhbXNMaXN0LmZvckVhY2goKHZhbDogeyBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bWJlciwgcGFyZW50Tm9kZT86IHN0cmluZyB9KSA9PiB7XHJcbiAgICAgICAgICAgIHZhbC5wYXJlbnROb2RlID0gdmFsLnBhcmVudE5vZGUgPyB2YWwucGFyZW50Tm9kZSA6IG51bGw7XHJcbiAgICAgICAgICAgIHJlc3VsdExpc3QgPSByZXN1bHRMaXN0LmNvbmNhdCh6dHJlZU9iai5nZXROb2Rlc0J5UGFyYW0odmFsLmtleSwgdmFsLnZhbHVlLCB2YWwucGFyZW50Tm9kZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBjcmVhdGUgYnkgenhxXHJcbiAgICAgKiAg5qC55o2uIOWxnuaAp2tleSAtIHZhbHVlIOi/h+a7pCDmmL7npLog5pCc57Si57uT5p6cIO+8iOWQjOaXtuaYvuekuue7k+aenOeahCDniLblkozlrZDvvIlcclxuICAgICAqIEB0aW1lOiAyMDE3LTA2LTEwIDE3OjUyOjU0XHJcbiAgICAgKiBAcGFyYW1zOiB0cmVlSWQg5qCRSURcclxuICAgICAqIEBwYXJhbXM6IHBhcmFtTmFtZSDmkJzntKLlsZ7mgKflkI3np7BcclxuICAgICAqIEBwYXJhbXM6IHBhcmFtVmFsdWUg5pCc57Si5YC8XHJcbiAgICAgKiBAcmV0dXJuOiDmkJzntKLnu5PmnpxcclxuICAgICAqL1xyXG4gICAgZmlsdGVyU2hvd05vZGVzKHRyZWVJZDogc3RyaW5nLCBwYXJhbU5hbWU6IHN0cmluZywgcGFyYW1WYWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIC8vIOW9k3BhcmFtVmFsdWXkuLpudWxs5pe2IGdldE5vZGVzQnlQYXJhbUZ1enp55Lya5oql6ZSZ77yM5pWF5YGa6L+H5ruk77yMIOWAvOS4ulwiXCLnmoTml7blgJnkuI3kvJrov5vlhaVyZXR1cm4gZmFsc2XnmoTliKTmlq1cclxuICAgICAgICBpZiAoIXp0cmVlT2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5vZGVMaXN0ID0genRyZWVPYmouZ2V0Tm9kZXNCeVBhcmFtRnV6enkocGFyYW1OYW1lLCBwYXJhbVZhbHVlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhub2RlTGlzdCk7XHJcbiAgICAgICAgbGV0IG5vZGVzID0genRyZWVPYmoudHJhbnNmb3JtVG9BcnJheSh6dHJlZU9iai5nZXROb2RlcygpKTtcclxuICAgICAgICBsZXQgY29uY2F0UGFyZW50TWFwID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgICAgICBsZXQgY29uY2F0UGFyZW50TGlzdCA9IG5vZGVMaXN0O1xyXG4gICAgICAgIGxldCBzaG93UExpc3Q6IEFycmF5PGFueT47XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG5vZGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbmNhdFBhcmVudE1hcFtub2RlTGlzdFtpXS50SWRdID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG5vZGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHNob3dQTGlzdCA9IG5vZGVMaXN0W2ldLmdldFBhdGgoKS5maWx0ZXIoKHZhbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbmNhdFBhcmVudE1hcFt2YWwudElkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdFBhcmVudE1hcFt2YWwudElkXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoc2hvd1BMaXN0ICYmIHNob3dQTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25jYXRQYXJlbnRMaXN0ID0gY29uY2F0UGFyZW50TGlzdC5jb25jYXQoc2hvd1BMaXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVIaWRlTm9kZXMgPSBub2Rlcy5maWx0ZXIoKHZhbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAhY29uY2F0UGFyZW50TWFwW3ZhbC50SWRdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgenRyZWVPYmouc2hvd05vZGVzKGNvbmNhdFBhcmVudExpc3QpO1xyXG4gICAgICAgIHp0cmVlT2JqLmhpZGVOb2RlcyhyZUhpZGVOb2Rlcyk7XHJcbiAgICAgICAgenRyZWVPYmouZXhwYW5kQWxsKHRydWUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyU2hvd05vZGVzRXgodHJlZUlkOiBzdHJpbmcsIHBhcmFtTmFtZTogc3RyaW5nLCBwYXJhbVZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJTaG93Tm9kZXModHJlZUlkLCBwYXJhbU5hbWUsIHBhcmFtVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvY2F0ZURpeURvbSh0cmVlSWQ6IHN0cmluZywgdHJlZU5vZGU6IGFueSkge1xyXG4gICAgICAgIGlmICh0cmVlTm9kZSAmJiB0cmVlTm9kZS5MYXQgJiYgdHJlZU5vZGUuTG9uKSB7XHJcbiAgICAgICAgICAgIC8vIOaYvuekuuW3suW4g+eCueagh+W/l1xyXG4gICAgICAgICAgICBsZXQgbG9jYXRlU3RyID0gXCI8c3BhbiBjbGFzcz0nanMtbG9jYXRlLWRpeS1kb20nPuKImjwvc3Bhbj5cIjtcclxuICAgICAgICAgICAgbGV0IGFPYmogPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodHJlZU5vZGUudElkICsgXCJfYVwiKSwgXCIjXCIgKyB0cmVlTm9kZS50SWQgKyBcIl9hXCIpO1xyXG4gICAgICAgICAgICAvLyDoi6Xlt7LlrZjlnKjluIPngrnmoIflv5fliJnot7Pov4dcclxuICAgICAgICAgICAgaWYgKGFPYmouY2hpbGRyZW4oXCIuanMtbG9jYXRlLWRpeS1kb21cIikuc2l6ZSgpIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGFPYmouYXBwZW5kKGxvY2F0ZVN0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRyZWVOb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIOenu+mZpOW4g+eCueagh+W/l1xyXG4gICAgICAgICAgICBsZXQgYU9iaiA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmVlTm9kZS50SWQgKyBcIl9hXCIpLCBcIiNcIiArIHRyZWVOb2RlLnRJZCArIFwiX2FcIik7XHJcbiAgICAgICAgICAgIGlmIChhT2JqLmNoaWxkcmVuKFwiLmpzLWxvY2F0ZS1kaXktZG9tXCIpLnNpemUoKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhT2JqLmNoaWxkcmVuKFwiLmpzLWxvY2F0ZS1kaXktZG9tXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVRyZWVOb2RlTG9jYXRlU3RhdHVzKHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZUlkS2V5OiBzdHJpbmcsIHRyZWVOb2RlSWQ6IHN0cmluZywgbG9uOiBudW1iZXIsIGxhdDogbnVtYmVyKTogbnVsbCB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSWQpO1xyXG4gICAgICAgIGlmICh6dHJlZU9iaiA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vbGV0IG5vZGUgPSB6dHJlZU9iai5nZXROb2RlQnlQYXJhbSh0cmVlSWRLZXkgfHwgXCJpZFwiLCB0cmVlTm9kZUlkKTtcclxuICAgICAgICBsZXQgbm9kZSA9IHp0cmVlT2JqLmdldE5vZGVCeVBhcmFtKHRyZWVOb2RlSWRLZXksIHRyZWVOb2RlSWQpO1xyXG4gICAgICAgIGlmIChub2RlID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgbm9kZS5Mb24gPSBsb247XHJcbiAgICAgICAgbm9kZS5MYXQgPSBsYXQ7XHJcblxyXG4gICAgICAgIHp0cmVlT2JqLnVwZGF0ZU5vZGUobm9kZSk7XHJcbiAgICAgICAgLy8g55Sx5LqOdXBkYXRlTm9kZeS4jeiDveS4u+WKqOinpuWPkSBhZGREaXlEb20g5pWF5Li75Yqo6Kem5Y+RXHJcbiAgICAgICAgdGhpcy5sb2NhdGVEaXlEb20odHJlZUlkLCBub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagkeaOp+S7tuWumuS9jeaMiemSruWSjOWFs+azqOaMiemSrmhvdmVyIGRpeeagt+W8jywg5Lia5Yqh55u45YWz5Luj56CBLCDliqjmgIHluIPmjqflt6bkvqfnlYzpnaLnlKggY3JlYXRvcjogd3lyXHJcbiAgICAgKiBAcGFyYW0gdHJlZUlkXHJcbiAgICAgKiBAcGFyYW0gdHJlZU5vZGVcclxuICAgICAqL1xyXG4gICAgbG9jYXRlQW5kQXR0ZW50aW9uRGl5RG9tKHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZTogYW55LCBmdW5jMTogRnVuY3Rpb24sIGZ1bmMyOiBGdW5jdGlvbikge1xyXG4gICAgICAgIC8vIOWPquacieaRhOWDj+acuue7k+eCueaJjeaYvuekulxyXG4gICAgICAgIGlmICh0cmVlTm9kZSAmJiB0cmVlTm9kZS50cmVlVHlwZSA9PT0gVHJlZVR5cGUuY2FtZXJhLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gaXNBdHRlbnRpb27kuLrlrprkuYnnmoTmmK/lkKblhbPms6jnmoTmoIflv5csIOato+W4uOS9v+eUqOaXtuWAmeWwhuatpOWPguaVsOaUueS4uuecn+WunuWQjuWPsOS8oOadpeeahOWPguaVsFxyXG4gICAgICAgICAgICBsZXQgaXNBdHRlbnRpb24gPSB0cmVlTm9kZS5pc0F0dGVudGlvbjtcclxuICAgICAgICAgICAgbGV0IGxvY2F0ZUJ0blN0ciA9IFwiPHNwYW4gY2xhc3M9J2pzLWR5bmFtaWMtZGl5LWRvbSBmLWNmYic+PGkgY2xhc3M9J20tbGVmdDUgaS16dHJlZS1sb2NhdGUganMtbG9jYXRlJz48L2k+PGkgY2xhc3M9J20tbGVmdDUgaS16dHJlZS1hdHRlbnRpb24gXCIgKyAoaXNBdHRlbnRpb24gPyBcInotc2VsZWN0XCIgOiBcIlwiKSArIFwiIGpzLWF0dGVudGlvbic+PC9pPjwvc3Bhbj5cIlxyXG4gICAgICAgICAgICBsZXQgYU9iaiA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmVlTm9kZS50SWQgKyBcIl9hXCIpLCBcIiNcIiArIHRyZWVOb2RlLnRJZCArIFwiX2FcIik7XHJcbiAgICAgICAgICAgIGlmIChhT2JqLmNoaWxkcmVuKFwiLmpzLWR5bmFtaWMtZGl5LWRvbVwiKS5zaXplKCkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgYU9iai5hcHBlbmQobG9jYXRlQnRuU3RyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbG9jYXRlQnRuID0gYU9iai5maW5kKFwiLmpzLWxvY2F0ZVwiKTtcclxuICAgICAgICAgICAgLy8g5a+55bqUZGl5RG9tRnVuYzFcclxuICAgICAgICAgICAgbG9jYXRlQnRuLm9mZihcImNsaWNrXCIpLm9uKFwiY2xpY2tcIiwgeyBcInRyZWVJZFwiOiB0cmVlSWQsIFwidHJlZU5vZGVcIjogdHJlZU5vZGUgfSwgZnVuYzEpO1xyXG4gICAgICAgICAgICBsZXQgYXR0ZW50aW9uQnRuID0gYU9iai5maW5kKFwiLmpzLWF0dGVudGlvblwiKTtcclxuICAgICAgICAgICAgLy8g5a+55bqUZGl5RG9tRnVuYzJcclxuICAgICAgICAgICAgYXR0ZW50aW9uQnRuLm9mZihcImNsaWNrXCIpLm9uKFwiY2xpY2tcIiwgeyBcInRyZWVJZFwiOiB0cmVlSWQsIFwidHJlZU5vZGVcIjogdHJlZU5vZGUgfSwgZnVuYzIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4u+WKqOaUueWPmOagkee7k+eCueagt+W8j+WSjOeKtuaAgVxyXG4gICAgICogQHBhcmFtIHRyZWVJZFxyXG4gICAgICogQHBhcmFtIHRyZWVOb2RlSWRLZXlcclxuICAgICAqIEBwYXJhbSB0cmVlTm9kZUlkXHJcbiAgICAgKiBAcGFyYW0gaXNBdHRlbnRpb25cclxuICAgICAqL1xyXG4gICAgY2hhbmdlTG9jYXRlQW5kQXR0ZW50aW9uRGl5RG9tKHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZUlkS2V5OiBzdHJpbmcsIHRyZWVOb2RlSWQ6IHN0cmluZywgaXNBdHRlbnRpb246IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgenRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJZCk7XHJcbiAgICAgICAgaWYgKHp0cmVlT2JqID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy9sZXQgbm9kZSA9IHp0cmVlT2JqLmdldE5vZGVCeVBhcmFtKHRyZWVJZEtleSB8fCBcImlkXCIsIHRyZWVOb2RlSWQpO1xyXG4gICAgICAgIGxldCBub2RlID0genRyZWVPYmouZ2V0Tm9kZUJ5UGFyYW0odHJlZU5vZGVJZEtleSwgdHJlZU5vZGVJZCk7XHJcbiAgICAgICAgaWYgKG5vZGUgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyDmm7TmlrDmoJHnu5PngrnmlbDmja5cclxuICAgICAgICAvLyBUT0RPIGlzQXR0ZW50aW9u5Li65a6a5LmJ55qE5piv5ZCm5YWz5rOo55qE5qCH5b+XLCDmraPluLjkvb/nlKjml7blgJnlsIbmraTlj4LmlbDmlLnkuLrnnJ/lrp7lkI7lj7DkvKDmnaXnmoTlj4LmlbBcclxuICAgICAgICBub2RlLmlzQXR0ZW50aW9uID0gaXNBdHRlbnRpb247XHJcbiAgICAgICAgenRyZWVPYmoudXBkYXRlTm9kZShub2RlKTtcclxuXHJcbiAgICAgICAgLy8g55Sx5LqOdXBkYXRlTm9kZeS4jeiDveS4u+WKqOS/ruaUuWRvbSwg5omA5Lul5Zyo6L+Z6YeM5Li75Yqo5pON5L2cZG9t5qC35byP55qE5L+u5pS5XHJcbiAgICAgICAgbGV0IGFPYmogPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS50SWQgKyBcIl9hXCIpLCBcIiNcIiArIG5vZGUudElkICsgXCJfYVwiKTtcclxuICAgICAgICBsZXQgYXR0ZW50aW9uQnRuID0gYU9iai5maW5kKFwiLmpzLWF0dGVudGlvblwiKTtcclxuICAgICAgICBpc0F0dGVudGlvbiA/IGF0dGVudGlvbkJ0bi5hZGRDbGFzcyhcInotc2VsZWN0XCIpIDogYXR0ZW50aW9uQnRuLnJlbW92ZUNsYXNzKFwiei1zZWxlY3RcIik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKiBjcmVhdG9yOiB6eHFcclxuICAgICAqIOagueaNruiKgueCuSDpu5jorqTli77pgIkg5qCR6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gdHJlZUlkXHJcbiAgICAgKiBAcGFyYW0ga2V5TmFtZVxyXG4gICAgICogQHBhcmFtIGtleVZhbHVlTGlzdCA6IEFycmF5PHN0cmluZz5cclxuICAgICAqIEBwYXJhbSBmbGFnOiBib29sZWFu55uu55qE54q25oCBIOm7mOiupCBmYWxzZTtcclxuICAgICAqIEByZXR1cm5zIHthbnl9XHJcbiAgICAgKi9cclxuICAgIGNoZWNrTm9kZXNCeSh0cmVlSWQ6IHN0cmluZywga2V5TmFtZTogc3RyaW5nLCBrZXlWYWx1ZUxpc3Q6IEFycmF5PHN0cmluZz4sIGZsYWc6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgenRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJZCk7XHJcbiAgICAgICAgaWYgKCF6dHJlZU9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgha2V5TmFtZSkge1xyXG4gICAgICAgICAgICBrZXlOYW1lID0gXCJJRFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGtleVZhbHVlTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBjaGVja1BhcmFtc0xpc3QgPSBbXSBhcyBBcnJheTx7IGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH0+O1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goa2V5VmFsdWVMaXN0LCAodmFsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGNoZWNrUGFyYW1zTGlzdC5wdXNoKHsga2V5OiBrZXlOYW1lLCB2YWx1ZTogdmFsIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdExpc3QgPSB0aGlzLmdldE5vZGVzQnlQYXJhbSh0cmVlSWQsIGNoZWNrUGFyYW1zTGlzdCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5Yu+6YCJ55uu55qE6IqC54K577yaXCIgKyByZXN1bHRMaXN0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJlc3VsdExpc3QuZm9yRWFjaCgodmFsOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHp0cmVlT2JqLmNoZWNrTm9kZSh2YWwsIGZsYWcsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgZXhwYW5kQWxsKHRyZWVJRDogc3RyaW5nLCBmbGFnOiBCb29sZWFuKSB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSUQpO1xyXG4gICAgICAgIHp0cmVlT2JqLmV4cGFuZEFsbChmbGFnKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDaGtEaXNhYmxlZCh0cmVlSUQ6IHN0cmluZywgdHJlZU5vZGVzOiBBcnJheTx7IGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH0+LCBkaXNhYmxlZDogYm9vbGVhbiwgaW5oZXJpdFBhcmVudD86IGJvb2xlYW4sIGluaGVyaXRDaGlsZHJlbj86IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgenRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJRCk7XHJcbiAgICAgICAgdHJlZU5vZGVzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBub2RlID0genRyZWVPYmouZ2V0Tm9kZUJ5UGFyYW0oaXRlbS5rZXksIGl0ZW0udmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgenRyZWVPYmouc2V0Q2hrRGlzYWJsZWQobm9kZSwgZGlzYWJsZWQsICFpbmhlcml0UGFyZW50ID8gZmFsc2UgOiBpbmhlcml0UGFyZW50LCAhaW5oZXJpdENoaWxkcmVuID8gZmFsc2UgOiBpbmhlcml0Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign5peg6IqC54K5JylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVOb2RlKHRyZWVJRDogc3RyaW5nLCBub2RlOiBhbnkpIHtcclxuICAgICAgICBsZXQgenRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJRCk7XHJcbiAgICAgICAgenRyZWVPYmoudXBkYXRlTm9kZShub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVOb2Rlcyh0cmVlSUQ6IHN0cmluZywgbm9kZXM6IEFycmF5PGFueT4pIHtcclxuICAgICAgICBub2Rlcy5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVOb2RlKHRyZWVJRCwgaXRlbSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVOb2Rlcyh0cmVlSUQ6IHN0cmluZywgdHJlZU5vZGVzOiBBcnJheTxhbnk+LCBjYWxsYmFja0ZsYWc/OiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IHRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJRCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0cmVlTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBub2RlID0gdHJlZU9iai5nZXROb2RlQnlQYXJhbSgnSUQnLCB0cmVlTm9kZXNbaV0uSUQpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdHJlZU9iai5yZW1vdmVOb2RlKG5vZGUsIGNhbGxiYWNrRmxhZyA/IGNhbGxiYWNrRmxhZyA6IGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfpnIDliKDpmaTnmoToioLngrnkuI3lrZjlnKjvvIEnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZE5vZGVzKHRyZWVJRDogc3RyaW5nLCBuZXdOb2RlczogQXJyYXk8YW55PiwgcGFyZW50Tm9kZT86IGFueSwgaXNTbGllbnQ/OiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSUQpO1xyXG4gICAgICAgIGxldCBwOiBhbnk7XHJcbiAgICAgICAgaWYgKHBhcmVudE5vZGUpIHAgPSB6dHJlZU9iai5nZXROb2RlQnlQYXJhbSgnSUQnLCBwYXJlbnROb2RlLklEKTtcclxuICAgICAgICBuZXdOb2Rlcy5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgbGV0IG4gPSB6dHJlZU9iai5nZXROb2RlQnlQYXJhbSgnSUQnLCBpdGVtLklEKTtcclxuICAgICAgICAgICAgaWYgKCFwKSBwID0genRyZWVPYmouZ2V0Tm9kZUJ5UGFyYW0oJ0lEJywgaXRlbS5QYXJlbnRJRCk7XHJcbiAgICAgICAgICAgIHp0cmVlT2JqLnJlbW92ZU5vZGUobiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHp0cmVlT2JqLmFkZE5vZGVzKHAsIGl0ZW0sIGlzU2xpZW50ID8gaXNTbGllbnQgOiBmYWxzZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzZXRDaGtEaXNhYmxlZEFsbCh0cmVlSUQ6IHN0cmluZywgZGlzYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgenRyZWVPYmogPSAkLmZuLnpUcmVlLmdldFpUcmVlT2JqKHRyZWVJRCk7XHJcbiAgICAgICAgbGV0IG5vZGVzID0genRyZWVPYmouZ2V0Tm9kZXMoKTtcclxuICAgICAgICBub2Rlcy5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgenRyZWVPYmouc2V0Q2hrRGlzYWJsZWQoaXRlbSwgZGlzYWJsZWQsIHRydWUsIHRydWUpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGFkZERpeURvbUlzQ29uZmlTdGF0dXModHJlZUlEOiBzdHJpbmcsIHRyZWVOb2RlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgYW55LCBtYXJrS2V5Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHp0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0cmVlSUQpO1xyXG4gICAgICAgIGxldCBub2RlID0genRyZWVPYmouZ2V0Tm9kZUJ5UGFyYW0oJ0lEJywgdHJlZU5vZGUuSUQpO1xyXG4gICAgICAgIGxldCBrZXkgPSBtYXJrS2V5IHx8ICdpc0NvbmZpZ0xhbXAnO1xyXG4gICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmVlTm9kZVtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmmL7npLrlt7LluIPngrnmoIflv5dcclxuICAgICAgICAgICAgICAgIGxldCBsb2NhdGVTdHIgPSBcIjxzcGFuIGNsYXNzPSdqcy1sb2NhdGUtZGl5LWRvbSc+PC9zcGFuPlwiO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFPYmogPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodHJlZU5vZGUudElkICsgXCJfYVwiKSwgXCIjXCIgKyB0cmVlTm9kZS50SWQgKyBcIl9hXCIpO1xyXG4gICAgICAgICAgICAgICAgLy8g6Iul5bey5a2Y5Zyo5biD54K55qCH5b+X5YiZ6Lez6L+HXHJcbiAgICAgICAgICAgICAgICBpZiAoYU9iai5wYXJlbnQoKS5jaGlsZHJlbihcIi5qcy1sb2NhdGUtZGl5LWRvbVwiKS5zaXplKCkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFPYmoucGFyZW50KCkuY2hpbGRyZW4oKS5lcSgwKS5hZnRlcihsb2NhdGVTdHIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g56e76Zmk5biD54K55qCH5b+XXHJcbiAgICAgICAgICAgICAgICBsZXQgYU9iaiA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmVlTm9kZS50SWQgKyBcIl9hXCIpLCBcIiNcIiArIHRyZWVOb2RlLnRJZCArIFwiX2FcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYU9iai5wYXJlbnQoKS5jaGlsZHJlbihcIi5qcy1sb2NhdGUtZGl5LWRvbVwiKS5zaXplKCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFPYmoucGFyZW50KCkuY2hpbGRyZW4oXCIuanMtbG9jYXRlLWRpeS1kb21cIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmFwcC5zZXJ2aWNlKFwidHJlZURpcmVjdGl2ZVNlcnZpY2VcIiwgVHJlZURpcmVjdGl2ZVNlcnZpY2UpOyJdfQ==
