define(["require", "exports", "text!./progress.html", "../../app/main.app", "css!./progress.css"], function (require, exports, progressHtml, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProgressDrective = (function () {
        function ProgressDrective() {
            this.restrict = 'AE';
            this.template = progressHtml;
            this.replace = true;
            this.scope = {
                nowValue: '=',
                maxValue: '=',
                minValue: '=',
                lengd: '@'
            };
            this.controllerAs = "progressDrective";
            this.controller = function ($scope, $element, $attrs) {
                this.lengd = $scope.lengd;
            };
            this.link = function (scope, element, attrs) {
                var vm = scope;
                vm.nowValue = scope.nowValue || 1;
                vm.progressWidth = vm.lengd - 35 - 4;
                vm.maxValue = vm.maxValue || 100;
                vm.minValue = vm.minValue || 1;
                vm.valueScale = vm.maxValue / vm.progressWidth;
                vm.point = { isTarget: false, start: 0, end: 0, reset: 0 };
                vm.point.reset = Math.round(vm.nowValue / vm.valueScale);
                element.find('.progress-circle').css('left', vm.point.reset - 8);
                element.find('.progress-lang-now').css('width', vm.point.reset);
                element.find('.progress-lang').on('click', function (event) {
                    var x = event.offsetX;
                    var v = event.offsetX * vm.valueScale;
                    if (x >= vm.progressWidth || v >= 100) {
                        x = vm.progressWidth;
                        v = 100;
                    }
                    if (x < vm.minValue / vm.valueScale) {
                        x = vm.minValue / vm.valueScale;
                        v = vm.minValue;
                    }
                    element.find('.progress-circle').css('left', (x - 8) + 'px');
                    element.find('.progress-lang-now').css('width', x);
                    vm.$apply(function () {
                        vm.nowValue = Math.round(v);
                    });
                    vm.point.reset = element.find('.progress-circle').position().left;
                });
                element.find('.progress-circle').on('mousedown', function (event) {
                    vm.point.isTarget = true;
                    vm.point.start = event.pageX;
                    bindMouseMove();
                });
                angular.element(document).on('mouseup', function (event) {
                    vm.point.isTarget = false;
                    vm.point.reset = element.find('.progress-circle').position().left;
                    offMouseMove();
                });
                scope.$on('$destroy', function () {
                    angular.element(document).off('mouseup');
                    offMouseMove();
                });
                function bindMouseMove() {
                    element.on('mousemove', function (event) {
                        event.preventDefault();
                        if (vm.point.isTarget) {
                            vm.point.end = event.pageX;
                            var y_1 = vm.point.end - vm.point.start + vm.point.reset;
                            vm.$apply(function () {
                                if (y_1 * vm.valueScale >= 100) {
                                    vm.nowValue = 100;
                                    y_1 = Math.round(100 / vm.valueScale);
                                }
                                else if (y_1 * vm.valueScale < vm.minValue) {
                                    vm.nowValue = vm.minValue;
                                    y_1 = Math.round(vm.minValue / vm.valueScale);
                                }
                                else {
                                    vm.nowValue = Math.round(y_1 * vm.valueScale);
                                }
                            });
                            element.find('.progress-lang-now').css('width', y_1);
                            element.find('.progress-circle').css('left', y_1 - 8);
                        }
                    });
                }
                function offMouseMove() {
                    element.off('mousemove');
                }
            };
        }
        ProgressDrective.instance = function () {
            return new ProgressDrective();
        };
        ProgressDrective.$inject = ['$scope', 'layer'];
        return ProgressDrective;
    }());
    main_app_1.app.directive('progressDrag', ProgressDrective.instance);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
