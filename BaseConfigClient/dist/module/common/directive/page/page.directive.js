define(["require", "exports", "text!./page.html", "../../app/main.app", "./page-params", "jquery"], function (require, exports, pageHtml, main_app_1, page_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UtilPagingDirective = (function () {
        function UtilPagingDirective() {
            this.restrict = 'E';
            this.replace = true;
            this.scope = {
                pageParams: '=',
                goNextPage: '&nextPage',
                goPrevPage: '&prevPage',
                goPage: '&goPage',
                changePageSize: '&pageSize',
                showType: '@',
                hideSize: '=',
                hideGopage: '='
            };
            this.template = pageHtml;
            this.controllerAs = "pageDirective";
            this.controller = function ($scope) {
                var vm = this;
                vm.isEnd = false;
                vm.showType = "normal";
                vm.jumpPrevPage = jumpPrevPage;
                vm.jumpNextPage = jumpNextPage;
                vm.jumpPage = jumpPage;
                vm.pages = [];
                vm.isFirstPage = true;
                vm.isLastPage = true;
                vm.jumpFirstPage = jumpFirstPage;
                vm.jumpLastPage = jumpLastPage;
                vm.selectPageSize = selectPageSize;
                vm.flag = false;
                vm.index = new page_params_1.default().pageSize;
                vm.pagingShow = pagingShow;
                vm.pageParams = new page_params_1.default();
                vm.init = init;
                $scope.$watch('pageParams', watchPageParams, true);
                function convertPageParams(origin) {
                    var pageSize = origin.pageSize;
                    var totalCount = origin.totalCount;
                    if (totalCount % pageSize == 0) {
                        origin.pageCount = parseInt(totalCount / pageSize + "", 10);
                    }
                    else {
                        origin.pageCount = parseInt(totalCount / pageSize + "", 10) + 1;
                    }
                    return origin;
                }
                function watchPageParams(newVal, oldVal) {
                    if (newVal === oldVal)
                        return;
                    vm.pageParams = convertPageParams(newVal);
                    vm.index = newVal.pageSize;
                    init();
                }
                function init() {
                    var params = vm.pageParams, showType = vm.showType;
                    if (showType === "normal") {
                        vm.pages = _getShowPagesInNormal(params.pageCount, params.currentPage);
                    }
                    else if (showType === "small") {
                        vm.pages = _getShowPagesInSmall(params.pageCount, params.currentPage);
                    }
                    else {
                        vm.pages = _getShowPagesInNormal(params.pageCount, params.currentPage);
                    }
                    vm.pageArr = [10, 20, 50];
                    if (params.currentPage <= 1) {
                        vm.isFirstPage = true;
                    }
                    else {
                        vm.isFirstPage = false;
                    }
                    if (params.pageCount <= params.currentPage) {
                        vm.isLastPage = true;
                    }
                    else {
                        vm.isLastPage = false;
                    }
                }
                function _getShowPagesInNormal(pageCount, currentPage) {
                    var i, len, pages = [];
                    if (pageCount < 5) {
                        for (i = 1, len = pageCount; i <= len; i++) {
                            pages.push(i);
                        }
                    }
                    else if (currentPage >= 3 && currentPage <= pageCount - 3) {
                        for (i = 1; i <= 5; i++) {
                            pages.push(currentPage - 3 + i);
                        }
                    }
                    else if (currentPage > pageCount - 3 && pageCount >= 5) {
                        for (i = 1; i <= 5; i++) {
                            pages.push(pageCount - 5 + i);
                        }
                    }
                    else {
                        for (i = 1; i <= 5; i++) {
                            pages.push(i);
                        }
                    }
                    var temp = [];
                    for (i = 0, len = pages.length; i < len; i++) {
                        temp.push({ value: pages[i] });
                    }
                    return temp;
                }
                function _getShowPagesInSmall(pageCount, currentPage) {
                    return [{ value: currentPage }];
                }
                function jumpPrevPage() {
                    if (vm.pageParams.currentPage <= 1)
                        return;
                    if (typeof $scope.goPrevPage === "function") {
                        $scope.goPrevPage({ 'num': vm.pageParams.currentPage - 1 });
                    }
                }
                function jumpNextPage() {
                    if (vm.pageParams.currentPage >= vm.pageParams.pageCount)
                        return;
                    if (typeof $scope.goNextPage === "function") {
                        $scope.goNextPage({ 'num': vm.pageParams.currentPage + 1 });
                    }
                }
                function jumpPage(num) {
                    if (!num) {
                        return;
                    }
                    if (num == vm.pageParams.currentPage) {
                        return;
                    }
                    if (num < 1 || num > vm.pageParams.pageCount)
                        return;
                    if (typeof $scope.goPage === "function") {
                        $scope.goPage({ 'num': num });
                    }
                }
                function jumpFirstPage() {
                    jumpPage(1);
                }
                function jumpLastPage() {
                    jumpPage(vm.pageParams.pageCount);
                }
                function selectPageSize(num) {
                    $scope.changePageSize({ 'num': num });
                    vm.index = num;
                }
                function pagingShow() {
                    vm.flag = true;
                }
                vm.pagingHide = function () {
                    vm.flag = false;
                };
            };
            this.link = function (scope, element, attrs, controller) {
                var vm = controller;
                vm.showType = attrs.showType || vm.showType;
                vm.init();
            };
        }
        UtilPagingDirective.instance = function () {
            return new UtilPagingDirective();
        };
        UtilPagingDirective.$inject = [];
        return UtilPagingDirective;
    }());
    main_app_1.app
        .directive('utilPaging', UtilPagingDirective.instance);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
