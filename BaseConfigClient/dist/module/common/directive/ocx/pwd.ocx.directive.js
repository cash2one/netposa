define(["require", "exports", "../../portrait-tool"], function (require, exports, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PwdOcx = (function () {
        function PwdOcx(containerDom) {
            this.ocxId = portrait_tool_1.default.getUUID();
            this.containerDom = containerDom;
            this._init();
        }
        PwdOcx.prototype._init = function () {
            var _ocx, _param;
            _ocx = angular.element("<object></object>");
            _ocx.attr("id", this.ocxId);
            _ocx.html("<param name='onload' value='pluginLoaded'></param>");
            _ocx.attr("type", "application/x-snimg");
            _ocx.css("visibility", "collapse");
            _ocx.css("position", "absolute");
            _ocx.css("width", "1px");
            _ocx.css("height", "1px");
            angular.element(this.containerDom).append(_ocx);
            this.ocx = _ocx[0];
        };
        PwdOcx.prototype.getOcxDownloadUrl = function () {
            return "/foplayer/SNImg_V1.0_Setup.exe";
        };
        PwdOcx.prototype.clear = function () {
            angular.element(this.containerDom).empty().remove();
        };
        PwdOcx.prototype.checkOcx = function () {
            var result = false;
            try {
                this.ocx.GetLocalIP();
                result = true;
            }
            catch (e) {
                if (window.console) {
                    console.error("pwdocx.checkOcx error", e);
                }
            }
            return result;
        };
        PwdOcx.prototype.getLocalIP = function () {
            var result;
            try {
                result = this.ocx.GetLocalIP();
            }
            catch (e) {
                if (window.console) {
                    console.error("pwdocx.getLocalIP error: ", e);
                }
            }
            return result;
        };
        PwdOcx.prototype.getLocalMac = function () {
            var result;
            try {
                result = this.ocx.GetLocalMac();
            }
            catch (e) {
                if (window.console) {
                    console.error("pwdocx.getLocalMac error: ", e);
                }
            }
            return result;
        };
        return PwdOcx;
    }());
    var PwdOcxFactory = (function () {
        function PwdOcxFactory() {
        }
        PwdOcxFactory.prototype.getPwdOcx = function (containerDom) {
            return new PwdOcx(containerDom);
        };
        return PwdOcxFactory;
    }());
    var PwdOcxDirective = (function () {
        function PwdOcxDirective() {
            this.restrict = "AE";
            this.scope = {
                initComplete: "&"
            };
            this.controller = function (pwdOcxFactory) {
                var vm = this;
                vm.init = function (dom) {
                    vm.pwdOcx = pwdOcxFactory.getPwdOcx(dom);
                };
                vm.clear = function () {
                    vm.pwdOcx.clear();
                    vm.pwdOcx = null;
                };
                vm.getLocalIP = function () {
                    return vm.pwdOcx.getLocalIP();
                };
                vm.getLocalMac = function () {
                    return vm.pwdOcx.getLocalMac();
                };
                vm.checkOcx = function () {
                    return vm.pwdOcx.checkOcx();
                };
                vm.getOcxDownloadUrl = function () {
                    return vm.pwdOcx.getOcxDownloadUrl();
                };
            };
            this.link = function (scope, iElement, iAttrs, controller) {
                var vm = controller;
                scope.$on("$destroy", function () {
                    vm.ocxControlFunc = null;
                    vm = null;
                });
                vm.init(iElement[0]);
                vm.ocxControlFunc = {
                    getLocalIP: vm.getLocalIP,
                    getLocalMac: vm.getLocalMac,
                    checkOcx: vm.checkOcx,
                    getOcxDownloadUrl: vm.getOcxDownloadUrl
                };
                scope.initComplete({ ocxControlFunc: vm.ocxControlFunc });
            };
        }
        PwdOcxDirective.instance = function () {
            return new PwdOcxDirective();
        };
        return PwdOcxDirective;
    }());
    angular.module('pwd.ocx', ['ng']);
    angular.module("pwd.ocx").service("pwdOcxFactory", PwdOcxFactory);
    angular.module("pwd.ocx").directive("pwdOcx", PwdOcxDirective.instance);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
