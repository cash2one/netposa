define(["require", "exports", "../app/main.app", "css!./faceHandlePopup.css", "../../common/services/toolOption.service", "./comparison.factory", "../../common/factory/layerMsg.factory"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SelectFaceParams = (function () {
        function SelectFaceParams() {
        }
        return SelectFaceParams;
    }());
    var CutInfo = (function () {
        function CutInfo() {
        }
        return CutInfo;
    }());
    var SelectFacePopupController = (function () {
        function SelectFacePopupController($scope, layer, $timeout, toolOptionService, comparisonFactory, layerDec, i18nFactory) {
            var vm = this;
            $scope.$on("$destroy", function () {
                console.error("销毁了弹出框");
            });
            vm.selectFaceFun = selectFaceFun;
            vm.screenshotImgUrl = "data:image/jpeg;base64," + $scope.data.image;
            vm.file = $scope.file;
            vm.data = $scope.data;
            vm.fromSelectFaceCtrl = $scope.fromSelectFaceCtrl;
            vm.commandType = $scope.commandType;
            vm.detectType = $scope.detectType;
            function frameFace() {
                var $ = angular.element;
                var $screenshotImg = $('.screenshot-img');
                var scale = ($screenshotImg[0].clientWidth / vm.file._info.width).toFixed(4);
                vm.data.faceInfo.forEach(function (item, index) {
                    $timeout(function () {
                        var $selectFaceBox = $(".selectFace-box").eq(index);
                        $selectFaceBox.css({
                            "position": "absolute",
                            "border": "1px solid red",
                            "cursor": "pointer",
                            "top": item.rect.top * scale + "px",
                            "left": item.rect.left * scale + "px",
                            "width": (item.rect.right - item.rect.left) * scale + "px",
                            "height": (item.rect.bottom - item.rect.top) * scale + "px"
                        });
                        $selectFaceBox.hover(function () {
                            $selectFaceBox.css({
                                'background': "rgba(255,0,0,0.4)"
                            });
                        }, function () {
                            $selectFaceBox.css({
                                'background': "rgba(255,0,0,0)"
                            });
                        });
                    });
                });
            }
            frameFace();
            function selectFaceFun(rect) {
                var result = new SelectFaceParams();
                var left = (3 * rect.left - rect.right) / 2 > 0 ? (3 * rect.left - rect.right) / 2 : 0;
                var top = (3 * rect.top - rect.bottom) / 2 > 0 ? (3 * rect.top - rect.bottom) / 2 : 0;
                var width = (rect.right - rect.left) * 2 < vm.file._info.height ? (rect.right - rect.left) * 2 : vm.file._info.height;
                var height = (rect.bottom - rect.top) * 2 < vm.file._info.width ? (rect.bottom - rect.top) * 2 : vm.file._info.width;
                result.detectType = vm.detectType;
                result.commandType = vm.commandType;
                result.imagedata = $scope.data.image;
                result.cutInfo = {
                    right: width,
                    bottom: height,
                    left: left,
                    top: top
                };
                toolOptionService.faceDemarcateDataList(result).then(complete);
                function complete(rep) {
                    if (rep.code === 200) {
                        comparisonFactory.getResponse(rep);
                        $scope.$emit(vm.fromSelectFaceCtrl, rep);
                    }
                    else {
                        layerDec.failInfo(i18nFactory('FDS_00_11_12'));
                    }
                    layer.close($scope.layerIndex);
                }
            }
        }
        SelectFacePopupController.$inject = [
            '$scope',
            'layer',
            '$timeout',
            'toolOptionService',
            'comparisonFactory',
            'layerDec',
            'i18nFactory'
        ];
        return SelectFacePopupController;
    }());
    main_app_1.app.controller('selectFacePopupController', SelectFacePopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
