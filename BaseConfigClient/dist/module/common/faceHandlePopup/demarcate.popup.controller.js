define(["require", "exports", "../app/main.app", "../../../core/params/ToolOptionParams", "css!./faceHandlePopup.css", "../../common/services/toolOption.service", "./comparison.factory", "../../common/factory/layerMsg.factory"], function (require, exports, main_app_1, ToolOptionParams_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DemarcatePopupController = (function () {
        function DemarcatePopupController($scope, layer, toolOptionService, comparisonFactory, layerDec, i18nFactory) {
            var vm = this;
            var $ = angular.element;
            vm.cancelDemarcate = cancelDemarcate;
            vm.demarcateFace = demarcateFace;
            vm.demarcatePoint = [];
            vm.getDemarcateKey = getDemarcateKey;
            $scope.$on("$destroy", function () {
                console.error("销毁了弹出框");
            });
            vm.flag = $scope.flag ? $scope.flag : false;
            vm.demarcateImgUrl = vm.flag ? $scope.imgUrl : "data:image/jpeg;base64," + $scope.data.image;
            vm.file = $scope.file;
            vm.image = $scope.data.image;
            vm.fromDemarcateFaceCtrl = $scope.fromDemarcateFaceCtrl;
            vm.commandType = $scope.commandType;
            vm.detectType = $scope.detectType;
            function cancelDemarcate() {
                layer.close($scope.layerIndex);
                $scope.$destroy();
            }
            function demarcateFace($event, id) {
                if (vm.demarcatePoint.length >= 5) {
                    return;
                }
                var width = $event.target.offsetWidth;
                var height = $event.target.offsetHeight;
                var offsetX = $event.offsetX ? $event.offsetX : $event.originalEvent.layerX;
                var offsetY = $event.offsetY ? $event.offsetY : $event.originalEvent.layerY - $event.target.offsetTop;
                var x = vm.file._info.width * offsetX / width;
                var y = vm.file._info.height * offsetY / height;
                var left = $event.offsetX ? offsetX - 10 : $event.originalEvent.layerX - 10;
                var top = $event.offsetY ? offsetY - 10 + $event.target.offsetTop : $event.originalEvent.layerY - 10;
                var $div = $(id);
                var $span = $("<span>");
                var $img = $("<img>");
                var $em = $("<em>");
                $em.html(vm.demarcatePoint.length + 1);
                $em.css({
                    "position": "absolute",
                    "top": "-14px",
                    "left": 0,
                    "color": "orange",
                    "width": "100%",
                    "textAlign": "center"
                });
                $img[0].src = "../../../images/common/dot.png";
                $span.css({
                    "position": "absolute",
                    'left': left + "px",
                    "lineHeight": 0,
                    "top": top + "px"
                });
                $span.append($img);
                $span.append($em);
                $div.append($span);
                vm.demarcatePoint.push({ x: x, y: y });
                console.log(vm.demarcatePoint);
            }
            function faceBox(demarcatePoint, file) {
                if (demarcatePoint.length < 5) {
                    layerDec.warnInfo(i18nFactory('FDS_00_11_11'));
                    return {};
                }
                var eyeSpace = Math.abs(demarcatePoint[0].x - demarcatePoint[1].x) / 2;
                var leftSide = demarcatePoint[0].x < demarcatePoint[3].x ? demarcatePoint[0].x : demarcatePoint[3].x;
                var rightSide = demarcatePoint[1].x < demarcatePoint[4].x ? demarcatePoint[4].x : demarcatePoint[1].x;
                var topSide = demarcatePoint[0].y < demarcatePoint[1].y ? demarcatePoint[0].y : demarcatePoint[1].y;
                var botSide = demarcatePoint[3].y < demarcatePoint[4].y ? demarcatePoint[4].y : demarcatePoint[3].y;
                var result = new ToolOptionParams_1.DetectFaceParams();
                result.commandType = vm.commandType;
                result.detectType = vm.detectType;
                result.markInfo = {
                    "lefteye": {
                        "x": demarcatePoint[0].x,
                        "y": demarcatePoint[0].y
                    },
                    "righteye": {
                        "x": demarcatePoint[1].x,
                        "y": demarcatePoint[1].y
                    },
                    "nose": {
                        "x": demarcatePoint[2].x,
                        "y": demarcatePoint[2].y
                    },
                    "mouthleft": {
                        "x": demarcatePoint[3].x,
                        "y": demarcatePoint[3].y
                    },
                    "mouthright": {
                        "x": demarcatePoint[4].x,
                        "y": demarcatePoint[4].y
                    },
                    "left": leftSide - eyeSpace > 0 ? leftSide - eyeSpace : 0,
                    "right": rightSide + eyeSpace < file._info.width ? rightSide + eyeSpace : file._info.width,
                    "top": topSide - eyeSpace > 0 ? topSide - eyeSpace : 0,
                    "bottom": botSide + eyeSpace < file._info.height ? botSide + eyeSpace : file._info.height
                };
                if ($scope.flag) {
                    result.imageurl = $scope.imgUrl;
                }
                else {
                    result.imagedata = $scope.data.image;
                }
                return result;
            }
            function getDemarcateKey() {
                if (vm.demarcatePoint.length < 5) {
                    layerDec.warnInfo(i18nFactory('FDS_00_11_11'));
                    return;
                }
                toolOptionService.faceDemarcateDataList(faceBox(vm.demarcatePoint, vm.file)).then(complete);
                function complete(rep) {
                    if (rep.code === 200) {
                        comparisonFactory.getResponse(rep);
                        $scope.$emit(vm.fromDemarcateFaceCtrl, rep);
                    }
                    else {
                        layerDec.failInfo(i18nFactory('FDS_00_11_12'));
                    }
                    layer.close($scope.layerIndex);
                }
            }
        }
        DemarcatePopupController.$inject = [
            '$scope',
            'layer',
            'toolOptionService',
            'comparisonFactory',
            'layerDec',
            'i18nFactory'
        ];
        return DemarcatePopupController;
    }());
    main_app_1.app.controller('demarcatePopupController', DemarcatePopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
