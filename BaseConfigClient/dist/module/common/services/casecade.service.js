define(["require", "exports", "../app/main.app", "../../../core/server/enum/SearchType"], function (require, exports, main_app_1, SearchType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CasCadeOrderType = (function () {
        function CasCadeOrderType() {
        }
        CasCadeOrderType.ASC = "ASC";
        CasCadeOrderType.DESC = "DESC";
        return CasCadeOrderType;
    }());
    var CasCadeUrl = (function () {
        function CasCadeUrl() {
        }
        CasCadeUrl.FDS = "/fds/baseconfig/findCascadeList";
        CasCadeUrl.BCS = "/bcs/baseconfig/findCascadeList";
        CasCadeUrl.PDP = "/pdp/baseconfig/findCascadeList";
        CasCadeUrl.DB = '/db/baseconfig/findCascadeList';
        return CasCadeUrl;
    }());
    var CasCadeSearchParams = (function () {
        function CasCadeSearchParams() {
        }
        return CasCadeSearchParams;
    }());
    exports.CasCadeSearchParams = CasCadeSearchParams;
    var CasCadeService = (function () {
        function CasCadeService($http) {
            this.$http = $http;
        }
        CasCadeService.prototype.findAllAreaList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Area.value);
        };
        CasCadeService.prototype.findAllUnitList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Unit.value);
        };
        CasCadeService.prototype.findAllCameraList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Camera.value);
        };
        CasCadeService.prototype.findAllUserList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.User.value);
        };
        CasCadeService.prototype.findAllBusinessLibList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.BusinessLib.value);
        };
        CasCadeService.prototype.findAllVideoServerList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.VideoServer.value);
        };
        CasCadeService.prototype.findAllIvsServerList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.IvsServer.value);
        };
        CasCadeService.prototype.findAreaList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Area.value, true);
        };
        CasCadeService.prototype.findRfidList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Area.value, true);
        };
        CasCadeService.prototype.findUnitList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Unit.value, true);
        };
        CasCadeService.prototype.findCameraList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Camera.value, true);
        };
        CasCadeService.prototype.findRmpGateList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.RmapGate.value, true);
        };
        CasCadeService.prototype.findWifiList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.Wifi.value, true);
        };
        CasCadeService.prototype.findElectronicFenceList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.ElectronicFence.value, true);
        };
        CasCadeService.prototype.findUserList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.User.value, true);
        };
        CasCadeService.prototype.findBusinessLibList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.BusinessLib.value, true);
        };
        CasCadeService.prototype.findVideoServerList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.VideoServer.value, true);
        };
        CasCadeService.prototype.findIvsServerList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.IvsServer.value, true);
        };
        CasCadeService.prototype.findIodServerList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.IodServer.value, true);
        };
        CasCadeService.prototype.findLampList = function (searchParams) {
            return this.findListByPage(CasCadeUrl.DB, searchParams, SearchType_1.SearchType.LampServer.value, true);
        };
        CasCadeService.prototype.findListByPage = function (url, searchParams, searchType, isPage) {
            searchParams = searchParams || {};
            var model = {};
            model.name = searchParams.name;
            model.code = searchParams.code;
            model.id = searchParams.areaId;
            model.isPage = !!isPage;
            if (model.isPage) {
                model.pageIndex = searchParams.pageIndex || 1;
                model.pageSize = searchParams.pageSize || 10;
            }
            model.orderType = searchParams.isAsc ? CasCadeOrderType.ASC : CasCadeOrderType.DESC;
            model.orderField = searchParams.orderField;
            model.searchType = searchType;
            if (searchType === 'User') {
                model.areaIDName = 'PersonID';
                model.roleId = searchParams.roleId;
                model.unitId = searchParams.unitId;
            }
            if (searchParams.type) {
                model.type = searchParams.type;
            }
            model.isPage = true;
            return this.$http({
                method: "POST",
                url: url,
                headers: { 'Content-Type': 'application/json;charset=UTF-8' },
                data: model
            });
        };
        CasCadeService.$inject = ['$http', 'notifyFactory'];
        return CasCadeService;
    }());
    exports.CasCadeService = CasCadeService;
    main_app_1.app.service("casCadeService", CasCadeService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
