define(["require", "exports", "../app/main.app"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConnectTreeService = (function () {
        function ConnectTreeService($http, notifyFactory) {
            this.$http = $http;
            this.notifyFunc = notifyFactory.msg({ onlySuccess: true });
        }
        ConnectTreeService.prototype.findAreaCamera = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findAreaCamera",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findAreaWithPerson = function (keyWord) {
            return this.$http({
                method: 'get',
                url: '/db/tree/findAreaWithPersion',
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ;
        ConnectTreeService.prototype.findAreaWithUser = function (keyWord) {
            return this.$http({
                method: 'get',
                url: '/db/tree/findAreaWithUser',
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ;
        ConnectTreeService.prototype.findAreaWithWifi = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findAreaWithWifi",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findAreaWithRmpgate = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findAreaWithRmpgate",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findAreaWithElectronicfence = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findAreaWithElectronicfence",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findAreaWithLamp = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findAreaWithLamp",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findLampTreeWithCamera = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findLampTreeWithCamera",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findLampTreeWithElectronicfence = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findLampTreeWithElectronicfence",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findLampTreeWithWifi = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findLampTreeWithWifi",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.prototype.findLampTreeWithRmpGate = function (searchInput) {
            var keyWord;
            if (searchInput) {
                keyWord = searchInput;
            }
            return this.$http({
                method: "GET",
                url: "/db/tree/findLampTreeWithRmpGate",
                params: { keyword: keyWord }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ConnectTreeService.$inject = ['$http', 'notifyFactory'];
        return ConnectTreeService;
    }());
    main_app_1.app
        .service('connectTreeService', ConnectTreeService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
