define(["require", "exports", "../app/main.app", "../factory/response.notify.factory", "angular", "./casecade.service"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ElectronicService = (function () {
        function ElectronicService($http, notifyFactory, casCadeService) {
            this.$http = $http;
            this.notifyFactory = notifyFactory;
            this.casCadeService = casCadeService;
            this.notifyFunc = this.notifyFactory.msg({ onlySuccess: true });
        }
        ElectronicService.prototype.findElectronicfenceList = function (search) {
            return this.$http({
                method: "POST",
                url: "/db/area/findElectronicfenceList",
                params: { keyword: search }
            })
                .then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.code === 200 && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ElectronicService.prototype.updateElectronicAreaID = function (models) {
            return this.$http({
                method: 'POST',
                url: '/db/electronic/updateAreaForElectronicfence',
                data: models
            }).then(this.notifyFunc);
        };
        ElectronicService.prototype.findAll = function () {
            return this.$http({
                method: 'get',
                url: '/db/camera/findAllList'
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.code === 200 && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ElectronicService.prototype.updateCameraType = function (models) {
            return this.$http({
                method: 'post',
                url: '/db/camera/changeCameraType',
                data: models
            }).then(this.notifyFunc);
        };
        ElectronicService.prototype.deleteById = function (models) {
            return this.$http({
                method: 'post',
                url: '/db/electronic/delete',
                data: { id: models.ID }
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.code === 200 && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ElectronicService.prototype.create = function (models) {
            return this.$http({
                method: 'post',
                url: '/db/camera/create',
                data: models
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.code === 200 && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ElectronicService.prototype.edit = function (models) {
            return this.$http({
                method: 'post',
                url: '/db/electronicfence/edit',
                data: models
            }).then(complete);
            function complete(res) {
                var arr = [];
                if (res && res.code === 200 && res.data) {
                    arr = res.data;
                }
                return arr;
            }
        };
        ElectronicService.prototype.findLampTree = function () {
            return this.$http({
                method: 'get',
                url: '/db/area/findLampTree',
            }).then(complete);
            function complete(res) {
                console.log(res);
                var arr = [];
                if (res && res.code === 200 && res.data) {
                    arr = res.data;
                    console.log("=========================>");
                    console.log(arr);
                }
                return arr;
            }
        };
        ElectronicService.$inject = ['$http', 'notifyFactory', 'casCadeService'];
        return ElectronicService;
    }());
    main_app_1.app
        .service('electronicService', ElectronicService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
