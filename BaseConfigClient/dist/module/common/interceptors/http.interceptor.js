define(["require", "exports", "../app/main.app", "angular", "es6-promise", "../factory/userinfo.cache.factory", "../factory/response.notify.factory"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Promise = require("es6-promise");
    var HttpInterceptor = (function () {
        function HttpInterceptor(userInfoCacheFactory, notifyFactory, $q) {
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.notifyFactory = notifyFactory;
            this.$q = $q;
            this._LOADING_CACHE_MAP = {};
            var vm = this;
            this.request = _request;
            this.requestError = _requestError;
            this.response = _response;
            this.responseError = _responseError;
            function _request(config) {
                if (isIgnore(config))
                    return config;
                var headerConfig = config.headers;
                var headers = userInfoCacheFactory.getCurrentUserKey();
                var header;
                for (header in headers) {
                    headerConfig[header] = headers[header];
                }
                headers = userInfoCacheFactory.getCurrentUserIDMap();
                for (header in headers) {
                    headerConfig[header] = headers[header];
                }
                if (!config.cancel) {
                    var cancel = $q.defer();
                    config.cancel = cancel;
                    config.timeout = cancel.promise;
                }
                if (config.showLoad) {
                    toggleLayerLoad(getUrl(config));
                    delete config.showLoad;
                }
                return config;
            }
            function _requestError(err) {
                if (isIgnore(err.config) || isSaveLog(err.config))
                    return Promise.reject(err);
                console.debug("http.interceptor._requestError", err);
                toggleLayerLoad(getUrl(err.config), true);
            }
            function _response(res) {
                if (isIgnore(res.config) || isSaveLog(res.config))
                    return res;
                console.debug("http.interceptor._response", res);
                toggleLayerLoad(getUrl(res.config), true);
                vm.notifyFactory.msg({ onlyError: true })(res.data);
                return res.data;
            }
            function _responseError(err) {
                if (isIgnore(err.config) || isSaveLog(err.config))
                    return Promise.reject(err);
                console.debug("Http.interceptor._responseError", err);
                toggleLayerLoad(getUrl(err.config), true);
                vm.notifyFactory.msg({ onlyError: true, codeKey: 'status' })(err);
                return Promise.reject(err);
            }
            function isIgnore(httpConfig) {
                if (!httpConfig) {
                    console.warn("interceptor.isIgnore httpConfig Error, httpConfig is null!");
                }
                var _url = getUrl(httpConfig);
                var isStart_db = ("/db" == _url.slice(0, 3));
                var isStart_fds = ("/pdp" == _url.slice(0, 4));
                var isStart_bcs = ("/bcs" == _url.slice(0, 4));
                return !(isStart_db || isStart_fds || isStart_bcs);
            }
            function isSaveLog(httpConfig) {
                if (!httpConfig) {
                    console.warn("interceptor.isIgnore httpConfig Error, httpConfig is null!");
                }
                var _url = getUrl(httpConfig);
                var isLogUrl = ('/db/systemlog' == _url.slice(0, 13));
                if (isLogUrl) {
                    return true;
                }
                else {
                    return false;
                }
            }
            function getUrl(httpConfig) {
                if (!httpConfig) {
                    console.warn("interceptor.getUrl httpConfig Error, httpConfig is null!");
                }
                return httpConfig.url;
            }
            function toggleLayerLoad(url, isClose) {
                if (!url) {
                    console.warn("interceptor.toggleLoading url Error, url is null!");
                }
                if (vm._LOADING_CACHE_MAP[url] && isClose) {
                    layer.close(vm._LOADING_CACHE_MAP[url]);
                    delete vm._LOADING_CACHE_MAP[url];
                }
                else if (!isClose) {
                    vm._LOADING_CACHE_MAP[url] = layer.load(3);
                }
            }
        }
        HttpInterceptor.$inject = ['userInfoCacheFactory', 'notifyFactory', '$q'];
        return HttpInterceptor;
    }());
    main_app_1.app.service('httpInterceptor', HttpInterceptor);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
