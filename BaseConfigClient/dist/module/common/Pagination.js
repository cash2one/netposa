define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageParamsAndResult = (function () {
        function PageParamsAndResult() {
            this.totalCount = 1;
            this.pageSize = 10;
            this.currentPage = 1;
            this.pageCount = 1;
        }
        return PageParamsAndResult;
    }());
    exports.PageParamsAndResult = PageParamsAndResult;
    var Pagination = (function () {
        function Pagination() {
            this.data = [];
            this.mapData = {};
            this.result = new PageParamsAndResult();
        }
        Pagination.prototype.set = function (data) {
            var _this = this;
            if (Array.isArray(data)) {
                data.forEach(function (item, index) {
                    item['pageId'] = "Pagination" + index;
                    _this.mapData["Pagination" + index] = item;
                });
                this.data = data;
                return true;
            }
            else {
                console.error('Pagination ===> params is not Array');
                return false;
            }
        };
        Pagination.prototype.get = function () {
            return angular.copy(this.data);
        };
        Pagination.prototype.delByPageId = function (pageId) {
            if (this.mapData[pageId]) {
                delete this.mapData[pageId];
                var tempRes = [];
                for (var k in this.mapData) {
                    tempRes.push(this.mapData[k]);
                }
                this.data = tempRes;
                return true;
            }
            else {
                console.error("Pagination ===> pageId is not found");
                return false;
            }
        };
        Pagination.prototype.updateByPageId = function (pageId, item) {
            if (this.mapData[pageId]) {
                this.mapData[pageId] = item;
                this.mapData[pageId].pageId = pageId;
                var tempRes = [];
                for (var k in this.mapData) {
                    tempRes.push(this.mapData[k]);
                }
                this.data = tempRes;
                return true;
            }
            else {
                console.error("Pagination ===> pageId is not found");
                return false;
            }
        };
        Pagination.prototype.getByPage = function (params) {
            this.result.pageSize = params.pageSize || 10;
            this.result.currentPage = params.currentPage || 1;
            var res = angular.copy(this.data);
            this.result.totalCount = res.length;
            this.result.allData = res;
            if (this.result.totalCount % this.result.pageSize === 0) {
                this.result.pageCount = Math.round(this.result.totalCount / this.result.pageSize);
            }
            else {
                this.result.pageCount = Math.ceil(this.result.totalCount / this.result.pageSize);
            }
            if (this.result.currentPage > this.result.pageCount) {
                this.result.currentPage = this.result.pageCount;
            }
            var start = (this.result.currentPage - 1) * this.result.pageSize;
            var end = this.result.currentPage * this.result.pageSize;
            this.result.data = res.slice(start, end);
            res = null;
            return angular.copy(this.result);
        };
        return Pagination;
    }());
    exports.Pagination = Pagination;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
