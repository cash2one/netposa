define(["require", "exports", "../../core/enum/TreeType", "../../core/entity/OperFirstModule", "../../core/entity/OperSecondModule", "../../core/entity/OperThirdModule", "jquery.md5", "angular", "ua-parser-js"], function (require, exports, TreeType_1, OperFirstModule_1, OperSecondModule_1, OperThirdModule_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UAParser = require("ua-parser-js");
    var PortraitTool = (function () {
        function PortraitTool() {
        }
        PortraitTool.getBrowser = function () {
            return PortraitTool.browser;
        };
        PortraitTool.getIEVer = function () {
            var result = 0;
            if (PortraitTool.browser.name.toUpperCase() == 'IE') {
                result = Number(PortraitTool.browser.major);
            }
            return result;
        };
        ;
        PortraitTool.getLocalStorageData = function (key) {
            var result = null;
            try {
                result = angular.fromJson(localStorage.getItem(key));
            }
            catch (e) {
                result = null;
            }
            return result;
        };
        PortraitTool.extend = function (__params1, __params2, __params3, __params4) {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, push = Array.prototype.push, slice = Array.prototype.slice, trim = String.prototype.trim, indexOf = Array.prototype.indexOf, class2type = {
                "[object Boolean]": "boolean",
                "[object Number]": "number",
                "[object String]": "string",
                "[object Function]": "function",
                "[object Array]": "array",
                "[object Date]": "date",
                "[object RegExp]": "regexp",
                "[object Object]": "object"
            }, jQuery = {
                isFunction: function (obj) {
                    return jQuery.type(obj) === "function";
                },
                isArray: Array.isArray ||
                    function (obj) {
                        return jQuery.type(obj) === "array";
                    },
                isWindow: function (obj) {
                    return obj != null && obj == obj.window;
                },
                isNumeric: function (obj) {
                    return !isNaN(parseFloat(obj)) && isFinite(obj);
                },
                type: function (obj) {
                    return obj == null ? String(obj) : class2type[toString.call(obj)] || "object";
                },
                isPlainObject: function (obj) {
                    if (!obj || jQuery.type(obj) !== "object" || obj.nodeType) {
                        return false;
                    }
                    try {
                        if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                            return false;
                        }
                    }
                    catch (e) {
                        return false;
                    }
                    var key;
                    for (key in obj) {
                    }
                    return key === undefined || hasOwn.call(obj, key);
                }
            };
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {};
            }
            if (length === i) {
                target = this;
                --i;
            }
            for (i; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue;
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            }
                            else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = PortraitTool.extend(deep, clone, copy);
                        }
                        else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }
            return target;
        };
        PortraitTool.getUUID = function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };
        PortraitTool.classifyDiffChild = function (params, multipleDataList) {
            var idAddStr = "+";
            var selfName = "（" + (!!params.newChildName ? params.newChildName : "本区域") + "）";
            var defaultParams = {
                newChildNameStr: selfName,
                nameKeyStr: !!params.nameKey ? params.nameKey : "Name",
                treeIdKey: !!params.idKeyName ? params.idKeyName : "treeID",
                treePidKey: !!params.pidKeyName ? params.pidKeyName : "treeParentId",
                treeTypeKey: !!params.treeTypeKey ? params.treeTypeKey : "treeType",
                currentType: !!params.currentType ? params.currentType : TreeType_1.TreeType.area.value
            };
            var convertAddNode = function (nodeData, newChildName, newChildKey) {
                var nameKey = defaultParams.nameKeyStr;
                var newNode = angular.copy(nodeData);
                newNode[nameKey] = newChildName + newNode[nameKey];
                newNode[defaultParams.treePidKey] = nodeData[defaultParams.treeIdKey];
                newNode[defaultParams.treeIdKey] = idAddStr + nodeData[defaultParams.treeIdKey];
                return newNode;
            };
            var mainTypeNodes = [], mainTypeNodesMap = {}, addNodes = [], diffNodes = [];
            angular.forEach(multipleDataList[0], function (val) {
                if (val[defaultParams.treeTypeKey] === defaultParams.currentType) {
                    mainTypeNodesMap[val[defaultParams.treeIdKey]] = val;
                    mainTypeNodes.push(val);
                }
                else {
                    diffNodes.push(val);
                }
            });
            angular.forEach(multipleDataList, function (val, i) {
                if (i > 0 && angular.isArray(val)) {
                    diffNodes = diffNodes.concat(val);
                }
            });
            var addNode = null;
            var addNodeMap = {};
            angular.forEach(diffNodes, function (val) {
                addNode = mainTypeNodesMap[val[defaultParams.treePidKey]];
                if (val[defaultParams.treePidKey] && addNode && (val[defaultParams.treeTypeKey] !== defaultParams.currentType)) {
                    if (!addNodeMap[val[defaultParams.treePidKey]]) {
                        addNodeMap[val[defaultParams.treePidKey]] = true;
                        addNode = convertAddNode(addNode, defaultParams.newChildNameStr, defaultParams.nameKeyStr);
                        addNodes.push(addNode);
                    }
                    else {
                    }
                    val[defaultParams.treePidKey] = idAddStr + val[defaultParams.treePidKey];
                }
            });
            return addNodes.concat(mainTypeNodes, diffNodes);
        };
        PortraitTool.getChineseModuleName = function (moduleName) {
            var FitstModule = angular.copy(OperFirstModule_1.OperFitstModule);
            var SecondModule = angular.copy(OperSecondModule_1.OperSecondModule);
            var ThirdModule = angular.copy(OperThirdModule_1.OperThirdModule);
            if (FitstModule[moduleName]) {
                return FitstModule[moduleName].name;
            }
            else if (SecondModule[moduleName]) {
                return SecondModule[moduleName].name;
            }
            else if (ThirdModule[moduleName]) {
                return ThirdModule[moduleName].name;
            }
            else {
                return "";
            }
        };
        PortraitTool.browser = (function () {
            return new UAParser().getResult().browser;
        })();
        PortraitTool.convert2Ztree = function (sNodes, idKey, parentKey, childKey) {
            var i, l, key = idKey, parentKey = parentKey, childKey = childKey;
            var r = [];
            var tmpMap = [];
            for (i = 0, l = sNodes.length; i < l; i++) {
                tmpMap[sNodes[i][key]] = sNodes[i];
            }
            for (i = 0, l = sNodes.length; i < l; i++) {
                if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
                    if (!tmpMap[sNodes[i][parentKey]][childKey])
                        tmpMap[sNodes[i][parentKey]][childKey] = [];
                    tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
                }
                else {
                    r.push(sNodes[i]);
                }
            }
            return r;
        };
        PortraitTool.deepCopy = function (o) {
            if (o instanceof Array) {
                var n = [];
                for (var i = 0; i < o.length; ++i) {
                    n[i] = this.deepCopy(o[i]);
                }
                return n;
            }
            else if (o instanceof Object) {
                var n = {};
                for (var i in o) {
                    n[i] = this.deepCopy(o[i]);
                }
                return n;
            }
            else {
                return o;
            }
        };
        PortraitTool.md5 = function (origin) {
            return $.md5(origin);
        };
        PortraitTool.formatDate = function (v, format) {
            if (!format) {
                format = "yyyy-MM-dd hh:mm:ss";
            }
            if (typeof v == 'string')
                v = this.parseDate(v);
            if (!(v instanceof Date)) {
                return '';
            }
            var o = {
                "M+": v.getMonth() + 1,
                "d+": v.getDate(),
                "h+": v.getHours(),
                "m+": v.getMinutes(),
                "s+": v.getSeconds(),
                "q+": Math.floor((v.getMonth() + 3) / 3),
                "S": v.getMilliseconds()
            };
            if (/(y+)/.test(format)) {
                format = format.replace(RegExp.$1, (v.getFullYear() + "").substr(4 - RegExp.$1.length));
            }
            for (var k in o) {
                if (new RegExp("(" + k + ")").test(format)) {
                    format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
                }
            }
            return format;
        };
        PortraitTool.parseDate = function (str) {
            if (typeof str == 'string') {
                var results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) *$/);
                if (results && results.length > 3)
                    return new Date(parseInt(results[1], 10), parseInt(results[2], 10) - 1, parseInt(results[3], 10));
                results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2}) *$/);
                if (results && results.length > 6)
                    return new Date(parseInt(results[1], 10), parseInt(results[2], 10) - 1, parseInt(results[3], 10), parseInt(results[4], 10), parseInt(results[5], 10), parseInt(results[6], 10));
                results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2})\.(\d{1,5}) *$/);
                if (results && results.length > 7)
                    return new Date(parseInt(results[1], 10), parseInt(results[2], 10) - 1, parseInt(results[3], 10), parseInt(results[4], 10), parseInt(results[5], 10), parseInt(results[6], 10), parseInt(results[7], 10));
            }
            return null;
        };
        PortraitTool.addYears = function (date, value) {
            date.setFullYear(date.getFullYear() + value);
            return date;
        };
        PortraitTool.addDays = function (date, value) {
            date.setDate(date.getDate() + value);
            return date;
        };
        PortraitTool.addHours = function (date, value) {
            date.setHours(date.getHours() + value);
            return date;
        };
        PortraitTool.addSeconds = function (date, value) {
            date.setSeconds(date.getSeconds() + value);
            return date;
        };
        PortraitTool.addMinutes = function (date, value) {
            date.setMinutes(date.getMinutes() + value);
            return date;
        };
        return PortraitTool;
    }());
    exports.default = PortraitTool;
    ;
    var ClassifyDiffChildParams = (function () {
        function ClassifyDiffChildParams() {
            this.currentType = TreeType_1.TreeType.area.value;
            this.newChildName = "（本部）";
            this.nameKey = "Name";
            this.idKeyName = "treeID";
            this.pidKeyName = "treeParentId";
            this.treeTypeKey = "treeType";
        }
        return ClassifyDiffChildParams;
    }());
    exports.ClassifyDiffChildParams = ClassifyDiffChildParams;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
