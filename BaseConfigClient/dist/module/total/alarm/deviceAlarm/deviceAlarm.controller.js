define(["require", "exports", "../../../common/app/main.app", "../../../common/directive/tree/tree-params", "../../../common/services/total.service", "../../totalFactory/doEcharts", "../../../common/services/area.service", "angular", "echarts"], function (require, exports, main_app_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var echarts = require("echarts");
    var SearchParams = (function () {
        function SearchParams() {
        }
        return SearchParams;
    }());
    var DeviceAlarmController = (function () {
        function DeviceAlarmController($scope, totalService, echartService, areaService, $timeout) {
            var vm = this;
            vm.formatDataList = formatDataList;
            vm.changeTimeBtn = changeTimeBtn;
            vm.showCustomTime = showCustomTime;
            vm.areaCode = '';
            vm.duration = 'THIRY_DAYS';
            vm.startTime = '';
            vm.endTime = '';
            vm.isNoData = true;
            vm.dataPaging = dataPaging;
            vm.currentPage = 1;
            vm.pageSize = 15;
            vm.prePage = prePage;
            vm.nextPage = nextPage;
            function _getSearchParams() {
                var result = new SearchParams();
                result.areaCode = vm.areaCode;
                result.duration = vm.duration;
                result.startTime = vm.startTime;
                result.endTime = vm.endTime;
                result.groupType = "GROUP_BY_CAMERA";
                console.log('传参', result);
                return [result];
            }
            function getDataList() {
                totalService.getAlarmDataList(_getSearchParams()).then(complete);
                function complete(rep) {
                    console.log('设备报警请求成功', rep);
                    if (rep.code === 200 && rep.data) {
                        vm.isNoData = false;
                        formatDataList(rep.data);
                    }
                    else {
                        vm.isNoData = true;
                    }
                }
            }
            getDataList();
            vm.areaTreeDataParams = new tree_params_1.TreeDataParams();
            vm.areaTreeDataParams.treeId = 'areaTreeDeviceAlarm';
            vm.areaTreeDataParams.isDefaultSelected = true;
            vm.areaTreeDataParams.onClick = treeSelectNode;
            function getTreeList() {
                areaService.findListTree().then(complete);
                function complete(result) {
                    $timeout(function () {
                        vm.areaTreeDataParams.treeDatas = result;
                    });
                }
            }
            getTreeList();
            function treeSelectNode(event, treeId, treeNode) {
                vm.areaCode = treeNode.Code;
                vm.areaName = treeNode.Name;
                vm.duration = 'THIRY_DAYS';
                vm.isShowAreaTree = false;
                getDataList();
                $timeout(function () {
                    $scope.$apply();
                });
            }
            function dataPaging(formatData, currentPage) {
                var allData = formatData.length;
                var pageNumber = Math.ceil(allData / vm.pageSize);
                var showArr = [];
                if (currentPage < 1) {
                    currentPage = 1;
                    vm.currentPage = 1;
                }
                else if (currentPage > pageNumber) {
                    currentPage = pageNumber;
                    vm.currentPage = pageNumber;
                }
                for (var i = (currentPage - 1) * vm.pageSize; i < vm.pageSize * currentPage; i++) {
                    if (formatData[i] !== undefined) {
                        showArr.push(formatData[i]);
                    }
                }
                console.log('数据分页', showArr);
                return showArr;
            }
            function prePage() {
                vm.currentPage--;
                getDataList();
            }
            function nextPage() {
                vm.currentPage++;
                getDataList();
            }
            function changeTimeBtn(duration) {
                vm.duration = duration;
                console.log('按钮', vm.duration);
                getDataList();
            }
            function showCustomTime() {
                console.log('自定义时间开始', vm.startTime);
                console.log('自定义时间结束', vm.endTime);
                vm.duration = "CUSTOMIZE";
                getDataList();
            }
            function formatDataList(originalData) {
                var xAxisData = [];
                var allNum = [];
                var onlineNum = [];
                var showArr = dataPaging(originalData.GROUP_BY_CAMERA, vm.currentPage);
                showArr.forEach(function (item, index) {
                    xAxisData.push(item.cameraName);
                    allNum.push(item.allAlarmNum);
                    onlineNum.push(item.validAlarmNum);
                });
                var formatData = {
                    seriesNameOne: '全部',
                    seriesNameTwo: '有效',
                    gridLeft: '5%',
                    gridRight: '5%',
                    xAxisName: '',
                    yAxisName: '',
                    colorTwo: ['#8cdcff'],
                    colorOne: ['#40c4ff'],
                    xAxisData: xAxisData,
                    allNum: allNum,
                    onlineNum: onlineNum
                };
                echartService.drawEchart(echartService.echartPileBarOption(formatData), 'alarm-3');
            }
        }
        DeviceAlarmController.$inject = ['$scope', 'totalService', 'echartService', 'areaService', '$timeout'];
        return DeviceAlarmController;
    }());
    main_app_1.app.controller('deviceAlarmController', DeviceAlarmController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
