define(["require", "exports", "../../../common/app/main.app", "../../../common/directive/tree/tree-params", "../../../common/services/total.service", "../../totalFactory/doEcharts", "../../../common/services/area.service", "angular", "echarts"], function (require, exports, main_app_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var echarts = require("echarts");
    var SearchParams = (function () {
        function SearchParams() {
        }
        return SearchParams;
    }());
    var TrendSearchController = (function () {
        function TrendSearchController($scope, totalService, echartService, areaService, $timeout) {
            var vm = this;
            vm.formatDataList = formatDataList;
            vm.changeTimeBtn = changeTimeBtn;
            vm.showCustomTime = showCustomTime;
            $timeout(function () {
                vm.areaCode = '';
                vm.duration = 'THIRY_DAYS';
                vm.startTime = '';
                vm.endTime = '';
                vm.isNoData = true;
            });
            function _getSearchParams() {
                var result = new SearchParams();
                result.areaCode = vm.areaCode;
                result.duration = vm.duration;
                result.startTime = vm.startTime;
                result.endTime = vm.endTime;
                result.groupType = "GROUP_BY_DAY";
                console.log('传参', result);
                return [result];
            }
            function getDataList() {
                totalService.getSearchDataList(_getSearchParams()).then(complete);
                function complete(rep) {
                    console.log('检索趋势请求成功', rep);
                    if (rep.code === 200 && rep.data) {
                        vm.isNoData = false;
                        formatDataList(rep.data);
                    }
                    else {
                        vm.isNoData = true;
                    }
                }
            }
            getDataList();
            vm.areaTreeDataParams = new tree_params_1.TreeDataParams();
            vm.areaTreeDataParams.treeId = 'areaTreeTrendSearch';
            vm.areaTreeDataParams.isDefaultSelected = true;
            vm.areaTreeDataParams.onClick = treeSelectNode;
            function getTreeList() {
                areaService.findListTree().then(complete);
                function complete(result) {
                    $timeout(function () {
                        vm.areaTreeDataParams.treeDatas = result;
                    });
                }
            }
            getTreeList();
            function treeSelectNode(event, treeId, treeNode) {
                vm.areaCode = treeNode.Code;
                vm.areaName = treeNode.Name;
                vm.isShowAreaTree = false;
                vm.duration = 'THIRY_DAYS';
                getDataList();
                $timeout(function () {
                    $scope.$apply();
                });
            }
            function changeTimeBtn(duration) {
                vm.duration = duration;
                console.log('按钮', vm.duration);
                getDataList();
            }
            function showCustomTime() {
                console.log('自定义时间开始', vm.startTime);
                console.log('自定义时间结束', vm.endTime);
                vm.duration = "CUSTOMIZE";
                getDataList();
            }
            function formatDataList(originalData) {
                var searchNum = [];
                var area = [];
                originalData.GROUP_BY_DAY.forEach(function (item, index) {
                    area.push(item.strDate);
                    searchNum.push(item.retrievalNum);
                });
                var formatData = {
                    color: ['#6ae4d9'],
                    xAxisData: area,
                    showData: searchNum
                };
                echartService.drawEchart(echartService.echartLineAreaOption(formatData), 'search-3');
            }
        }
        TrendSearchController.$inject = ['$scope', 'totalService', 'echartService', 'areaService', '$timeout'];
        return TrendSearchController;
    }());
    main_app_1.app.controller('trendSearchController', TrendSearchController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
