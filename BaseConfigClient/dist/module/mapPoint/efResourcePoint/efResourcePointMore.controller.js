define(["require", "exports", "text!./efResourceAlarmDetail.html", "text!./efResourceCollectDetail.html", "../../common/app/main.app", "../../common/directive/page/page-params", "../../common/factory/attribute.factory", "css!./style/efResourcePointMore.css", "./efResourceAlarmDetail.controller", "./efResourceCollectDetail.controller", "../../common/services/resourceRetrieval.service", "../../common/factory/userinfo.cache.factory", "../../common/services/analysis.service"], function (require, exports, efResourceAlarmDetail, efResourceCollectDetail, main_app_1, page_params_1, attribute_factory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EfResourcePointMoreController = (function () {
        function EfResourcePointMoreController($scope, $timeout, layer, resourceRetrievalService, userInfoCacheFactory, layerDec, analysisService) {
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.layer = layer;
            this.resourceRetrievalService = resourceRetrievalService;
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.layerDec = layerDec;
            this.analysisService = analysisService;
            this.ShowAlarmStatus = false;
            this.switchStatus = true;
            this.renderDataList = [];
            this.renderAlarmdataList = [];
            this.dataListTotal = 0;
            this.alarmdataListTotal = 0;
            this.attributeFactory = new attribute_factory_1.AttributeFactory();
            this.name = '';
            this.searchParams = {
                currentPage: 1,
                keyWord: '',
                orderBy: {
                    isAsc: false,
                },
                pageSize: 10,
                taskId: '',
                startTime: '',
                endTime: '',
                ArObjectID: [],
                isFirstSearch: true,
                userId: '',
            };
            this.isSearchAlarmParams = true;
            this.PersonAlarmParams = {};
            this.name = this.$scope.name;
            this.switchStatus = this.$scope.switchStatus;
            var time = this.attributeFactory.getCrossTrainTime(0);
            this.startTime = time.startTime;
            this.endTime = time.endTime;
            this.searchParams.userId = this.userInfoCacheFactory.getCurrentUserId();
            this.searchParams.startTime = this.startTime;
            this.searchParams.endTime = this.endTime;
            this.searchParams.ArObjectID.push(this.$scope.ID);
            this.getServerMessage(this.searchParams);
            this.PersonAlarmParams.startTime = this.startTime;
            this.PersonAlarmParams.endTime = this.endTime;
            this.PersonAlarmParams.arrCameraId = [this.$scope.ID];
            this.PersonAlarmParams.pageSize = 10;
            this.PersonAlarmParams.currentPage = 1;
            this.PersonAlarmParams.alarmType = 'EFENCE';
            this.getServerAlarmMessage(this.PersonAlarmParams);
            var self = this;
            this.$scope.$on('clickCollect', function (a, item, index) {
                self.clickCollect(item);
            });
            this.$scope.$on('clickSurveillance', function (a, item, index) {
                self.clickSurveillance(item);
            });
            this.$scope.$on('clickAnalysis', function (a, item, index) {
                self.clickAnalysis(item);
            });
        }
        EfResourcePointMoreController.prototype.initPagagion = function (type) {
            if (type == 1) {
                var pageParams = new page_params_1.default();
                pageParams.pageSize = 10;
                pageParams.currentPage = 1;
                pageParams.totalCount = this.dataListTotal;
                this.pageParams = pageParams;
            }
            if (type == 2) {
                var pageParams = new page_params_1.default();
                pageParams.pageSize = 10;
                pageParams.currentPage = 1;
                pageParams.totalCount = this.alarmdataListTotal;
                this.pageParamsAlarm = pageParams;
            }
        };
        EfResourcePointMoreController.prototype.changePage = function (num) {
            if (this.switchStatus) {
                this.pageParams.currentPage = num;
                this.searchParams.currentPage = num;
                this.getServerMessage(this.searchParams);
                return this.pageParams;
            }
            if (!this.switchStatus) {
                this.pageParamsAlarm.currentPage = num;
                this.PersonAlarmParams.currentPage = num;
                this.getServerAlarmMessage(this.PersonAlarmParams);
                return this.pageParamsAlarm;
            }
        };
        ;
        EfResourcePointMoreController.prototype.getServerMessage = function (searchParams) {
            var self = this;
            this.resourceRetrievalService.advancedSearchByEFence(searchParams)
                .then(function (res) {
                if ((res.code === 200) && (typeof res.data.EFENCE !== 'undefined') && (res.data.EFENCE.TotalCount > 0)) {
                    self.dataListTotal = res.data.EFENCE.TotalCount;
                    if (self.searchParams.isFirstSearch) {
                        self.initPagagion(1);
                    }
                    self.searchParams.isFirstSearch = false;
                    self.searchParams.taskId = res.data.EFENCE.TaskId;
                    self.renderDataList = res.data.EFENCE.Result;
                }
            });
        };
        EfResourcePointMoreController.prototype.getServerAlarmMessage = function (searchParams) {
            var self = this;
            this.analysisService.searchPersonAlarm(this.PersonAlarmParams).then(function (res) {
                if (res.code === 200) {
                    self.alarmdataListTotal = res.data.TotalCount;
                    for (var i = 0; i < res.data.Result.length; i++) {
                        var dataarr = res.data.Result[i].AlarmLog.Notes.split("_");
                        res.data.Result[i].AlarmLog.IMEI = dataarr[0];
                        res.data.Result[i].AlarmLog.IMSI = dataarr[1];
                    }
                    if (self.isSearchAlarmParams) {
                        self.initPagagion(2);
                    }
                    self.isSearchAlarmParams = false;
                    self.renderAlarmdataList = res.data.Result;
                }
            });
        };
        EfResourcePointMoreController.prototype.switchChange = function (status) {
            this.switchStatus = status;
        };
        EfResourcePointMoreController.prototype.changeTime = function () {
            var starttime = new Date(this.startTime.replace(/-/g, '.')).getTime(), endtime = new Date(this.endTime.replace(/-/g, '.')).getTime();
            if (starttime > endtime) {
                this.layerDec.warnInfo("开始时间不能大于结束时间！");
                return;
            }
            this.searchParams.isFirstSearch = true;
            this.searchParams.currentPage = 1;
            this.searchParams.startTime = this.startTime;
            this.searchParams.endTime = this.endTime;
            this.getServerMessage(this.searchParams);
            this.isSearchAlarmParams = true;
            this.PersonAlarmParams.currentPage = 1;
            this.PersonAlarmParams.startTime = this.startTime;
            this.PersonAlarmParams.endTime = this.endTime;
            this.getServerAlarmMessage(this.PersonAlarmParams);
        };
        EfResourcePointMoreController.prototype.closePopup = function () {
        };
        EfResourcePointMoreController.prototype.lookCollectDetail = function (actIndex) {
            var scope = this.$scope.$new();
            scope.index = "efResourceCollectDetail";
            scope.activeIndex = actIndex;
            scope.dataList = this.renderDataList;
            scope.name = this.name;
            if (this.index) {
                this.layer.close(this.index);
            }
            this.index = this.layer.open({
                content: efResourceCollectDetail,
                type: 1,
                skin: 'no-scroll',
                title: ['电子围栏详情', 'font-weight: bold;background-color: #F6F8FB;color: #606060;height: 40px;'],
                area: ['560px', '255px'],
                shade: 0,
                offset: ['200px', '700px'],
                scope: scope,
                end: function () {
                    scope.$destroy();
                }
            });
        };
        EfResourcePointMoreController.prototype.lookAlarmDetail = function (actIndex) {
            var scope = this.$scope.$new();
            scope.index = "efResourceAlarmDetail";
            scope.alarmdataList = this.renderAlarmdataList;
            scope.activeIndex = actIndex;
            if (this.index) {
                this.layer.close(this.index);
            }
            scope.name = this.name;
            this.index = this.layer.open({
                content: efResourceAlarmDetail,
                type: 1,
                skin: 'no-scroll',
                title: ['电子围栏报警详情', 'font-weight: bold;background-color: #F6F8FB;color: #606060;height: 40px;'],
                area: ['560px', '255px'],
                shade: 0,
                offset: ['200px', '700px'],
                scope: scope,
                end: function () {
                    scope.$destroy();
                }
            });
        };
        EfResourcePointMoreController.prototype.clickCollect = function (item) {
            var self = this, data = item.eFenceLog || item.AlarmLog;
            if (!item.collectStatus) {
                var params = {
                    json: JSON.stringify(data),
                    objectID: data.ID,
                    objectType: "EFENCE"
                };
                self.resourceRetrievalService.collectAddInfo(params)
                    .then(function (res) {
                    if (res) {
                    }
                });
            }
            else {
                var params = {
                    ids: data.ID
                };
                self.resourceRetrievalService.collectDeleteInfo(params)
                    .then(function (res) {
                    if (res) {
                    }
                });
            }
            item.collectStatus = !item.collectStatus;
        };
        EfResourcePointMoreController.prototype.clickSurveillance = function (item) {
            item.surveillanceStatus = !item.surveillanceStatus;
        };
        EfResourcePointMoreController.prototype.clickAnalysis = function (item) {
        };
        EfResourcePointMoreController.$inject = ['$scope', '$timeout', 'layer', 'resourceRetrievalService', 'userInfoCacheFactory', 'layerDec', 'analysisService'];
        return EfResourcePointMoreController;
    }());
    main_app_1.app.controller('efResourcePointMoreController', EfResourcePointMoreController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
