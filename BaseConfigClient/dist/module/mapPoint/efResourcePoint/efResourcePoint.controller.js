define(["require", "exports", "text!./efResourcePointMore.html", "../../common/app/main.app", "../../common/factory/attribute.factory", "../../../core/server/enum/SocketResultTypeEnum", "css!./style/efResourcePoint.css", "../../common/services/task.service", "./efResourcePointMore.controller", "../../common/services/analysis.service", "../../common/services/resourceRetrieval.service"], function (require, exports, efResourcePointMore, main_app_1, attribute_factory_1, SocketResultTypeEnum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Promise = require('es6-promise');
    var EFResourcePointController = (function () {
        function EFResourcePointController($scope, $timeout, mylayer, deviceSocketServer, userInfoCacheFactory, socketFactory, taskService, layer, resourceRetrievalService, analysisService) {
            var _this = this;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.mylayer = mylayer;
            this.deviceSocketServer = deviceSocketServer;
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.socketFactory = socketFactory;
            this.taskService = taskService;
            this.layer = layer;
            this.resourceRetrievalService = resourceRetrievalService;
            this.analysisService = analysisService;
            this.ShowAlarmStatus = false;
            this.dataList = [];
            this.alarmdataList = [];
            this.isSubcribeEFenceLog = false;
            this.isSubcribeAlarmLog = false;
            this.dataListTotal = 0;
            this.alarmdataListTotal = 0;
            this.searchParams = {
                currentPage: 1,
                keyWord: '',
                orderBy: {
                    isAsc: false,
                },
                pageSize: 10,
                taskId: '',
                startTime: '',
                endTime: '',
                ArObjectID: [],
                isFirstSearch: true,
                userId: '',
            };
            this.PersonAlarmParams = {};
            this.attributeFactory = new attribute_factory_1.AttributeFactory();
            this.deviceName = this.$scope.PointDeTail.Name;
            this.deviceInfo = this.$scope.PointDeTail;
            this.deviceId = this.$scope.PointDeTail.ID;
            var marker = this.$scope.marker;
            this.subscribeEleCollect();
            this.subscribeWifiAlarm();
            $scope.$on('$destroy', function () {
                _this.wifiCollectParam.isCancel = true;
                _this.wifiAlarmParam.isCancel = true;
                var self = _this;
                if (_this.isSubcribeEFenceLog) {
                    _this.deviceSocketServer.getWifiInfo(_this.wifiCollectParam).then(function (res) {
                        if (!!res) {
                            console.log("close EFenceLog sokit");
                            self.socketFactory.unSubscribe('SubcribeEFenceLog');
                            _this.isSubcribeEFenceLog = false;
                        }
                    });
                }
                if (_this.isSubcribeAlarmLog) {
                    _this.deviceSocketServer.getWifiInfo(_this.wifiAlarmParam).then(function (res) {
                        if (!!res) {
                            console.log("close EFenceAlaLog sokit");
                            self.socketFactory.unSubscribe('SubcribeAlarmLog');
                            _this.isSubcribeAlarmLog = false;
                        }
                    });
                }
            });
            var time = this.attributeFactory.getCrossTrainTime(0);
            this.startTime = time.startTime;
            this.endTime = time.endTime;
            this.searchParams.userId = this.userInfoCacheFactory.getCurrentUserId();
            this.searchParams.startTime = this.startTime;
            this.searchParams.endTime = this.endTime;
            this.searchParams.ArObjectID.push(this.deviceId);
            this.getServerMessage(this.searchParams);
            this.PersonAlarmParams.startTime = this.startTime;
            this.PersonAlarmParams.endTime = this.endTime;
            this.PersonAlarmParams.arrCameraId = [this.deviceId];
            this.PersonAlarmParams.pageSize = 10;
            this.PersonAlarmParams.currentPage = 1;
            this.PersonAlarmParams.alarmType = 'EFENCE';
            this.getServerAlarmMessage(this.PersonAlarmParams);
        }
        EFResourcePointController.prototype.getServerMessage = function (searchParams) {
            var self = this;
            this.resourceRetrievalService.advancedSearchByEFence(searchParams)
                .then(function (res) {
                if ((res.code === 200) && (typeof res.data.EFENCE !== 'undefined') && (res.data.EFENCE.TotalCount > 0)) {
                    self.dataListTotal = res.data.EFENCE.TotalCount;
                    var arr = [], data = res.data.EFENCE.Result;
                    for (var i = 0; i < data.length; i++) {
                        var obj = {};
                        obj.IMSI = data[i].eFenceLog.IMSI;
                        obj.IMEI = data[i].eFenceLog.IMEI;
                        obj.AcqTime = data[i].eFenceLog.AcqTime;
                        arr.push(obj);
                    }
                    self.dataList = arr;
                }
            });
        };
        EFResourcePointController.prototype.getServerAlarmMessage = function (searchParams) {
            var self = this;
            this.analysisService.searchPersonAlarm(this.PersonAlarmParams).then(function (res) {
                if (res.code === 200) {
                    self.alarmdataListTotal = res.data.TotalCount;
                    for (var i = 0; i < res.data.Result.length; i++) {
                        var dataarr = res.data.Result[i].AlarmLog.Notes.split("_");
                        res.data.Result[i].AlarmLog.IMEI = dataarr[0];
                        res.data.Result[i].AlarmLog.IMSI = dataarr[1];
                    }
                    self.alarmdataList = res.data.Result;
                }
            });
        };
        EFResourcePointController.prototype.subscribeEleCollect = function () {
            var _this = this;
            this.wifiCollectParam = {
                userID: this.userInfoCacheFactory.getCurrentUserId(),
                objectID: [this.deviceId],
                isCancel: false,
                socketType: SocketResultTypeEnum_1.SocketResultTypeEnum.SubscribeEFenceLog
            };
            this.deviceSocketServer.getWifiInfo(this.wifiCollectParam).then(function (res) {
                if (!!res) {
                    _this.isSubcribeEFenceLog = true;
                    _this.socketFactory.subscribe(SocketResultTypeEnum_1.SocketResultTypeEnum.SubscribeEFenceLog, function (data) {
                        _this.$timeout(function () {
                            _this.dataList = data.concat(_this.dataList);
                            _this.dataListTotal += data.length;
                            console.log('SubcribeEFenceLog', data, _this.dataList.length);
                        });
                    });
                }
            });
        };
        EFResourcePointController.prototype.subscribeWifiAlarm = function () {
            var _this = this;
            this.wifiAlarmParam = {
                userID: this.userInfoCacheFactory.getCurrentUserId(),
                objectID: [this.deviceId],
                isCancel: false,
                socketType: SocketResultTypeEnum_1.SocketResultTypeEnum.SubscribeAlarmLog,
                alarmType: SocketResultTypeEnum_1.AlarmType.Efence
            };
            this.deviceSocketServer.getWifiInfo(this.wifiAlarmParam).then(function (res) {
                if (!!res) {
                    _this.isSubcribeAlarmLog = true;
                    _this.socketFactory.subscribe(SocketResultTypeEnum_1.SocketResultTypeEnum.SubscribeAlarmLog, function (data) {
                        if (_this.deviceId != data[0].AlarmLog.ObjectID) {
                            return;
                        }
                        _this.$timeout(function () {
                            _this.alarmdataList = data.concat(_this.alarmdataList);
                            _this.alarmdataListTotal += data.length;
                        });
                    });
                }
            });
        };
        EFResourcePointController.prototype.showAlarm = function () {
            this.ShowAlarmStatus = !this.ShowAlarmStatus;
        };
        EFResourcePointController.prototype.lookMoreCollect = function () {
            var scope = this.$scope.$new();
            scope.index = "efResourcePointMore";
            scope.ID = this.deviceId;
            scope.switchStatus = true;
            scope.name = this.deviceName;
            this.layer.open({
                type: 1,
                skin: 'no-scroll',
                title: ['历史信息', 'font-weight: bold;background-color: #F6F8FB;color: #606060;height: 40px;'],
                area: ['955px', '535px'],
                content: efResourcePointMore,
                scope: scope,
                end: function () {
                    scope.$destroy();
                }
            });
        };
        EFResourcePointController.prototype.lookMoreAlarm = function () {
            var scope = this.$scope.$new();
            scope.index = "efResourcePointMore";
            scope.switchStatus = false;
            scope.ID = this.deviceId;
            scope.name = this.deviceName;
            this.layer.open({
                type: 1,
                skin: 'no-scroll',
                title: ['历史信息', 'font-weight: bold;background-color: #F6F8FB;color: #606060;height: 40px;'],
                area: ['955px', '535px'],
                content: efResourcePointMore,
                scope: scope,
                end: function () {
                    scope.$destroy();
                }
            });
        };
        EFResourcePointController.prototype.mapWifiPopulClose = function () {
            console.log('exit efres popup');
        };
        EFResourcePointController.$inject = ['$scope', '$timeout', 'mylayer', 'deviceSocketServer', 'userInfoCacheFactory', 'socketFactory', 'taskService', 'layer', 'resourceRetrievalService', 'analysisService'];
        return EFResourcePointController;
    }());
    main_app_1.app.controller('efResourcePointController', EFResourcePointController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
