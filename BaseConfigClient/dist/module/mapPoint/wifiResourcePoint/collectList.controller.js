define(["require", "exports", "text!./tplCollectDetail.html", "text!./tplAlarmDetail.html", "../../common/app/main.app", "../../common/directive/page/page-params", "../../common/factory/attribute.factory", "../../common/Pagination", "css!./style/tplAlarmList.css", "./alarmDetail.controller", "css!./style/tplCollectList.css", "./collectDetail.controller", "../../common/services/resourceRetrieval.service", "../../common/factory/userinfo.cache.factory", "../../common/services/analysis.service"], function (require, exports, collectDetailHtml, alarmDetailHtml, main_app_1, page_params_1, attribute_factory_1, Pagination_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CollectListController = (function () {
        function CollectListController($scope, $timeout, layer, resourceRetrievalService, userInfoCacheFactory, layerDec, analysisService) {
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.layer = layer;
            this.resourceRetrievalService = resourceRetrievalService;
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.layerDec = layerDec;
            this.analysisService = analysisService;
            this.ShowAlarmStatus = false;
            this.renderDataList = [];
            this.searchParams = {
                currentPage: 1,
                keyWord: '',
                orderBy: {
                    isAsc: false,
                },
                pageSize: 10,
                isFirstSearch: true,
                taskId: '',
                startTime: '',
                endTime: '',
                ArObjectID: [],
                userId: ''
            };
            this.name = '';
            this.attributeFactory = new attribute_factory_1.AttributeFactory();
            this.showStatus = true;
            this.PersonAlarmParams = {};
            this.resultParams = new Pagination_1.PageParamsAndResult();
            this.alarmdataListTotal = 0;
            this.isSearchAlarmParams = true;
            this.showStatus = this.$scope.status;
            this.name = this.$scope.name;
            var time = this.attributeFactory.getCrossTrainTime(3);
            this.startTime = time.startTime;
            this.endTime = time.endTime;
            this.searchParams.userId = this.userInfoCacheFactory.getCurrentUserId();
            this.searchParams.startTime = this.startTime;
            this.searchParams.endTime = this.endTime;
            this.searchParams.ArObjectID.push(this.$scope.ID);
            this.getServerMessage(this.searchParams);
            this.PersonAlarmParams.startTime = this.startTime;
            this.PersonAlarmParams.endTime = this.endTime;
            this.PersonAlarmParams.arrCameraId = [this.$scope.ID];
            this.PersonAlarmParams.pageSize = 10;
            this.PersonAlarmParams.currentPage = 1;
            this.PersonAlarmParams.alarmType = 'WiFi';
            this.getServerAlarmMessage(this.PersonAlarmParams);
            var self = this;
            this.$scope.$on('clickCollect', function (a, item, index) {
                self.clickCollect(item);
            });
            this.$scope.$on('clickSurveillance', function (a, item, index) {
                self.clickSurveillance(item);
            });
            this.$scope.$on('clickAnalysis', function (a, item, index) {
                self.clickAnalysis(item);
            });
        }
        CollectListController.prototype.showCameraStatus = function (flag) {
            this.showStatus = flag;
        };
        CollectListController.prototype.initPagagion = function (type) {
            if (type == 1) {
                var pageParams = new page_params_1.default();
                pageParams.pageSize = 10;
                pageParams.currentPage = 1;
                pageParams.totalCount = this.dataListTotal;
                this.pageParams = pageParams;
            }
            if (type == 2) {
                var pageParams = new page_params_1.default();
                pageParams.pageSize = 10;
                pageParams.currentPage = 1;
                pageParams.totalCount = this.alarmdataListTotal;
                this.resultParams = pageParams;
            }
        };
        CollectListController.prototype.changeTime = function () {
            var starttime = new Date(this.startTime.replace(/-/g, '.')).getTime(), endtime = new Date(this.endTime.replace(/-/g, '.')).getTime();
            if (starttime > endtime) {
                this.layerDec.warnInfo("开始时间不能大于结束时间！");
                return;
            }
            this.searchParams.isFirstSearch = true;
            this.searchParams.startTime = this.startTime;
            this.searchParams.endTime = this.endTime;
            this.searchParams.currentPage = 1;
            this.getServerMessage(this.searchParams);
            this.PersonAlarmParams.startTime = this.startTime;
            this.PersonAlarmParams.endTime = this.endTime;
            this.isSearchAlarmParams = true;
            this.PersonAlarmParams.currentPage = 1;
            this.getServerAlarmMessage(this.PersonAlarmParams);
        };
        CollectListController.prototype.getServerMessage = function (searchParams) {
            var _this = this;
            this.resourceRetrievalService.advancedSearchByWifi(searchParams)
                .then(function (res) {
                if ((res.code === 200) && (typeof res.data.WiFi !== 'undefined') && (res.data.WiFi.TotalCount > 0)) {
                    _this.dataListTotal = res.data.WiFi.TotalCount;
                    if (_this.searchParams.isFirstSearch) {
                        _this.initPagagion(1);
                    }
                    _this.searchParams.isFirstSearch = false;
                    _this.searchParams.taskId = res.data.WiFi.TaskId;
                    _this.renderDataList = res.data.WiFi.Result;
                }
                else {
                }
            });
        };
        CollectListController.prototype.getServerAlarmMessage = function (searchParams) {
            var self = this;
            this.analysisService.searchPersonAlarm(this.PersonAlarmParams).then(function (res) {
                if (res.code === 200) {
                    self.alarmdataListTotal = res.data.TotalCount;
                    if (self.isSearchAlarmParams) {
                        self.initPagagion(2);
                    }
                    self.isSearchAlarmParams = false;
                    self.MockWifiAlarmList = res.data.Result;
                }
            });
        };
        CollectListController.prototype.changePage = function (num) {
            if (this.showStatus) {
                this.pageParams.currentPage = num;
                this.searchParams.currentPage = num;
                this.getServerMessage(this.searchParams);
                return this.pageParams;
            }
            else {
                this.resultParams.currentPage = num;
                this.PersonAlarmParams.currentPage = num;
                this.getServerAlarmMessage(this.PersonAlarmParams);
                return this.resultParams;
            }
        };
        ;
        CollectListController.prototype.closePopup = function () {
        };
        CollectListController.prototype.lookCollectDetail = function (actIndex) {
            var scope = this.$scope.$new();
            scope.index = "carcollectDetailHtml";
            scope.activeIndex = actIndex;
            scope.dataList = this.renderDataList;
            scope.name = this.name;
            if (this.index) {
                this.layer.close(this.index);
            }
            this.index = this.layer.open({
                content: collectDetailHtml,
                type: 1,
                skin: 'no-scroll',
                title: ['Wi-Fi详情', 'font-weight: bold;background-color: #F6F8FB;color: #606060;height: 40px;'],
                area: ['500px', '200px'],
                shade: 0,
                offset: ['200px', '700px'],
                scope: scope,
                end: function () {
                    scope.$destroy();
                }
            });
        };
        CollectListController.prototype.lookCollectDetailAlarm = function (actIndex) {
            var scope = this.$scope.$new();
            scope.activeIndex = actIndex;
            scope.dataList = this.MockWifiAlarmList;
            scope.name = this.name;
            scope.index = "alarmDetailHtml";
            if (this.index) {
                this.layer.close(this.index);
            }
            this.index = this.layer.open({
                content: alarmDetailHtml,
                type: 1,
                skin: 'no-scroll',
                title: ['Wi-Fi报警详情', 'font-weight: bold;background-color: #F6F8FB;color: #606060;height: 40px;'],
                area: ['500px', '260px'],
                shade: 0,
                offset: ['200px', '700px'],
                scope: scope,
                end: function () {
                    scope.$destroy();
                }
            });
        };
        CollectListController.prototype.clickCollect = function (item) {
            var self = this, data = item.wifiLog ? item.wifiLog : item.AlarmLog;
            if (!item.collectStatus) {
                var params = {
                    json: JSON.stringify(item),
                    objectID: item.wifiLog ? item.wifiLog.ID : item.AlarmLog.ID,
                    objectType: "WiFi"
                };
                self.resourceRetrievalService.collectAddInfo(params)
                    .then(function (res) {
                    if (res) {
                    }
                });
            }
            else {
                var params = {
                    ids: item.wifiLog ? item.wifiLog.ID : item.AlarmLog.ID,
                };
                self.resourceRetrievalService.collectDeleteInfo(params)
                    .then(function (res) {
                    if (res) {
                    }
                });
            }
            item.collectStatus = !item.collectStatus;
        };
        CollectListController.prototype.clickAnalysis = function (item) {
        };
        CollectListController.prototype.clickSurveillance = function (item) {
            item.surveillanceStatus = !item.surveillanceStatus;
        };
        CollectListController.$inject = ['$scope', '$timeout', 'layer', 'resourceRetrievalService', 'userInfoCacheFactory', 'layerDec', 'analysisService'];
        return CollectListController;
    }());
    main_app_1.app.controller('collectListController', CollectListController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
