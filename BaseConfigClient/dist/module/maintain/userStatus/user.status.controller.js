define(["require", "exports", "../../common/app/main.app", "../../common/Pagination", "../../common/directive/tree/tree-params", "../../../core/entity/maintainEnum", "../../common/portrait-tool", "../../common/services/maintain.service", "../../common/services/casecade.service", "../main/maintainFactory", "css!module/maintain/css/maintain-userStatus.css", "moment"], function (require, exports, main_app_1, Pagination_1, tree_params_1, maintainEnum_1, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UserStatusController = (function () {
        function UserStatusController($scope, maintainService, casCadeService, $timeout, maintainFactory) {
            this.$scope = $scope;
            this.maintainService = maintainService;
            this.casCadeService = casCadeService;
            this.$timeout = $timeout;
            this.maintainFactory = maintainFactory;
            this.PageParamsAndResult = new Pagination_1.PageParamsAndResult();
            this.Pagination = new Pagination_1.Pagination();
            this.PortraitTool = portrait_tool_1.default;
            this.userTotalCount = 0;
            this.areaName = "全部";
            this.tHeadList = [
                { field: "PersonName", title: "FDS_02_01_01" },
                { field: "AreaName", title: "FDS_02_00_02" },
                { field: "UnitName", title: "FDS_02_01_07" },
                { field: "UserType", title: "FDS_02_01_08" },
                { field: "LoginIp", title: "IP" },
                { field: "LastLoginTime", title: "FDS_02_01_09" },
                { field: "LookMoudel", title: "FDS_02_01_10" },
                { field: "IsOnline", title: "FDS_02_00_05" }
            ];
            this.tBodyList = [];
            this.getTableList();
            this.initTree();
            this.getTreeList();
        }
        UserStatusController.prototype.initTree = function () {
            var _this = this;
            this.areaTreeDataParams = new tree_params_1.TreeDataParams();
            this.areaTreeDataParams.treeId = 'areaTreeUser';
            this.areaTreeDataParams.isDefaultSelected = true;
            this.areaTreeDataParams.onClick = function (event, treeId, treeNode) {
                _this.areaId = treeNode.ID;
                _this.areaName = treeNode.Name;
                _this.isShowAreaTree = false;
                _this.$timeout(function () {
                    _this.$scope.$apply();
                });
            };
        };
        UserStatusController.prototype.getTreeList = function () {
            var that = this;
            that.casCadeService.findAreaList().then(complete);
            function complete(result) {
                that.$timeout(function () {
                    that.areaTreeDataParams.treeDatas = result.data;
                });
            }
        };
        UserStatusController.prototype.getTableList = function (casCadeSearchParams) {
            var that = this;
            var SearchParams;
            if (!casCadeSearchParams) {
                var Params = new maintainEnum_1.CasCadeSearchParams();
                Params.orderType = "ASC";
                Params.currentPage = 1;
                Params.pageSize = 10;
                SearchParams = Params;
            }
            else {
                SearchParams = casCadeSearchParams;
            }
            this.maintainService.getUserDataList(SearchParams).then(complete);
            function complete(res) {
                if (res && res.code === 200) {
                    var data = res.data ? res.data : [];
                    that.PageParamsAndResult.currentPage = SearchParams.currentPage;
                    that.PageParamsAndResult.totalCount = res.count;
                    that.PageParamsAndResult.pageSize = 10;
                    that.PageParamsAndResult.pageCount = Math.ceil(that.PageParamsAndResult.totalCount / that.PageParamsAndResult.pageSize);
                    that.PageParamsAndResult.data = data;
                    that.userTotalCount = data.TotalCount;
                }
            }
        };
        UserStatusController.prototype.changePage = function (num) {
            console.log(num);
            var casCadeSearchParams = new maintainEnum_1.CasCadeSearchParams();
            casCadeSearchParams.orderType = "ASC";
            casCadeSearchParams.currentPage = num;
            casCadeSearchParams.pageSize = 10;
            this.getTableList(casCadeSearchParams);
        };
        UserStatusController.prototype.searchUser = function () {
            var casCadeSearchParams = new maintainEnum_1.CasCadeSearchParams();
            casCadeSearchParams.startTime = this.handleStartTime;
            casCadeSearchParams.endTime = this.handleEndTime;
            casCadeSearchParams.areaName = this.areaId;
            casCadeSearchParams.userName = this.personNameInput;
            casCadeSearchParams.orderType = "ASC";
            casCadeSearchParams.currentPage = 1;
            casCadeSearchParams.pageSize = 10;
            this.getTableList(casCadeSearchParams);
        };
        UserStatusController.prototype.operatorExport = function () {
            var casCadeSearchParams = new maintainEnum_1.CasCadeSearchParams();
            casCadeSearchParams.orderType = "ASC";
            casCadeSearchParams.currentPage = 1;
            casCadeSearchParams.pageSize = 10;
            this.maintainFactory.exportTableXls("/pdp//netManagerCtrl/sysUser/export", casCadeSearchParams);
        };
        UserStatusController.$inject = ['$scope', 'maintainService', 'casCadeService', '$timeout', 'maintainFactory'];
        return UserStatusController;
    }());
    main_app_1.app.controller("userStatusController", UserStatusController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
