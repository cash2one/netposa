define(["require", "exports", "../../common/app/main.app", "../../common/Pagination", "../../common/directive/tree/tree-params", "css!module/maintain/css/maintain-deviceStatus.css", "angular", "css!module/maintain/css/maintain-operateLog.css", "../../common/services/maintain.service", "../../common/services/casecade.service", "../main/maintainFactory"], function (require, exports, main_app_1, Pagination_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deviceArray = [
        { type: "IvsServer", name: "服务器", status: true },
        { type: "Camera", name: "摄像机", status: false },
        { type: "WiFi", name: "WiFi", status: false },
        { type: "RmpGate", name: "卡口", status: false },
        { type: "EFENCE", name: "电子围栏", status: false }
    ];
    exports.checkLine = [
        { type: "1", name: "在线" },
        { type: "0", name: "离线" }
    ];
    var CasCadeSearchParams = (function () {
        function CasCadeSearchParams() {
            this.orderType = 'ASC';
            this.pageSize = 10;
            this.currentPage = 1;
        }
        return CasCadeSearchParams;
    }());
    exports.CasCadeSearchParams = CasCadeSearchParams;
    var deviceStatusInfo = (function () {
        function deviceStatusInfo() {
        }
        return deviceStatusInfo;
    }());
    exports.deviceStatusInfo = deviceStatusInfo;
    var runOperateLogData = (function () {
        function runOperateLogData() {
        }
        return runOperateLogData;
    }());
    exports.runOperateLogData = runOperateLogData;
    var fieldTitle = (function () {
        function fieldTitle() {
        }
        return fieldTitle;
    }());
    exports.fieldTitle = fieldTitle;
    exports.tHeadList = [
        { field: "Name", title: "FDS_02_02_20", isShow: true },
        { field: "AreaName", title: "FDS_02_02_21", isShow: true },
        { field: "Type", title: "FDS_02_02_22", isShow: true },
        { field: "CameraType", title: "FDS_02_02_27", isShow: true },
        { field: "AlarmNum", title: "FDS_02_02_28", isShow: true },
        { field: "IpAddress", title: "FDS_02_02_23", isShow: true },
        { field: "Status", title: "FDS_02_02_24", isShow: true }
    ];
    var DeviceStatusController = (function () {
        function DeviceStatusController($scope, $timeout, maintainService, layer, casCadeService, maintainFactory) {
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.maintainService = maintainService;
            this.layer = layer;
            this.casCadeService = casCadeService;
            this.maintainFactory = maintainFactory;
            this.deviceArray = exports.deviceArray;
            this.pageParams = new Pagination_1.PageParamsAndResult();
            this.Pagination = new Pagination_1.Pagination();
            this.pageType = 'IvsServer';
            this.tHeadList = this.switchTableTitle(this.pageType);
            this.areaName = "全部";
            this.operatorModules = exports.deviceArray;
            this.checkLine = exports.checkLine;
            this.getTableList(null, 'IvsServer');
            this.initTree();
            this.getTreeList();
        }
        DeviceStatusController.prototype.initTree = function () {
            var _this = this;
            var that = this;
            this.areaTreeDataParams = new tree_params_1.TreeDataParams();
            this.areaTreeDataParams.treeId = 'areaTreeUser';
            this.areaTreeDataParams.isDefaultSelected = true;
            this.areaTreeDataParams.onClick = function (event, treeId, treeNode) {
                _this.areaId = treeNode.ID;
                _this.areaName = treeNode.Name;
                _this.isShowAreaTree = false;
                _this.$timeout(function () {
                    _this.$scope.$apply();
                });
            };
        };
        DeviceStatusController.prototype.getTreeList = function () {
            var that = this;
            that.casCadeService.findAreaList().then(complete);
            function complete(result) {
                that.$timeout(function () {
                    that.areaTreeDataParams.treeDatas = result.data;
                });
            }
        };
        ;
        DeviceStatusController.prototype.getTableTitle = function (arrTitle) {
            var newArrTitle = [];
            exports.tHeadList.forEach(function (item) {
                arrTitle.forEach(function (itemTit) {
                    if (item.field == itemTit) {
                        newArrTitle.push(item);
                    }
                });
            });
            return newArrTitle;
        };
        ;
        DeviceStatusController.prototype.switchTableTitle = function (deviceName) {
            switch (deviceName) {
                case "IvsServer": {
                    return this.getTableTitle(['Name', 'AreaName', 'Type', 'IpAddress', 'Status']);
                }
                case "Camera": {
                    return this.getTableTitle(['Name', 'AreaName', 'CameraType', 'AlarmNum', 'IpAddress', 'Status']);
                }
                default: {
                    return this.getTableTitle(['Name', 'AreaName', 'AlarmNum', 'IpAddress', 'Status']);
                }
            }
        };
        DeviceStatusController.prototype.switchDevicePage = function (deviceName) {
            if (deviceName) {
                this.pageType = deviceName;
                this.tHeadList = this.switchTableTitle(deviceName);
                for (var i = 0; i < this.deviceArray.length; i++) {
                    if (this.deviceArray[i].type == deviceName) {
                        this.deviceArray[i].status = true;
                        this.getTableList(null, deviceName);
                    }
                    else {
                        this.deviceArray[i].status = false;
                    }
                }
            }
        };
        DeviceStatusController.prototype.getTableList = function (Params, deviceName) {
            var that = this;
            var casCadeSearchParams = new CasCadeSearchParams();
            casCadeSearchParams.searchType = deviceName;
            that.pageParams = new Pagination_1.PageParamsAndResult();
            that.pageParams.data = [];
            if (Params) {
                casCadeSearchParams = Params;
            }
            if (casCadeSearchParams.searchType === "IvsServer") {
                casCadeSearchParams.searchType = "";
                this.maintainService.getServerStatusModule(casCadeSearchParams).then(complete);
            }
            else {
                this.maintainService.getDevicesStatusModule(casCadeSearchParams).then(complete);
            }
            function complete(res) {
                console.log(res);
                if (res && res.data && res.data.Result) {
                    var ResultData = res.data;
                    if (Array.isArray(ResultData.Result)) {
                        that.pageParams.totalCount = ResultData.TotalCount;
                        that.pageParams.currentPage = Params ? Params.currentPage : 1;
                        that.pageParams.pageSize = 10;
                        that.pageParams.pageCount = Math.ceil(that.pageParams.totalCount / that.pageParams.pageSize);
                        that.pageParams.data = ResultData.Result;
                        console.log(that.pageParams);
                    }
                }
                else {
                    that.pageParams.data = [];
                    that.layer.msg("\u6CA1\u6709\u6570\u636E");
                }
            }
        };
        DeviceStatusController.prototype.changePage = function (num) {
            var casCadeSearchParams = new CasCadeSearchParams();
            casCadeSearchParams.currentPage = num;
            casCadeSearchParams.searchType = this.pageType;
            casCadeSearchParams.name = this.keyValueInput;
            casCadeSearchParams.type = this.operatorModule;
            casCadeSearchParams.status = this.operatorStatus;
            this.getTableList(casCadeSearchParams, this.pageType);
        };
        DeviceStatusController.prototype.operatorSearch = function () {
            var casCadeSearchParams = new CasCadeSearchParams();
            casCadeSearchParams.currentPage = 1;
            casCadeSearchParams.searchType = this.pageType;
            casCadeSearchParams.name = this.keyValueInput;
            casCadeSearchParams.type = this.operatorModule;
            casCadeSearchParams.status = this.operatorStatus;
            casCadeSearchParams.areaID = this.areaId;
            this.getTableList(casCadeSearchParams, this.pageType);
        };
        DeviceStatusController.prototype.operatorExport = function () {
            var casCadeSearchParams = new CasCadeSearchParams();
            casCadeSearchParams.currentPage = 1;
            casCadeSearchParams.searchType = this.pageType;
            casCadeSearchParams.name = this.keyValueInput;
            casCadeSearchParams.type = this.operatorModule;
            casCadeSearchParams.status = this.operatorStatus;
            casCadeSearchParams.areaID = this.areaId;
            casCadeSearchParams.ifExport = true;
            this.getTableListExport(casCadeSearchParams, this.pageType);
        };
        DeviceStatusController.prototype.getTableListExport = function (Params, deviceName) {
            var that = this;
            var casCadeSearchParams = new CasCadeSearchParams();
            casCadeSearchParams.searchType = deviceName;
            if (Params) {
                casCadeSearchParams = Params;
            }
            if (casCadeSearchParams.searchType === "IvsServer") {
                delete casCadeSearchParams.searchType;
                that.maintainFactory.exportTableXls("/pdp/netManagerCtrl/serverState/export", casCadeSearchParams);
            }
            else {
                that.maintainFactory.exportTableXls("/pdp/netManagerCtrl/deviceState/export", casCadeSearchParams);
            }
        };
        DeviceStatusController.$inject = ['$scope', '$timeout', 'maintainService', 'layer', 'casCadeService', 'maintainFactory'];
        return DeviceStatusController;
    }());
    main_app_1.app.controller("deviceStatusController", DeviceStatusController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
