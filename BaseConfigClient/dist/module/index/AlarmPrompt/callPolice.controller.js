define(["require", "exports", "../../common/app/main.app", "jquery", "css!./style/callPoint.css"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var callPoliceController = (function () {
        function callPoliceController($scope, $timeout, $interval, mylayer) {
            var _this = this;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.$interval = $interval;
            this.mylayer = mylayer;
            this.percent = 90.0;
            this.radius = 60;
            this.lineWidth = 8;
            this.fontSize = 30;
            this.process = this.percent;
            this.leftImg = '../../../images/mock/alarm/alarm1.png';
            this.rightImg = '../../../images/mock/alarm/alarm2.png';
            this.layerId = $scope.ID;
            window.setTimeout(function () {
                _this.canvas = document.getElementById("canvas");
                _this.ctx = _this.canvas.getContext('2d');
                _this.circleX = _this.canvas.width / 2;
                _this.circleY = _this.canvas.height / 2;
                _this.loading();
            });
        }
        callPoliceController.prototype.circle = function (cx, cy, r, canvas) {
            var ctx = canvas;
            ctx.beginPath();
            ctx.moveTo(cx + r, cy);
            ctx.lineWidth = this.lineWidth;
            ctx.strokeStyle = '#383d45';
            ctx.arc(cx, cy, r, 0, Math.PI * 2);
            ctx.closePath();
            ctx.stroke();
        };
        callPoliceController.prototype.exit = function () {
            this.mylayer.close(this.layerId);
        };
        callPoliceController.prototype.sector = function (cx, cy, r, startAngle, endAngle) {
            var ctx = this.ctx;
            ctx.beginPath();
            ctx.lineWidth = this.lineWidth;
            var linGrad = ctx.createLinearGradient(70, 40, 70, 100);
            linGrad.addColorStop(0.0, '#fcaa01');
            linGrad.addColorStop(1.0, '#1cbe6f');
            ctx.strokeStyle = linGrad;
            ctx.lineCap = 'round';
            ctx.arc(cx, cy, r, startAngle * (Math.PI / 180.0) + (Math.PI * 1.5), endAngle * (Math.PI / 180.0) + (Math.PI * 1.5));
            ctx.stroke();
        };
        callPoliceController.prototype.loading = function () {
            var ctx = this.ctx;
            ctx.clearRect(0, 0, this.circleX * 2, this.circleY * 2);
            ctx.font = this.fontSize + 'px April';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillStyle = '#fff';
            ctx.fillText(parseFloat(this.process).toFixed(0) + '%', this.circleX, this.circleY);
            this.circle(this.circleX, this.circleY, this.radius, ctx);
            this.sector(this.circleX, this.circleY, this.radius, 0, this.process / 100 * 360);
        };
        callPoliceController.$inject = ['$scope', '$timeout', '$interval', 'mylayer'];
        return callPoliceController;
    }());
    main_app_1.app.controller('callPoliceController', callPoliceController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
