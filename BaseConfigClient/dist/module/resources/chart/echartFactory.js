define(["require", "exports", "text!./enlarge.html", "../../common/app/main.app", "../../../core/server/enum/DataType", "echarts", "lodash", "../../../core/entity/Resource", "./enlarge.controller", "../../common/services/resource.service", "moment"], function (require, exports, enlargeHtml, main_app_1, DataType_1, echarts, _, Resource_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var dataSelectResult = (function () {
        function dataSelectResult() {
        }
        return dataSelectResult;
    }());
    exports.dataSelectResult = dataSelectResult;
    var EchartFactory = (function () {
        function EchartFactory($timeout, layer, i18nFactory, $q, resourceService) {
            this.$timeout = $timeout;
            this.layer = layer;
            this.i18nFactory = i18nFactory;
            this.$q = $q;
            this.resourceService = resourceService;
            this.charts = {};
            this.currentDataType = DataType_1.DateType.ALL;
            this.currentDeviceType = Resource_1.ResourcePageType.ALL.value;
        }
        EchartFactory.prototype.init = function (config) {
            var dom = document.getElementById(config.name);
            var path = config.path;
            var ele = echarts.init(dom);
            ele.showLoading('default', {
                text: "图表数据正在努力加载..."
            });
            this.resourceService.getEchartConfig(path).then(function (data) {
                ele.setOption(data);
            });
        };
        EchartFactory.prototype.initChart = function (option) {
            if (!!option && !!option.config && !_.isEmpty(echarts)) {
                var domString = "#" + option.name + " canvas";
                var canvas = $(domString)[0];
                var dom = document.getElementById(option.name);
                if (this.charts[option.name] && canvas) {
                    this.charts[option.name].setOption(option.config);
                }
                else if (dom) {
                    this.charts[option.name] = echarts.init(dom);
                    this.charts[option.name].setOption(option.config);
                }
            }
        };
        EchartFactory.prototype.getInitRequire = function () {
            var getChartDataParams = {
                start: moment().subtract(30, 'days').format('YYYY-MM-DD 00:00:00'),
                end: moment().format('YYYY-MM-DD hh:mm:ss'),
                type: this.currentDeviceType,
                timeStamp: this.currentDataType
            };
            return this.resourceService.getChartData(getChartDataParams);
        };
        EchartFactory.prototype.sliceArray = function (data) {
            var newArray = [];
            data.forEach(function (item, index) {
                if (typeof (item) == "number" || typeof (item) == "string") {
                    newArray = data.slice(-5);
                }
                else {
                    newArray[index] = item.slice(-5);
                }
            });
            return newArray;
        };
        EchartFactory.prototype.getUnitNum = function (data) {
            var _loop_1 = function (i) {
                var everyData = data[i];
                switch (typeof (everyData)) {
                    case "number": {
                        var result = [];
                        result = data.map(function (item) {
                            return Math.ceil(item / 10000);
                        });
                        return { value: result };
                    }
                    case "object": {
                        var result_1 = [];
                        data.forEach(function (item, idx) {
                            result_1[idx] = item.map(function (itm) {
                                return Math.ceil(itm / 10000);
                            });
                        });
                        return { value: result_1 };
                    }
                }
            };
            for (var i = 0; i < data.length; i++) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        };
        EchartFactory.prototype.enlarge = function ($scope, name, data) {
            var that = this;
            var scope = $scope.$new();
            var enlargeKey = data;
            scope.enlarge = enlargeKey;
            if (enlargeKey) {
                var skin = 'enlargeEchart no-scroll';
                var area = ["1200px", "700px"];
                if (enlargeKey.name == "AllRankList") {
                    scope.enlarge = angular.copy(data);
                    area = ["751px", "511px"];
                }
                this.currentLayerIndex = this.layer.open({
                    type: 1,
                    skin: skin,
                    content: enlargeHtml,
                    scope: scope,
                    title: [enlargeKey.title, "background-color:#2D87F9;color:#fff"],
                    area: area,
                    end: function () {
                        scope.$destroy();
                    }
                });
            }
            else {
                this.layer.msg("暂无数据");
            }
        };
        EchartFactory.$inject = ['$timeout', 'layer', 'i18nFactory', '$q', 'resourceService'];
        return EchartFactory;
    }());
    main_app_1.app.service('echartFactory', EchartFactory);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
