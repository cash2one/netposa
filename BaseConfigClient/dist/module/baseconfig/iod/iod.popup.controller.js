define(["require", "exports", "../../common/app/main.app", "../../../core/entity/ex/IodEx", "../../../core/entity/Area", "../../common/directive/tree/tree-params", "../../common/services/iod.service", "angular"], function (require, exports, main_app_1, IodEx_1, Area_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IodTypesEnum = [
        { key: 'WiFi', value: 'Wi-Fi' },
        { key: 'EFENCE', value: '电子围栏' },
        { key: 'RmpGate', value: '卡口' }
    ];
    var IodPopupController = (function () {
        function IodPopupController($scope, $rootScope, iodService, $q, $timeout) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.iodService = iodService;
            this.$q = $q;
            this.$timeout = $timeout;
            this.Area = new Area_1.Area();
            this.Iod = new IodEx_1.IodEx();
            this.treeParams = new tree_params_1.TreeDataParams();
            this.isRootIod = false;
            this.IodTypes = IodTypesEnum;
            this.curdType = this.$scope.curdType;
            this.proxyList = this.$scope.proxyListForIod;
            this.$scope.$on("$destroy", function () {
                console.warn("销毁了弹出框");
            });
            this.initParams();
        }
        IodPopupController.prototype.changeTypeSelect = function () {
            var _this = this;
            angular.forEach(this.proxyList, function (val) {
                if (!_this.Iod.ProxyServerID) {
                    _this.Iod.Port = null;
                }
                if (val.ID === _this.Iod.ProxyServerID) {
                    _this.Iod.Port = val.Port;
                }
            });
        };
        IodPopupController.prototype.initParams = function () {
            var _this = this;
            if (this.curdType === 'add' && this.$scope.currentArea) {
                this.Iod.ParentArea = {};
                this.Iod.ParentArea.ID = this.$scope.currentArea.ID;
                this.Iod.ParentArea.Name = this.$scope.currentArea.Name;
                this.$timeout(function () {
                    _this.treeParams.treeDatas = _this.$scope.treeDatas;
                    _this.treeParams.defaultSelectTreeId = _this.$scope.currentArea.ID;
                });
            }
            else if (this.curdType === 'edit' && this.$scope.currentIod) {
                this.Iod = this.$scope.currentIod;
                this.$timeout(function () {
                    _this.treeParams.treeDatas = _this.$scope.treeDatas;
                    _this.Iod.AreaID ? (_this.treeParams.defaultSelectTreeId = _this.Iod.AreaID) : (_this.isRootIod = true);
                });
            }
            this.treeParams.treeId = "iodPopupIodTree";
            this.treeParams.isDefaultSelected = true;
            this.treeParams.onClick = function (event, treeId, treeNode) {
                console.log(treeNode);
                _this.$timeout(function () {
                    _this.Iod.ParentArea = treeNode;
                    _this.isShowIodTree = false;
                });
            };
        };
        IodPopupController.prototype.submitAction = function () {
            if (this.curdType === 'add') {
                this.saveIod();
            }
            else {
                this.editIod();
            }
        };
        IodPopupController.prototype.saveIod = function () {
            var _this = this;
            if (!this.validate())
                return;
            this.iodService.save(this.Iod).then(function (res) {
                if (res.code === 200) {
                    return null;
                }
                else {
                    return _this.$q.reject(res.code);
                }
            }).then(function () {
                _this.cancelIodPopup(true);
            });
        };
        IodPopupController.prototype.editIod = function () {
            var _this = this;
            if (!this.validate())
                return;
            this.iodService.edit(this.Iod).then(function (res) {
                console.log("editIod complete", res);
                if (res.code === 200) {
                    return null;
                }
                else {
                    return _this.$q.reject(res.code);
                }
            }).then(function () {
                _this.cancelIodPopup(true);
            });
        };
        IodPopupController.prototype.validate = function () {
            var result = true;
            if (!this.Iod.Code) {
                result = false;
            }
            else if (!this.Iod.Name) {
                result = false;
            }
            else if (!this.Iod.IpAddress) {
                result = false;
            }
            else if (!this.Iod.Port) {
                result = false;
            }
            return result;
        };
        IodPopupController.prototype.cancelIodPopup = function (refresh) {
            this.$rootScope.$broadcast('iod.closePopup', refresh);
        };
        IodPopupController.$inject = ['$scope', '$rootScope', 'iodService', '$q', '$timeout'];
        return IodPopupController;
    }());
    main_app_1.app
        .controller('iodPopupController', IodPopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
