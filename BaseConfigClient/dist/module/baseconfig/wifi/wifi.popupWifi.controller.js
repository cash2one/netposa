define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../../core/enum/TreeType", "../../../core/enum/ObjectType", "../../common/directive/tree/tree.directive.service", "../../common/services/connectTree.service", "../../common/factory/layerMsg.factory"], function (require, exports, main_app_1, tree_params_1, TreeType_1, ObjectType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DevicePopupWifiController = (function () {
        function DevicePopupWifiController($scope, $timeout, wifiService, treeService, connectTreeService, layerDec) {
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.wifiService = wifiService;
            this.treeService = treeService;
            this.connectTreeService = connectTreeService;
            this.layerDec = layerDec;
            this.cacheChangeNodes = {};
            this.type = $scope.type;
            this.rightSelectTreeNodeId = null;
            this.initTreeParams();
            this.getLeftTreeData();
            this.getRightTreeData();
        }
        DevicePopupWifiController.prototype.initTreeParams = function () {
            var _this = this;
            this.leftTreeParams = new tree_params_1.TreeDataParams(true);
            this.leftTreeParams.treeId = "devicePopupLeftTree";
            this.leftTreeParams.isShowIcon = true;
            this.leftTreeParams.isShowLine = false;
            this.leftTreeParams.isSimpleData = true;
            this.leftTreeParams.checkEnable = false;
            this.leftTreeParams.isSingleSelect = false;
            this.leftTreeParams.editEnable = true;
            this.leftTreeParams.showRemoveBtn = false;
            this.leftTreeParams.showRenameBtn = false;
            this.leftTreeParams.beforeDrop = beforeDropRule;
            this.leftTreeParams.beforeDrag = beforeDragRule;
            if (this.type === TreeType_1.TreeType.lamp.value) {
                this.leftTreeParams.addDiyDom = function (treeId, treeNode) {
                    _this.treeService.addDiyDomIsConfiStatus(treeId, treeNode);
                };
            }
            this.rightTreeParams = new tree_params_1.TreeDataParams(true);
            this.rightTreeParams.treeId = "devicePopupRightTree";
            this.rightTreeParams.isShowIcon = true;
            this.rightTreeParams.isShowLine = false;
            this.rightTreeParams.isSimpleData = true;
            this.rightTreeParams.checkEnable = false;
            this.rightTreeParams.isSingleSelect = false;
            this.rightTreeParams.editEnable = true;
            this.rightTreeParams.showRemoveBtn = false;
            this.rightTreeParams.showRenameBtn = false;
            this.rightTreeParams.beforeDrop = beforeDropRule;
            this.rightTreeParams.beforeDrag = beforeDragRule;
            var _self = this;
            function beforeDropRule(treeId, treeNodes, targetNode) {
                if (treeId == _self.leftTreeParams.treeId) {
                    return false;
                }
                if (_self.type === TreeType_1.TreeType.lamp.value && targetNode.treeType !== TreeType_1.TreeType.lamp.value) {
                    return false;
                }
                if (_self.type === TreeType_1.TreeType.area.value && targetNode.treeType !== TreeType_1.TreeType.area.value) {
                    return false;
                }
                var newNodeList = [];
                var updateNodeList = [];
                treeNodes.forEach(function (item) {
                    item.ParentID = targetNode.ID;
                    item.isConfigLamp = true;
                    var node = _self.treeService.getNodeByParam(treeId, 'ID', item.ID);
                    if (node) {
                        updateNodeList.push(item);
                    }
                    else {
                        newNodeList.push(item);
                    }
                });
                if (updateNodeList.length > 0) {
                    _self.$timeout(function () {
                        _self.treeService.removeNodes(treeId, updateNodeList);
                        _self.treeService.addNodes(treeId, updateNodeList, targetNode);
                    });
                }
                if (newNodeList.length > 0) {
                    _self.treeService.addNodes(treeId, newNodeList, targetNode);
                }
                if (_self.type === TreeType_1.TreeType.lamp.value) {
                    _self.updateTreeDiyDom(treeId, treeNodes);
                }
                _self.changeNodesParentID(treeNodes, targetNode.ID);
                return false;
            }
            function beforeDragRule(treeId, treeNodes) {
                var flag = true;
                if (treeNodes && treeNodes.length > 0) {
                    var i = void 0, len = void 0, treeType = TreeType_1.TreeType.wifi.value;
                    for (i = 0, len = treeNodes.length; i < len; i++) {
                        if (treeNodes[i].treeType !== treeType) {
                            flag = false;
                            break;
                        }
                    }
                }
                else {
                    flag = false;
                }
                return flag;
            }
        };
        DevicePopupWifiController.prototype.updateTreeDiyDom = function (treeId, treeNodes) {
            var _this = this;
            this.$timeout(function () {
                treeNodes.forEach(function (item) {
                    _this.leftTreeParams.addDiyDom(treeId, item);
                });
            });
        };
        DevicePopupWifiController.prototype.changeNodesParentID = function (treeNodes, parentId) {
            if (!treeNodes || treeNodes.length <= 0)
                return;
            var i, len, temp, originParentId;
            for (i = 0, len = treeNodes.length; i < len; i++) {
                if (this.type === TreeType_1.TreeType.area.value) {
                    temp = treeNodes[i];
                    originParentId = temp.AreaID;
                    temp.ParentID = parentId;
                    temp.AreaID = parentId;
                }
                else if (this.type === TreeType_1.TreeType.lamp.value) {
                    temp = treeNodes[i];
                    if (!temp.JsonUserData.lampPost) {
                        var lampPost = {};
                        lampPost.ObjectId = parentId;
                        lampPost.ObjectType = ObjectType_1.ObjectType.LampPost.value;
                        lampPost.RelatedObjectId = temp.ID;
                        lampPost.RelatedObjectType = ObjectType_1.ObjectType.Wifi.value;
                        temp.JsonUserData.lampPost = lampPost;
                        originParentId = "";
                        temp.ParentID = parentId;
                    }
                    else {
                        originParentId = temp.JsonUserData.lampPost.ID;
                        temp.ParentID = parentId;
                        temp.JsonUserData.lampPost.ID = parentId;
                    }
                }
                this.addOrUpdateTreeChangeCache({ id: temp.ID, parentId: temp.ParentID, originParentId: originParentId, deviceReId: temp.JsonUserData.DeviceReId });
            }
        };
        DevicePopupWifiController.prototype.addOrUpdateTreeChangeCache = function (model) {
            if (this.cacheChangeNodes[model.id]) {
                this.cacheChangeNodes[model.id].parentId = model.parentId;
            }
            else {
                this.cacheChangeNodes[model.id] = model;
            }
        };
        DevicePopupWifiController.prototype.submit = function () {
            var _this = this;
            var key, temp, models = [], P;
            if (this.type === 'area') {
                for (key in this.cacheChangeNodes) {
                    temp = this.cacheChangeNodes[key];
                    models.push({ id: temp.id, areaId: temp.parentId });
                }
                if (models.length > 0) {
                    P = this.wifiService.updateWifiAreaID(models);
                }
                else {
                    this.layerDec.warnInfo("没有选择任何区域");
                    this.cancel(false);
                }
            }
            else {
                for (key in this.cacheChangeNodes) {
                    temp = this.cacheChangeNodes[key];
                    models.push({ id: temp.id, lampId: temp.parentId, deviceReId: temp.deviceReId });
                }
                if (models.length > 0) {
                    P = this.wifiService.updateWifiLampID(models);
                }
                else {
                    this.layerDec.warnInfo("没有选择任何立杆");
                    this.cancel(false);
                }
            }
            if (P) {
                P.then(function (res) {
                    if (res && res.code === 200) {
                        _this.cancel(true);
                    }
                    else {
                        console.error("wifiService.updateRmpGateAreaID error", res);
                    }
                });
            }
        };
        DevicePopupWifiController.prototype.cancel = function (flag) {
            this.$scope.$emit('device.closePopup', flag);
        };
        DevicePopupWifiController.prototype.getLeftTreeData = function () {
            var _this = this;
            this.wifiService.findAll().then(function (res) {
                _this.$timeout(function () {
                    _this.leftTreeParams.treeDatas = res;
                });
            });
        };
        DevicePopupWifiController.prototype.getRightTreeData = function () {
            var _this = this;
            var P;
            if (this.type === 'lamp') {
                P = this.connectTreeService.findLampTreeWithWifi();
            }
            else {
                P = this.connectTreeService.findAreaWithWifi();
            }
            P.then(function (datas) {
                _this.$timeout(function () {
                    _this.rightTreeParams.treeDatas = datas;
                });
            });
        };
        DevicePopupWifiController.$inject = ['$scope', '$timeout', 'wifiService', 'treeDirectiveService', 'connectTreeService', 'layerDec'];
        return DevicePopupWifiController;
    }());
    main_app_1.app.controller("baseConfigDevicePopupWifi", DevicePopupWifiController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
