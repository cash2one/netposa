define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../common/services/area.service"], function (require, exports, main_app_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AreaPopupController = (function () {
        function AreaPopupController($scope, $rootScope, areaService, $q, $timeout) {
            $scope.$on("$destroy", function () {
                console.error("销毁了弹出框");
            });
            var vm = this;
            vm.curdType = $scope.curdType;
            vm.Area = {};
            vm.treeParams = new tree_params_1.TreeDataParams();
            vm.treeParams.treeId = "areaPopupAreaTree";
            vm.treeParams.isDefaultSelected = true;
            vm.treeParams.onClick = treeSelectNode;
            if (vm.curdType === 'add') {
                vm.Area.ParentArea = {};
                vm.Area.ParentArea.ID = $scope.currentArea.ID;
                vm.Area.ParentArea.Name = $scope.currentArea.Name;
                vm.submit = saveArea;
                areaService.findListTree().then(function (datas) {
                    $timeout(function () {
                        vm.treeParams.treeDatas = datas;
                        vm.treeParams.defaultSelectTreeId = vm.Area.ParentArea.ID;
                    });
                });
            }
            else if (vm.curdType === 'edit') {
                vm.submit = editArea;
                console.log($scope.currentArea);
                $q.all([areaService.get($scope.currentArea.ID), areaService.findListTree()])
                    .then(function (res) {
                    var r0 = res[0];
                    var r1 = res[1];
                    if (r0.code !== 200) {
                        return $q.reject(r0.code);
                    }
                    $timeout(function () {
                        if (r0.data) {
                            vm.Area = r0.data;
                            console.log(vm.Area);
                            if (vm.Area.ParentID == null) {
                                vm.isRootArea = true;
                            }
                            else {
                                vm.treeParams.treeDatas = r1;
                                if (vm.Area && vm.Area.ParentArea) {
                                    vm.treeParams.defaultSelectTreeId = vm.Area.ParentArea.ID;
                                }
                            }
                        }
                    });
                });
            }
            vm.cancel = cancelAreaPopup;
            function treeSelectNode(event, treeId, treeNode) {
                $timeout(function () {
                    vm.Area.ParentArea = treeNode;
                    vm.isShowAreaTree = false;
                });
            }
            function saveArea() {
                if (!validate())
                    return;
                areaService.save(vm.Area).then(complete).then(closePopup);
                function complete(res) {
                    console.log(res);
                    if (res.code === 200) {
                        return null;
                    }
                    else {
                        return $q.reject(res.code);
                    }
                }
                function closePopup() {
                    $rootScope.$broadcast('area.closePopup', true);
                }
            }
            function editArea() {
                if (!validate())
                    return;
                areaService.edit(vm.Area).then(complete).then(closePopup);
                function complete(res) {
                    console.log("editArea complete", res);
                    if (res.code === 200) {
                        return null;
                    }
                    else {
                        return $q.reject(res.code);
                    }
                }
                function closePopup() {
                    $rootScope.$broadcast('area.closePopup', true);
                }
            }
            function validate() {
                var result = true;
                if (!vm.Area.Code) {
                    result = false;
                }
                else if (!vm.Area.Name) {
                    result = false;
                }
                return result;
            }
            function cancelAreaPopup() {
                $rootScope.$broadcast('area.closePopup');
            }
        }
        AreaPopupController.$inject = ['$scope', '$rootScope', 'areaService', '$q', '$timeout'];
        return AreaPopupController;
    }());
    main_app_1.app
        .controller('areaPopupController', AreaPopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
