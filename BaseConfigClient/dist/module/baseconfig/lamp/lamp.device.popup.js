define(["require", "exports", "../../common/app/main.app", "../../../core/enum/LayerType", "../../../core/enum/ObjectType", "../../common/app/main.app", "../../common/factory/layerMsg.factory"], function (require, exports, main_app_1, LayerType_1, ObjectType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DevicePopupController = (function () {
        function DevicePopupController($scope, $rootScope, lampService, layerDec) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.lampService = lampService;
            this.layerDec = layerDec;
            this.currentEx = {};
            $scope.$on("$destroy", function () {
                console.error("销毁了弹出框");
            });
            this.tHeadDevice = [
                { field: "DeviceName", title: "DP_CONFIG_COMMON_03" },
                { field: "DeviceType", title: "DP_CONFIG_COMMON_88" },
                { field: "DeviceArea", title: "DP_CONFIG_COMMON_09" },
                { field: "bottoms", title: "DP_CONFIG_COMMON_15" }
            ];
            this.currentLamp = $scope.currentLamp;
            this.tBodyDevice = $scope.currentLamp.JsonUserData.Divices;
            console.log(this.tBodyDevice);
            if ($scope.currentLamp.JsonUserData.Point) {
                try {
                    this.currentEx = JSON.parse($scope.currentLamp.JsonUserData.Point.Ext);
                }
                catch (e) {
                    console.log('Ext is not found');
                }
            }
        }
        DevicePopupController.prototype.lampPositon = function (data) {
            var _this = this;
            console.log(data);
            var that = this;
            that.lampService.findSystemPointById(data.ID).then(function (res) {
                if (res && res.data) {
                    var systemPoint = {};
                    systemPoint.ObjectID = _this.currentLamp.ID;
                    systemPoint.LayerType = LayerType_1.LayerType.LampPost.value;
                    systemPoint.ObjectType = ObjectType_1.ObjectType.LampPost.value;
                    systemPoint.Ext = JSON.stringify({ deviceName: data.Name, deviceID: data.ID });
                    systemPoint.Lat = res.data.Lat;
                    systemPoint.Lon = res.data.Lon;
                    that.lampService.updataLampSystemPoint(systemPoint).then(function (res) {
                        if (res && res.data) {
                            that.layerDec.successInfo("\u66F4\u65B0" + _this.currentLamp.Name + "\u5750\u6807\u6210\u529F");
                        }
                        else {
                            that.layerDec.failInfo("\u66F4\u65B0" + _this.currentLamp.Name + "\u5750\u6807\u5931\u8D25");
                        }
                    });
                }
                else {
                    that.layerDec.warnInfo("\u672A\u627E\u5230" + data.Name + "\u7684\u8BBE\u5907\u5750\u6807");
                }
            });
        };
        DevicePopupController.prototype.submit = function () {
            this.$rootScope.$broadcast('lampDevice.closePopup', true);
        };
        DevicePopupController.prototype.deleteLampAndDeviceRalation = function (data) {
            var _this = this;
            var that = this;
            var relation = {};
            relation.ObjectId = this.currentLamp.ID;
            relation.RelatedObjectId = data.ID;
            this.lampService.deleteLampAndDeviceRelation(relation).then(function (res) {
                if (res && res.data) {
                    console.log(_this.tBodyDevice);
                    console.log(data);
                    that.layerDec.successInfo("\u5220\u9664\u5173\u8054\u8BBE\u5907" + data.Name + "\u6210\u529F");
                }
                else {
                    that.layerDec.failInfo("\u5220\u9664\u5173\u8054\u8BBE\u5907" + data.Name + "\u5931\u8D25");
                }
            });
        };
        DevicePopupController.$inject = ['$scope',
            '$rootScope',
            'lampService',
            'layerDec'];
        return DevicePopupController;
    }());
    main_app_1.app.controller('DevicePopupController', DevicePopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
