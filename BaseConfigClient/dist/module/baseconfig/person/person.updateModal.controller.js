define(["require", "exports", "../../common/app/main.app", "../../../core/entity/ex/PersonEx", "../../common/directive/tree/tree-params", "../../common/portrait-tool", "../../../core/enum/UserLevelEnum", "../../../core/server/enum/GenderType", "../../../core/server/enum/UserType", "../../common/services/area.service", "../../common/services/unit.service", "../../common/services/role.service", "angular"], function (require, exports, main_app_1, PersonEx_1, tree_params_1, portrait_tool_1, UserLevelEnum_1, GenderType_1, UserType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PersonUpdateModalController = (function () {
        function PersonUpdateModalController($scope, $timeout, personService, areaService, unitService, roleService, layer) {
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.personService = personService;
            this.areaService = areaService;
            this.unitService = unitService;
            this.roleService = roleService;
            this.layer = layer;
            this.isUpdate = false;
            this.userLevelList = [];
            this.genderTypeList = [];
            this.userTypeList = [];
            for (var key in UserLevelEnum_1.UserLevelEnum) {
                this.userLevelList.push(UserLevelEnum_1.UserLevelEnum[key]);
            }
            this.getRoleList();
            var vm = this;
            vm.currentModel = vm.$scope.updateData || {};
            console.log('获取数据', vm.currentModel);
            vm.isUpdate = vm.$scope.isUpdate;
            var currentSelectAreaId = vm.$scope.currentSelectAreaId;
            var currentSelectUnitId = vm.$scope.currentSelectUnitId;
            vm.areaTreeDatas = new tree_params_1.TreeDataParams(true);
            vm.areaTreeDatas.treeId = 'modalArea';
            vm.areaTreeDatas.onClick = treeSelectNode;
            vm.unitTreeDatas = new tree_params_1.TreeDataParams(true);
            vm.unitTreeDatas.treeId = 'modalUnit';
            vm.unitTreeDatas.onClick = treeSelectNode;
            vm.areaViewModel = {};
            vm.unitViewModel = {};
            if (!vm.currentModel.UserModel) {
                vm.currentModel.UserModel = {};
            }
            if (vm.isUpdate) {
                if (vm.currentModel) {
                    vm.areaTreeDatas.isDefaultSelected = true;
                    vm.areaTreeDatas.defaultSelectTreeId = vm.currentModel.AreaID;
                    vm.unitTreeDatas.isDefaultSelected = true;
                    vm.unitTreeDatas.defaultSelectTreeId = vm.currentModel.UnitID;
                }
                else {
                    console.error("未获取到修改的人员信息参数");
                }
            }
            else {
                vm.currentModel = new PersonEx_1.PersonEx();
                vm.areaTreeDatas.isDefaultSelected = true;
                vm.areaTreeDatas.defaultSelectTreeId = currentSelectAreaId;
                vm.currentModel.UnitID = currentSelectUnitId;
                vm.unitTreeDatas.isDefaultSelected = true;
                vm.unitTreeDatas.defaultSelectTreeId = vm.currentModel.UnitID;
                vm.currentModel.UserModel = {};
                vm.currentModel.UserModel.IsDisable = true;
            }
            vm.genderTypeList = [];
            for (var k in GenderType_1.GenderType) {
                vm.genderTypeList.push(GenderType_1.GenderType[k]);
            }
            vm.userTypeList = [];
            for (var k in UserType_1.UserType) {
                vm.userTypeList.push(UserType_1.UserType[k]);
            }
            $scope.$on("$destroy", function () {
                console.log("销毁了弹出框");
            });
            vm.getAreaTreeList();
            function treeSelectNode(event, treeId, treeNode) {
                if (treeId == 'modalArea') {
                    vm.areaViewModel.Name = treeNode.Name;
                    vm.unitViewModel.Name = null;
                    vm.currentModel.AreaID = treeNode.ID;
                    vm.currentModel.UnitID = null;
                    vm.$timeout(function () {
                        vm.areaTreeDatas.isShow = false;
                    });
                    vm.getUnitTreeList(treeNode.ID);
                }
                else if (treeId == 'modalUnit') {
                    vm.$timeout(function () {
                        vm.unitViewModel.Name = treeNode.Name;
                        vm.currentModel.UnitID = treeNode.ID;
                        vm.currentModel.AreaID = treeNode.AreaID;
                        vm.unitTreeDatas.isShow = false;
                    });
                }
            }
        }
        PersonUpdateModalController.prototype.getRoleList = function () {
            var _this = this;
            var req_params = {
                keyword: ""
            };
            this.finishedRoleList = false;
            this.roleService.findListByParams(req_params).then(function (resp) {
                if (resp.code == 200) {
                    _this.roleList = resp.data;
                }
                _this.finishedRoleList = true;
            });
        };
        ;
        PersonUpdateModalController.prototype.clickRoleList = function () {
            if (!this.roleList) {
                if (this.finishedRoleList) {
                    this.getRoleList();
                }
            }
        };
        PersonUpdateModalController.prototype.commitSaveOrUpdate = function () {
            var _this = this;
            if (!this.currentModel.UserModel.StartTimeValid || this.currentModel.UserModel.StartTimeValid == "") {
                this.currentModel.UserModel.StartTimeValid = portrait_tool_1.default.formatDate(new Date(), "yyyy-MM-dd hh:mm:ss");
            }
            if (!this.currentModel.UserModel.EndTimeValid || this.currentModel.UserModel.EndTimeValid == "") {
                this.currentModel.UserModel.EndTimeValid = "9999-12-31 00:00:00";
            }
            var checkStr = this.validateParams(this.currentModel);
            if (checkStr) {
                return;
            }
            else {
            }
            console.log('提交数据', this.currentModel);
            if (this.currentModel.ID) {
                if (this.viewPwd) {
                    this.currentModel.UserModel.Pwd = portrait_tool_1.default.md5(this.viewPwd);
                }
                this.personService.update(this.currentModel).then(function (resp) {
                    if (resp.code == 200) {
                        _this.closeUpdateModel(true);
                    }
                });
            }
            else {
                if (!this.viewPwd) {
                    return this.layer.msg('请输入密码！');
                }
                this.currentModel.UserModel.Pwd = portrait_tool_1.default.md5(this.viewPwd);
                this.personService.save(this.currentModel).then(function (resp) {
                    if (resp.code == 200) {
                        _this.closeUpdateModel(true);
                    }
                });
            }
        };
        ;
        PersonUpdateModalController.prototype.closeUpdateModel = function (isCommit) {
            this.$scope.$emit('closeUserUpdateModel', { isCommit: isCommit });
        };
        PersonUpdateModalController.prototype.changeTypeSelect = function () {
            console.log(this.currentModel);
        };
        PersonUpdateModalController.prototype.testChangeToggle = function (status) {
            this.currentModel.IsDisable = status;
        };
        PersonUpdateModalController.prototype.validateParams = function (model) {
            return '';
        };
        PersonUpdateModalController.prototype.getAreaTreeList = function (treeReqTree) {
            var _this = this;
            this.areaService.findListTree(treeReqTree).then(function (resp) {
                _this.$timeout(function () {
                    _this.areaTreeDatas.treeDatas = resp;
                });
            });
        };
        ;
        PersonUpdateModalController.prototype.changeIsShowAreaTree = function () {
            this.unitTreeDatas.isShow = false;
            this.areaTreeDatas.isShow = !this.areaTreeDatas.isShow;
        };
        ;
        PersonUpdateModalController.prototype.getUnitTreeList = function (areaId) {
            var _this = this;
            this.unitService.findUnitTreeList(areaId).then(function (datas) {
                _this.$timeout(function () {
                    _this.unitTreeDatas.treeDatas = datas;
                });
            });
        };
        ;
        PersonUpdateModalController.prototype.changeIsShowUnitTree = function () {
            this.areaTreeDatas.isShow = false;
            this.unitTreeDatas.isShow = !this.unitTreeDatas.isShow;
        };
        ;
        PersonUpdateModalController.$inject = ['$scope', '$timeout', 'personService', 'areaService', 'unitService', 'roleService', 'layer'];
        return PersonUpdateModalController;
    }());
    main_app_1.app
        .controller('personUpdateModalController', PersonUpdateModalController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvYmFzZWNvbmZpZy9wZXJzb24vcGVyc29uLnVwZGF0ZU1vZGFsLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBaUNBO1FBb0JJLHFDQUNZLE1BQVcsRUFDWCxRQUFhLEVBQ2IsYUFBNkIsRUFDN0IsV0FBeUIsRUFDekIsV0FBeUIsRUFDekIsV0FBeUIsRUFDekIsS0FBUztZQU5ULFdBQU0sR0FBTixNQUFNLENBQUs7WUFDWCxhQUFRLEdBQVIsUUFBUSxDQUFLO1lBQ2Isa0JBQWEsR0FBYixhQUFhLENBQWdCO1lBQzdCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1lBQ3pCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1lBQ3pCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1lBQ3pCLFVBQUssR0FBTCxLQUFLLENBQUk7WUF6QnJCLGFBQVEsR0FBWSxLQUFLLENBQUM7WUFXMUIsa0JBQWEsR0FBZ0IsRUFBRSxDQUFDO1lBQ2hDLG1CQUFjLEdBQTJDLEVBQUUsQ0FBQztZQUM1RCxpQkFBWSxHQUEyQyxFQUFFLENBQUM7WUFnQnRELEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLDZCQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyw2QkFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDaEQsQ0FBQztZQUVELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUVuQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFFZCxFQUFFLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQWMsQ0FBQztZQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDcEMsRUFBRSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLG1CQUFtQixH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IjoibW9kdWxlL2Jhc2Vjb25maWcvcGVyc29uL3BlcnNvbi51cGRhdGVNb2RhbC5jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJUGVyc29uU2VydmljZX0gZnJvbSBcIi4uLy4uL2NvbW1vbi9zZXJ2aWNlcy9wZXJzb24uc2VydmljZVwiO1xyXG5cclxuaW1wb3J0IHthcHB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBwL21haW4uYXBwXCI7XHJcblxyXG5pbXBvcnQgJy4uLy4uL2NvbW1vbi9zZXJ2aWNlcy9hcmVhLnNlcnZpY2UnO1xyXG5pbXBvcnQgJy4uLy4uL2NvbW1vbi9zZXJ2aWNlcy91bml0LnNlcnZpY2UnO1xyXG5pbXBvcnQgJy4uLy4uL2NvbW1vbi9zZXJ2aWNlcy9yb2xlLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0ICdhbmd1bGFyJztcclxuXHJcbmltcG9ydCB7UGVyc29uRXh9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2VudGl0eS9leC9QZXJzb25FeFwiO1xyXG5pbXBvcnQge0FyZWFFeH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZW50aXR5L2V4L0FyZWFFeFwiO1xyXG5pbXBvcnQge1VuaXR9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2VudGl0eS9Vbml0XCI7XHJcbmltcG9ydCB7SUFyZWFTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vY29tbW9uL3NlcnZpY2VzL2FyZWEuc2VydmljZVwiO1xyXG5pbXBvcnQge0lVbml0U2VydmljZX0gZnJvbSBcIi4uLy4uL2NvbW1vbi9zZXJ2aWNlcy91bml0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHtJVHJlZURhdGFQYXJhbXMsIFRyZWVEYXRhUGFyYW1zfSBmcm9tIFwiLi4vLi4vY29tbW9uL2RpcmVjdGl2ZS90cmVlL3RyZWUtcGFyYW1zXCI7XHJcbmltcG9ydCB7VHJlZVBhcmFtc30gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcGFyYW1zL3RyZWUvVHJlZVBhcmFtc1wiO1xyXG5pbXBvcnQge1VzZXJ9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2VudGl0eS9Vc2VyXCI7XHJcbmltcG9ydCB7VXNlckV4fSBmcm9tIFwiLi4vLi4vLi4vY29yZS9lbnRpdHkvZXgvVXNlckV4XCI7XHJcblxyXG5pbXBvcnQge0lSb2xlU2VydmljZX0gZnJvbSBcIi4uLy4uL2NvbW1vbi9zZXJ2aWNlcy9yb2xlLnNlcnZpY2VcIjtcclxuXHJcbmltcG9ydCBQb3J0cmFpdFRvb2wgZnJvbSBcIi4uLy4uL2NvbW1vbi9wb3J0cmFpdC10b29sXCI7XHJcbmltcG9ydCB7RW51bX0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZW51bS9FbnVtXCI7XHJcbmltcG9ydCB7VXNlckxldmVsRW51bX0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZW51bS9Vc2VyTGV2ZWxFbnVtXCI7XHJcbmltcG9ydCBSb2xlIGZyb20gXCIuLi8uLi8uLi9jb3JlL2VudGl0eS9Sb2xlXCI7XHJcbmltcG9ydCB7UmVzcG9uc2VSZXN1bHR9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3BhcmFtcy9yZXN1bHQvUmVzcG9uc2VSZXN1bHRcIjtcclxuaW1wb3J0IHtHZW5kZXJUeXBlfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9zZXJ2ZXIvZW51bS9HZW5kZXJUeXBlXCI7XHJcbmltcG9ydCB7VXNlclR5cGV9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3NlcnZlci9lbnVtL1VzZXJUeXBlXCI7XHJcblxyXG5kZWNsYXJlIGxldCB3aW5kb3c6IGFueTtcclxuZGVjbGFyZSBsZXQgYW5ndWxhcjogYW55O1xyXG5cclxuY2xhc3MgUGVyc29uVXBkYXRlTW9kYWxDb250cm9sbGVyIHtcclxuICAgIHN0YXRpYyAkaW5qZWN0ID0gWyckc2NvcGUnLCAnJHRpbWVvdXQnLCAncGVyc29uU2VydmljZScsICdhcmVhU2VydmljZScsICd1bml0U2VydmljZScsICdyb2xlU2VydmljZScsJ2xheWVyJ107XHJcbiAgICBpc1VwZGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGN1cnJlbnRNb2RlbDogUGVyc29uRXg7XHJcblxyXG4gICAgYXJlYVRyZWVEYXRhczogSVRyZWVEYXRhUGFyYW1zPEFyZWFFeD47XHJcbiAgICB1bml0VHJlZURhdGFzOiBJVHJlZURhdGFQYXJhbXM8VW5pdD47XHJcbiAgICAvLyDlsZXnpLrnmoTooYzmlL/ljLrln5/lkozlrp7pmYXkv53lrZjnmoTooYzmlL/ljLrln5/kuI3lkIwsIOivpuaDheeci2RvY1xyXG4gICAgYXJlYVZpZXdNb2RlbDogQXJlYUV4O1xyXG4gICAgdW5pdFZpZXdNb2RlbDogVW5pdDtcclxuXHJcbiAgICB2aWV3UHdkOiBzdHJpbmc7XHJcbiAgICB1c2VyTGV2ZWxMaXN0OiBBcnJheTxFbnVtPiA9IFtdO1xyXG4gICAgZ2VuZGVyVHlwZUxpc3Q6IEFycmF5PHsgdmFsdWU6IHN0cmluZywgdGV4dDogc3RyaW5nIH0+ID0gW107XHJcbiAgICB1c2VyVHlwZUxpc3Q6IEFycmF5PHsgdmFsdWU6IHN0cmluZywgdGV4dDogc3RyaW5nIH0+ID0gW107XHJcbiAgICAvL+inkuiJsuWIl+ihqFxyXG4gICAgcm9sZUxpc3Q6IEFycmF5PFJvbGU+O1xyXG4gICAgZmluaXNoZWRSb2xlTGlzdDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlICRzY29wZTogYW55LFxyXG4gICAgICAgIHByaXZhdGUgJHRpbWVvdXQ6IGFueSxcclxuICAgICAgICBwcml2YXRlIHBlcnNvblNlcnZpY2U6IElQZXJzb25TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgYXJlYVNlcnZpY2U6IElBcmVhU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHVuaXRTZXJ2aWNlOiBJVW5pdFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSByb2xlU2VydmljZTogSVJvbGVTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbGF5ZXI6YW55XHJcbiAgICApIHtcclxuXHJcbiAgICAgICAgLy8g5Yid5aeL5YyWIOexu+Wei+mAieaLqVxyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBVc2VyTGV2ZWxFbnVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlckxldmVsTGlzdC5wdXNoKFVzZXJMZXZlbEVudW1ba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWIneWni+WMliDop5LoibLnsbvlnovpgInmi6lcclxuICAgICAgICB0aGlzLmdldFJvbGVMaXN0KCk7XHJcblxyXG4gICAgICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLmN1cnJlbnRNb2RlbCA9IHZtLiRzY29wZS51cGRhdGVEYXRhIHx8IHt9IGFzIFBlcnNvbkV4O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfojrflj5bmlbDmja4nLHZtLmN1cnJlbnRNb2RlbCk7XHJcbiAgICAgICAgdm0uaXNVcGRhdGUgPSB2bS4kc2NvcGUuaXNVcGRhdGU7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRTZWxlY3RBcmVhSWQgPSB2bS4kc2NvcGUuY3VycmVudFNlbGVjdEFyZWFJZDsgLy8g5Lyg5p2l55qE6KGM5pS/5Yy65Z+faWRcclxuICAgICAgICBsZXQgY3VycmVudFNlbGVjdFVuaXRJZCA9IHZtLiRzY29wZS5jdXJyZW50U2VsZWN0VW5pdElkOyAvLyDkvKDmnaXnmoTooYzmlL/ljZXkvY1pZFxyXG5cclxuICAgICAgICAvL+WIneWni+WMliBhcmVhIOagkeaVsOaNrlxyXG4gICAgICAgIHZtLmFyZWFUcmVlRGF0YXMgPSBuZXcgVHJlZURhdGFQYXJhbXM8QXJlYUV4Pih0cnVlKTtcclxuICAgICAgICB2bS5hcmVhVHJlZURhdGFzLnRyZWVJZCA9ICdtb2RhbEFyZWEnO1xyXG4gICAgICAgIHZtLmFyZWFUcmVlRGF0YXMub25DbGljayA9IHRyZWVTZWxlY3ROb2RlO1xyXG5cclxuICAgICAgICAvL+WIneWni+WMliB1bml0IOagkeaVsOaNrlxyXG4gICAgICAgIHZtLnVuaXRUcmVlRGF0YXMgPSBuZXcgVHJlZURhdGFQYXJhbXM8VW5pdD4odHJ1ZSk7XHJcbiAgICAgICAgdm0udW5pdFRyZWVEYXRhcy50cmVlSWQgPSAnbW9kYWxVbml0JztcclxuICAgICAgICB2bS51bml0VHJlZURhdGFzLm9uQ2xpY2sgPSB0cmVlU2VsZWN0Tm9kZTtcclxuXHJcbiAgICAgICAgdm0uYXJlYVZpZXdNb2RlbCA9IHt9IGFzIEFyZWFFeDtcclxuICAgICAgICB2bS51bml0Vmlld01vZGVsID0ge30gYXMgVW5pdDtcclxuICAgICAgICBpZiAoIXZtLmN1cnJlbnRNb2RlbC5Vc2VyTW9kZWwpIHtcclxuICAgICAgICAgICAgdm0uY3VycmVudE1vZGVsLlVzZXJNb2RlbCA9IHt9IGFzIFVzZXJFeDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2bS5pc1VwZGF0ZSkgeyAvLyDkv67mlLlcclxuICAgICAgICAgICAgaWYgKHZtLmN1cnJlbnRNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYXJlYVRyZWVEYXRhcy5pc0RlZmF1bHRTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2bS5hcmVhVHJlZURhdGFzLmRlZmF1bHRTZWxlY3RUcmVlSWQgPSB2bS5jdXJyZW50TW9kZWwuQXJlYUlEO1xyXG5cclxuICAgICAgICAgICAgICAgIHZtLnVuaXRUcmVlRGF0YXMuaXNEZWZhdWx0U2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdm0udW5pdFRyZWVEYXRhcy5kZWZhdWx0U2VsZWN0VHJlZUlkID0gdm0uY3VycmVudE1vZGVsLlVuaXRJRDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLmnKrojrflj5bliLDkv67mlLnnmoTkurrlkZjkv6Hmga/lj4LmlbBcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgeyAvLyDlop7liqBcclxuICAgICAgICAgICAgdm0uY3VycmVudE1vZGVsID0gbmV3IFBlcnNvbkV4KCk7XHJcbiAgICAgICAgICAgIHZtLmFyZWFUcmVlRGF0YXMuaXNEZWZhdWx0U2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2bS5hcmVhVHJlZURhdGFzLmRlZmF1bHRTZWxlY3RUcmVlSWQgPSBjdXJyZW50U2VsZWN0QXJlYUlkO1xyXG5cclxuICAgICAgICAgICAgdm0uY3VycmVudE1vZGVsLlVuaXRJRCA9IGN1cnJlbnRTZWxlY3RVbml0SWQ7XHJcbiAgICAgICAgICAgIHZtLnVuaXRUcmVlRGF0YXMuaXNEZWZhdWx0U2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2bS51bml0VHJlZURhdGFzLmRlZmF1bHRTZWxlY3RUcmVlSWQgPSB2bS5jdXJyZW50TW9kZWwuVW5pdElEO1xyXG5cclxuICAgICAgICAgICAgdm0uY3VycmVudE1vZGVsLlVzZXJNb2RlbCA9IHt9IGFzIFVzZXJFeDtcclxuICAgICAgICAgICAgdm0uY3VycmVudE1vZGVsLlVzZXJNb2RlbC5Jc0Rpc2FibGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2bS5nZW5kZXJUeXBlTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGsgaW4gR2VuZGVyVHlwZSkge1xyXG4gICAgICAgICAgICB2bS5nZW5kZXJUeXBlTGlzdC5wdXNoKEdlbmRlclR5cGVba10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0udXNlclR5cGVMaXN0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgayBpbiBVc2VyVHlwZSkge1xyXG4gICAgICAgICAgICB2bS51c2VyVHlwZUxpc3QucHVzaChVc2VyVHlwZVtrXSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLiRvbihcIiRkZXN0cm95XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLplIDmr4HkuoblvLnlh7rmoYZcIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyDmraPlvI/lvIDlp4vmiafooYzku6PnoIFcclxuICAgICAgICB2bS5nZXRBcmVhVHJlZUxpc3QoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdHJlZVNlbGVjdE5vZGUoZXZlbnQ6IE1vdXNlRXZlbnQsIHRyZWVJZDogc3RyaW5nLCB0cmVlTm9kZTogQXJlYUV4ICYgVW5pdCkge1xyXG4gICAgICAgICAgICBpZiAodHJlZUlkID09ICdtb2RhbEFyZWEnKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hcmVhVmlld01vZGVsLk5hbWUgPSB0cmVlTm9kZS5OYW1lO1xyXG4gICAgICAgICAgICAgICAgdm0udW5pdFZpZXdNb2RlbC5OYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRNb2RlbC5BcmVhSUQgPSB0cmVlTm9kZS5JRDtcclxuICAgICAgICAgICAgICAgIC8vIOWboOS4uuS/ruaUueS6huihjOaUv+WMuuWfnywg5omA5Lul6ZyA6KaB5bCG6KGM5pS/5Y2V5L2N572u56m6LCDluKbooYzmlL/ljZXkvY3moJHnu5Pngrnph43mlrDmn6Xor6Llho3otYvlgLxcclxuICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRNb2RlbC5Vbml0SUQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOagueaNrmlk5p+l6K+i5Luj56CBXHJcbiAgICAgICAgICAgICAgICB2bS4kdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYXJlYVRyZWVEYXRhcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZtLmdldFVuaXRUcmVlTGlzdCh0cmVlTm9kZS5JRCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHJlZUlkID09ICdtb2RhbFVuaXQnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnVuaXRWaWV3TW9kZWwuTmFtZSA9IHRyZWVOb2RlLk5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uY3VycmVudE1vZGVsLlVuaXRJRCA9IHRyZWVOb2RlLklEO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRNb2RlbC5BcmVhSUQgPSB0cmVlTm9kZS5BcmVhSUQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLnVuaXRUcmVlRGF0YXMuaXNTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+inkuiJsuWIl+ihqOaTjeS9nFxyXG4gICAgZ2V0Um9sZUxpc3QoKSB7XHJcbiAgICAgICAgLypUT0RPIOiwg+eUqOiOt+WPluinkuiJsuWIl+ihqOS9v+eUqOinkuiJsueuoeeQhuaQnOe0ouWQjOS4gOaOpeWPoyovXHJcbiAgICAgICAgbGV0IHJlcV9wYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGtleXdvcmQ6IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmluaXNoZWRSb2xlTGlzdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucm9sZVNlcnZpY2UuZmluZExpc3RCeVBhcmFtcyhyZXFfcGFyYW1zKS50aGVuKChyZXNwOiBSZXNwb25zZVJlc3VsdDxBcnJheTxSb2xlPj4pID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlc3AuY29kZSA9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9sZUxpc3QgPSByZXNwLmRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5maW5pc2hlZFJvbGVMaXN0ID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy/ngrnlh7vop5LoibLliJfooajmnKrojrflj5bliJfooajmlbDmja4g6YeN5paw6I635Y+WXHJcbiAgICBjbGlja1JvbGVMaXN0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5yb2xlTGlzdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maW5pc2hlZFJvbGVMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFJvbGVMaXN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tbWl0U2F2ZU9yVXBkYXRlKCkge1xyXG4gICAgICAgIC8v5byA5aeL5pe26Ze05LiN5aGrICDpu5jorqTkuLrnjrDlnKhcclxuICAgICAgICBpZighdGhpcy5jdXJyZW50TW9kZWwuVXNlck1vZGVsLlN0YXJ0VGltZVZhbGlkfHx0aGlzLmN1cnJlbnRNb2RlbC5Vc2VyTW9kZWwuU3RhcnRUaW1lVmFsaWQgPT0gXCJcIil7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLlVzZXJNb2RlbC5TdGFydFRpbWVWYWxpZCA9IFBvcnRyYWl0VG9vbC5mb3JtYXREYXRlKG5ldyBEYXRlKCksXCJ5eXl5LU1NLWRkIGhoOm1tOnNzXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL+WmguaenOaXtumXtOS4jeWhqyAg6buY6K6k5Li65rC45LmF5pyJ5pWIXHJcbiAgICAgICAgaWYoIXRoaXMuY3VycmVudE1vZGVsLlVzZXJNb2RlbC5FbmRUaW1lVmFsaWR8fHRoaXMuY3VycmVudE1vZGVsLlVzZXJNb2RlbC5FbmRUaW1lVmFsaWQgPT0gXCJcIil7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLlVzZXJNb2RlbC5FbmRUaW1lVmFsaWQgPSBcIjk5OTktMTItMzEgMDA6MDA6MDBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY2hlY2tTdHIgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKHRoaXMuY3VycmVudE1vZGVsKTtcclxuICAgICAgICBpZiAoY2hlY2tTdHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygn5o+Q5Lqk5pWw5o2uJyx0aGlzLmN1cnJlbnRNb2RlbCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vZGVsLklEKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudmlld1B3ZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRNb2RlbC5Vc2VyTW9kZWwuUHdkID0gUG9ydHJhaXRUb29sLm1kNSh0aGlzLnZpZXdQd2QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGVyc29uU2VydmljZS51cGRhdGUodGhpcy5jdXJyZW50TW9kZWwpLnRoZW4oKHJlc3A6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3AuY29kZSA9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlVXBkYXRlTW9kZWwodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnZpZXdQd2Qpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXIubXNnKCfor7fovpPlhaXlr4bnoIHvvIEnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLlVzZXJNb2RlbC5Qd2QgPSBQb3J0cmFpdFRvb2wubWQ1KHRoaXMudmlld1B3ZCk7XHJcbiAgICAgICAgICAgIHRoaXMucGVyc29uU2VydmljZS5zYXZlKHRoaXMuY3VycmVudE1vZGVsKS50aGVuKChyZXNwOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwLmNvZGUgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZVVwZGF0ZU1vZGVsKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNsb3NlVXBkYXRlTW9kZWwoaXNDb21taXQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLiRzY29wZS4kZW1pdCgnY2xvc2VVc2VyVXBkYXRlTW9kZWwnLCB7aXNDb21taXQ6IGlzQ29tbWl0fSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlVHlwZVNlbGVjdCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbnRNb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/ngrnlh7vlvIDlhbPlm57osINcclxuICAgIHRlc3RDaGFuZ2VUb2dnbGUoc3RhdHVzOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwuSXNEaXNhYmxlID0gc3RhdHVzXHJcbiAgICB9XHJcblxyXG4gICAgLy8g5pWw5o2u6aqM6K+BXHJcbiAgICAvKlRPRE8g5pu05paw5re75YqgcGVyc29uIOacquWBmuWtl+autemqjOivgemZkOWItiovXHJcbiAgICB2YWxpZGF0ZVBhcmFtcyhtb2RlbDogUGVyc29uRXgpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYXJlYVRyZWVEYXRhc+aVsOaNruiOt+WPllxyXG4gICAgZ2V0QXJlYVRyZWVMaXN0KHRyZWVSZXFUcmVlPzogVHJlZVBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuYXJlYVNlcnZpY2UuZmluZExpc3RUcmVlKHRyZWVSZXFUcmVlKS50aGVuKChyZXNwOiBBcnJheTxBcmVhRXg+KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcmVhVHJlZURhdGFzLnRyZWVEYXRhcyA9IHJlc3A7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIOaUueWPmOaYvuekuiBhcmVhVHJlZVxyXG4gICAgY2hhbmdlSXNTaG93QXJlYVRyZWUoKSB7XHJcbiAgICAgICAgdGhpcy51bml0VHJlZURhdGFzLmlzU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXJlYVRyZWVEYXRhcy5pc1Nob3cgPSAhdGhpcy5hcmVhVHJlZURhdGFzLmlzU2hvdztcclxuICAgIH07XHJcblxyXG4gICAgLy8gdW5pdFRyZWVEYXRhc+aVsOaNruiOt+WPllxyXG4gICAgZ2V0VW5pdFRyZWVMaXN0KGFyZWFJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy51bml0U2VydmljZS5maW5kVW5pdFRyZWVMaXN0KGFyZWFJZCkudGhlbigoZGF0YXM6IEFycmF5PFVuaXQ+KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bml0VHJlZURhdGFzLnRyZWVEYXRhcyA9IGRhdGFzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyDmlLnlj5jmmL7npLogdW5pdFRyZWVcclxuICAgIGNoYW5nZUlzU2hvd1VuaXRUcmVlKCkge1xyXG4gICAgICAgIHRoaXMuYXJlYVRyZWVEYXRhcy5pc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnVuaXRUcmVlRGF0YXMuaXNTaG93ID0gIXRoaXMudW5pdFRyZWVEYXRhcy5pc1Nob3c7XHJcbiAgICB9O1xyXG5cclxuXHJcbn1cclxuXHJcbmFwcFxyXG4gICAgLmNvbnRyb2xsZXIoJ3BlcnNvblVwZGF0ZU1vZGFsQ29udHJvbGxlcicsIFBlcnNvblVwZGF0ZU1vZGFsQ29udHJvbGxlcik7XHJcbiJdfQ==
