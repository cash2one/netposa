define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../common/services/unit.service"], function (require, exports, main_app_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UnitPopupController = (function () {
        function UnitPopupController($scope, $rootScope, unitService, $q, $timeout, areaService) {
            $scope.$on("$destroy", function () {
            });
            var vm = this;
            vm.curdType = $scope.curdType;
            vm.Unit = {};
            vm.treeParams = new tree_params_1.TreeDataParams();
            vm.treeParams.treeId = "unitPopupAreaTree";
            vm.treeParams.onClick = treeSelectNode;
            if (vm.curdType === 'add' && $scope.currentArea) {
                vm.Unit.ParentArea = {};
                vm.Unit.ParentArea.ID = $scope.currentArea.ID;
                vm.Unit.ParentArea.Name = $scope.currentArea.Name;
                vm.submit = saveUnit;
                areaService.findListTree().then(function (datas) {
                    $timeout(function () {
                        vm.treeParams.treeDatas = datas;
                        vm.treeParams.defaultSelectTreeId = vm.Unit.ParentArea.ID;
                    });
                });
            }
            else if (vm.curdType === 'edit' && $scope.currentUnit) {
                vm.submit = editUnit;
                $q.all([unitService.get($scope.currentUnit.ID), areaService.findListTree()])
                    .then(function (res) {
                    console.error(res);
                    var r0 = res[0];
                    var r1 = res[1];
                    if (r0.code !== 200) {
                        return $q.reject(r0.code);
                    }
                    $timeout(function () {
                        if (r0.data) {
                            vm.Unit = r0.data;
                            vm.treeParams.treeDatas = r1;
                            if (vm.Unit && vm.Unit.ParentArea) {
                                vm.treeParams.defaultSelectTreeId = vm.Unit.ParentArea.ID;
                            }
                        }
                    });
                });
            }
            vm.cancel = cancelAreaPopup;
            function treeSelectNode(event, treeId, treeNode) {
                $timeout(function () {
                    vm.Unit.ParentArea = treeNode;
                    vm.isShowAreaTree = false;
                });
            }
            function saveUnit() {
                if (!validate())
                    return;
                unitService.save(vm.Unit).then(complete).then(closePopup);
                function complete(res) {
                    if (res.code === 200) {
                        return null;
                    }
                    else {
                        return $q.reject(res.code);
                    }
                }
                function closePopup() {
                    $rootScope.$broadcast('unit.closePopup', true);
                }
            }
            function editUnit() {
                if (!validate())
                    return;
                unitService.edit(vm.Unit).then(complete).then(closePopup);
                function complete(res) {
                    if (res.code === 200) {
                        return null;
                    }
                    else {
                        return $q.reject(res.code);
                    }
                }
                function closePopup() {
                    $rootScope.$broadcast('unit.closePopup', true);
                }
            }
            function validate() {
                var result = true;
                if (!vm.Unit.Code) {
                    result = false;
                }
                else if (!vm.Unit.Name) {
                    result = false;
                }
                return result;
            }
            function cancelAreaPopup() {
                $rootScope.$broadcast('unit.closePopup');
            }
        }
        UnitPopupController.$inject = ['$scope', '$rootScope', 'unitService', '$q', '$timeout', 'areaService'];
        return UnitPopupController;
    }());
    main_app_1.app
        .controller('unitPopupController', UnitPopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
