define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../common/directive/tree/tree.directive.service", "../../common/services/connectTree.service"], function (require, exports, main_app_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RmpGatePopupLampController = (function () {
        function RmpGatePopupLampController($scope, connectTreeService, $timeout, rmpgateService, treeService, layer) {
            this.$scope = $scope;
            this.connectTreeService = connectTreeService;
            this.$timeout = $timeout;
            this.rmpgateService = rmpgateService;
            this.treeService = treeService;
            this.layer = layer;
            this.IsCheck = false;
            this.deviceData = angular.copy(this.$scope.deviceData);
            this.rightSelectTreeNodeId = null;
            if (!this.deviceData.JsonUserData.lampPost) {
                this.deviceData.JsonUserData.lampPost = {};
            }
            this.initTreeParams();
            this.getTreeDatas();
        }
        RmpGatePopupLampController.prototype.initTreeParams = function () {
            var _this = this;
            this.rightTreeParams = new tree_params_1.TreeDataParams(true);
            this.rightTreeParams.treeId = "RmpgatePopupRightTree";
            this.rightTreeParams.isShowIcon = true;
            this.rightTreeParams.isShowLine = false;
            this.rightTreeParams.isSimpleData = true;
            this.rightTreeParams.checkEnable = false;
            this.rightTreeParams.isSingleSelect = false;
            this.rightTreeParams.editEnable = true;
            this.rightTreeParams.showRemoveBtn = false;
            this.rightTreeParams.showRenameBtn = false;
            this.rightTreeParams.onClick = (function (event, treeId, treeNode) {
                if (treeNode.treeType === "lamp") {
                    var lampPost = {
                        ID: treeNode.ID,
                        Name: treeNode.Name
                    };
                    _this.IsCheck = true;
                    _this.deviceData.JsonUserData.lampPost = lampPost;
                }
            });
        };
        RmpGatePopupLampController.prototype.getTreeDatas = function () {
            var _this = this;
            this.connectTreeService.findLampTreeWithRmpGate().then(function (res) {
                _this.$timeout(function () {
                    _this.rightTreeParams.treeDatas = res;
                });
            });
        };
        RmpGatePopupLampController.prototype.cancel = function (flag) {
            this.$scope.$emit('device.closePopup', flag);
        };
        RmpGatePopupLampController.prototype.submit = function () {
            var _this = this;
            if (!this.IsCheck) {
                this.layer.msg("没有选择任何立杆");
                this.cancel(false);
                return;
            }
            var models = [];
            models.push({ id: this.deviceData.ID, lampId: this.deviceData.JsonUserData.lampPost.ID, deviceReId: this.deviceData.JsonUserData.deviceReId });
            this.rmpgateService.updateRmpGateLampID(models).then(function (res) {
                if (res.data && res.code === 200) {
                    _this.layer.msg("更新成功");
                    _this.cancel(true);
                }
                else {
                    _this.layer.msg("更新失败");
                }
            });
        };
        RmpGatePopupLampController.$inject = ['$scope', 'connectTreeService', '$timeout', 'rmpgateService', 'treeDirectiveService', 'layer'];
        return RmpGatePopupLampController;
    }());
    main_app_1.app.controller("baseConfigRmpgatePopupLamp", RmpGatePopupLampController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
