define(["require", "exports", "text!./map.popup.html", "../../common/app/main.app", "../../common/map/map.main", "../../common/enum/MapConfigJsonEnum", "../../../core/entity/SystemPoint", "../../../core/enum/ObjectType", "../../common/directive/tree/tree-params", "../../../core/enum/TreeType", "../../../core/enum/LayerType", "./map.popup.controller", "../../common/services/map.service", "../../common/services/connectTree.service", "./../../common/directive/tree/tree.directive.service", "./../../common/factory/map.event.factory"], function (require, exports, PopupHtml, main_app_1, map_main_1, MapConfigJsonEnum_1, SystemPoint_1, ObjectType_1, tree_params_1, TreeType_1, LayerType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Promise = require('es6-promise');
    var MapResourcePointController = (function () {
        function MapResourcePointController($scope, $timeout, $compile, mapService, connectTreeService, treeDirectiveService, mapEventFactory) {
            var _this = this;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.$compile = $compile;
            this.mapService = mapService;
            this.connectTreeService = connectTreeService;
            this.treeDirectiveService = treeDirectiveService;
            this.mapEventFactory = mapEventFactory;
            this.mapId = "MapResourcePointMap";
            this.mapConfigName = MapConfigJsonEnum_1.MapConfigJsonEnum.MAPCONFIG;
            this.systemList = [];
            this.systemListMap = {};
            this.winInfoMap = {};
            this.selectDeviceType = ObjectType_1.ObjectType.Camera.value;
            this.deviceTypelist = [
                ObjectType_1.ObjectType.Camera,
                ObjectType_1.ObjectType.Wifi,
                ObjectType_1.ObjectType.RmpGate,
                ObjectType_1.ObjectType.ElectronicFence
            ];
            this.deviceTypeMap = ObjectType_1.ObjectType;
            this.treeParams = new tree_params_1.TreeDataParams();
            this.$scope.$on('close.map.point.popup', function (event, model, ID, flag) {
                delete _this.winInfoMap[model.ObjectID];
                _this.map.getInfoWindowByID(ID).close();
                _this.map.removeMarker(model);
                if (flag) {
                    _this.map.renderMarker(model);
                    _this.savePoint(model);
                }
                else {
                    if (_this.systemListMap[model.ObjectID]) {
                        _this.map.renderMarker(_this.systemListMap[model.ObjectID]);
                    }
                }
            });
            this.$scope.$on("$destroy", function () {
                _this.mapEventFactory.destroy();
                _this.map.destroy();
            });
            this.initMap();
            this.initTreeData();
        }
        MapResourcePointController.prototype.initMap = function () {
            var _this = this;
            console.log(1111);
            var _self = this;
            Promise.all([
                _self.mapService.getMapConfig(_self.mapConfigName),
                _self.mapService.getSystemPoints()
            ]).then(function (res) {
                _self.map = new map_main_1.NPGisMapMain();
                _self.map.init(_this.mapId, res[0]);
                if (res[1].code === 200) {
                    _self.systemList = res[1].data;
                    _self.systemList.forEach(function (item, index) {
                        _self.systemListMap[item.ObjectID] = item;
                        if (item.LayerType === LayerType_1.LayerType.LampPost.value) {
                            _self.systemList.splice(index, 1);
                        }
                    });
                }
                _self.mapEventFactory.init(_self.map);
                _self.map.renderMarkers(_self.systemList, {
                    click: _self.clickMarkersCallback.bind(_self)
                });
            });
        };
        MapResourcePointController.prototype.clickMarkersCallback = function (marker) {
            var point = marker.getPosition();
            var model = new SystemPoint_1.SystemPoint();
            model.ID = marker.ID;
            model.LayerType = marker.LayerType;
            model.ObjectID = marker.ObjectID;
            model.ObjectName = marker.ObjectName;
            model.ObjectState = marker.ObjectState;
            model.ObjectType = marker.ObjectType;
            model.TaskStatus = marker.TaskStatus;
            model.Lon = point.lon;
            model.Lat = point.lat;
            this.createPopup(point, model);
        };
        MapResourcePointController.prototype.initTreeData = function () {
            var _this = this;
            this.treeParams.treeId = 'MapDeviceSelectTree';
            this.treeParams.treeDatas = [];
            this.treeParams.isShowIcon = true;
            this.treeParams.isShowLine = false;
            this.treeParams.checkEnable = false;
            this.treeParams.isSingleSelect = false;
            this.treeParams.isSimpleData = true;
            this.treeParams.treeInitComplete = function (treeId) {
            };
            this.treeParams.addDiyDom = function (treeId, treeNode) {
                _this.treeDirectiveService.addDiyDomIsConfiStatus(treeId, treeNode, 'isConfigPoint');
            };
            this.treeParams.onDblClick = function (event, treeId, treeNode) {
                if (!treeNode.isConfigPoint) {
                    return false;
                }
                var point = _this.systemListMap[treeNode.ID];
                var p = new NPMapLib.Geometry.Point(point.Lon, point.Lat);
                _this.map.setCenter(p, _this.map.getZoom());
                _this.createPopup(p, point);
            };
            this.treeParams.beforeMouseDown = function (treeId, treeNode) {
                if (!treeNode ||
                    !(treeNode.treeType === TreeType_1.TreeType.camera.value ||
                        treeNode.treeType === TreeType_1.TreeType.wifi.value ||
                        treeNode.treeType === TreeType_1.TreeType.ElectronicFence.value ||
                        treeNode.treeType === TreeType_1.TreeType.rmpGate.value)) {
                    return false;
                }
                _this.map.startLocate(treeNode.Name).then(function (point) {
                    var newMaker = {};
                    newMaker.Lat = point.lat;
                    newMaker.Lon = point.lon;
                    newMaker.ObjectName = treeNode.Name;
                    newMaker.ObjectID = treeNode.ID;
                    switch (treeNode.treeType) {
                        case TreeType_1.TreeType.camera.value:
                            newMaker.LayerType = treeNode.CameraType || LayerType_1.LayerType.Camera.value;
                            newMaker.ObjectType = ObjectType_1.ObjectType.Camera.value;
                            break;
                        case TreeType_1.TreeType.ElectronicFence.value:
                            newMaker.LayerType = LayerType_1.LayerType.ElectronicFence.value;
                            newMaker.ObjectType = ObjectType_1.ObjectType.ElectronicFence.value;
                            break;
                        case TreeType_1.TreeType.wifi.value:
                            newMaker.LayerType = LayerType_1.LayerType.WiFi.value;
                            newMaker.ObjectType = ObjectType_1.ObjectType.Wifi.value;
                            break;
                        case TreeType_1.TreeType.rmpGate.value:
                            newMaker.LayerType = LayerType_1.LayerType.RmpGate.value;
                            newMaker.ObjectType = ObjectType_1.ObjectType.RmpGate.value;
                            break;
                    }
                    if (_this.systemListMap[treeNode.ID]) {
                        _this.map.removeMarker(_this.systemListMap[treeNode.ID]);
                    }
                    if (_this.winInfoMap[treeNode.ID]) {
                        _this.map.getInfoWindowByID(_this.winInfoMap[treeNode.ID]).close();
                    }
                    console.log(treeNode, newMaker);
                    _this.map.renderMarker(newMaker);
                    _this.createPopup(point, newMaker);
                });
                return false;
            };
            this.getDeviceTreeData();
        };
        MapResourcePointController.prototype.changeSelectDevice = function (item) {
            this.selectDeviceType = item.value;
            this.setTreeDataForType();
        };
        MapResourcePointController.prototype.createPopup = function (point, data) {
            var scope = this.$scope.$new();
            scope.model = data;
            var winInfo = this.mapEventFactory.createPopup(point, scope, PopupHtml);
            scope.ID = winInfo;
            this.winInfoMap[data.ObjectID] = winInfo;
        };
        MapResourcePointController.prototype.compileDomSize = function (ele) {
            var domEle = $(ele);
            $('body').append(domEle);
            var size = {
                width: domEle.outerWidth(),
                height: domEle.outerHeight()
            };
            domEle.remove();
            return size;
        };
        MapResourcePointController.prototype.getDeviceTreeData = function () {
            var _this = this;
            var _self = this;
            Promise.all([
                _self.connectTreeService.findAreaCamera(),
                _self.connectTreeService.findAreaWithWifi(),
                _self.connectTreeService.findAreaWithRmpgate(),
                _self.connectTreeService.findAreaWithElectronicfence()
            ]).then(function (res) {
                _self.cameraTreeData = res[0];
                _self.wifiTreeData = res[1];
                _self.rmpgateTreeData = res[2];
                _self.efenceTreeData = res[3];
            }).then(function () {
                _this.setTreeDataForType();
            });
        };
        MapResourcePointController.prototype.setTreeDataForType = function () {
            var _this = this;
            if (this.selectDeviceType === ObjectType_1.ObjectType.Camera.value) {
                this.$timeout(function () {
                    _this.treeParams.treeDatas = _this.cameraTreeData;
                });
            }
            if (this.selectDeviceType === ObjectType_1.ObjectType.Wifi.value) {
                this.$timeout(function () {
                    _this.treeParams.treeDatas = _this.wifiTreeData;
                });
            }
            if (this.selectDeviceType === ObjectType_1.ObjectType.RmpGate.value) {
                this.$timeout(function () {
                    _this.treeParams.treeDatas = _this.rmpgateTreeData;
                });
            }
            if (this.selectDeviceType === ObjectType_1.ObjectType.ElectronicFence.value) {
                this.$timeout(function () {
                    _this.treeParams.treeDatas = _this.efenceTreeData;
                });
            }
        };
        MapResourcePointController.prototype.savePoint = function (model) {
            var _this = this;
            this.mapService.saveOrUpdateSystemPoint(model).then(function (res) {
                if (res.code === 200) {
                    console.info(model.ObjectName, model.Lon, model.Lat, '保存成功！');
                    if (!model.ID) {
                        var treeNode = _this.treeDirectiveService.getNodeByParam(_this.treeParams.treeId, 'ID', model.ObjectID);
                        if (treeNode)
                            treeNode.isConfigPoint = true;
                        _this.treeDirectiveService.addDiyDomIsConfiStatus(_this.treeParams.treeId, treeNode, 'isConfigPoint');
                    }
                }
            });
        };
        MapResourcePointController.$inject = ['$scope', '$timeout', '$compile', 'mapService', 'connectTreeService', 'treeDirectiveService', 'mapEventFactory'];
        return MapResourcePointController;
    }());
    main_app_1.app.controller("mapResourcePointController", MapResourcePointController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
