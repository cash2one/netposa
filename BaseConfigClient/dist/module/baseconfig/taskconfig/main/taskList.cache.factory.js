define(["require", "exports", "../../../common/app/main.app", "../../../../core/server/enum/TaskStatus", "../../../../core/server/enum/AuditStatus"], function (require, exports, main_app_1, TaskStatus_1, AuditStatus_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FindCacheByPageParams = (function () {
        function FindCacheByPageParams() {
            this.currentPage = 1;
            this.pageSize = 10;
            this.totalCount = 0;
            this.pageCount = 1;
        }
        return FindCacheByPageParams;
    }());
    exports.FindCacheByPageParams = FindCacheByPageParams;
    var TaskTypes = (function () {
        function TaskTypes() {
            this.Face = { value: 'Car', text: '车辆' };
            this.Car = { value: 'Face', text: '人脸' };
            this.Mac = { value: 'Mac', text: 'Mac' };
        }
        return TaskTypes;
    }());
    exports.TaskTypes = TaskTypes;
    var TaskListCacheFactory = (function () {
        function TaskListCacheFactory() {
            var _this = this;
            this.TaskTypes = new TaskTypes();
            this.getTaskTotal = function (type) {
                if (type === _this.TaskTypes.Face.value) {
                    return _this.taskFaceList.length;
                }
                else if (type === _this.TaskTypes.Mac.value) {
                    return _this.taskMacList.length;
                }
                else if (type === _this.TaskTypes.Car.value) {
                    return _this.taskCarList.length;
                }
            };
        }
        TaskListCacheFactory.prototype.setTaskList = function (srcList, type) {
            var _this = this;
            switch (type) {
                case this.TaskTypes.Face.value:
                    this.taskFaceList = [];
                    this.taskListFaceMap = {};
                    this.taskFaceList = srcList;
                    angular.forEach(this.taskFaceList, function (val) {
                        _this.taskListFaceMap[val.ID] = val;
                    });
                    break;
                case this.TaskTypes.Mac.value:
                    this.taskMacList = [];
                    this.taskListMacMap = {};
                    this.taskMacList = srcList;
                    angular.forEach(this.taskMacList, function (val) {
                        _this.taskListMacMap[val.ID] = val;
                    });
                    break;
                case this.TaskTypes.Car.value:
                    this.taskCarList = [];
                    this.taskListCarMap = {};
                    this.taskCarList = srcList;
                    angular.forEach(this.taskCarList, function (val) {
                        _this.taskListCarMap[val.ID] = val;
                    });
                    break;
                default:
                    return;
            }
        };
        ;
        TaskListCacheFactory.prototype.updateFaceAuditStatus = function (ids, auditStatusValue) {
            var _this = this;
            if (ids && ids.length > 0) {
                var taskItem_1 = null;
                angular.forEach(ids, function (val) {
                    if (_this.taskListFaceMap[val]) {
                        taskItem_1 = _this.taskListFaceMap[val];
                        taskItem_1.AuditStatus = auditStatusValue;
                        if (auditStatusValue === AuditStatus_1.AuditStatus.Verified.value) {
                            taskItem_1.Status = TaskStatus_1.TaskStatus.Run.value;
                        }
                    }
                });
                return true;
            }
            return false;
        };
        ;
        TaskListCacheFactory.prototype.updateFaceRunStatus = function (ids, isStart) {
            var _this = this;
            if (ids && ids.length > 0) {
                var taskItem_2 = null;
                angular.forEach(ids, function (val) {
                    taskItem_2 = _this.taskListFaceMap[val];
                    if (isStart) {
                        taskItem_2.Status = TaskStatus_1.TaskStatus.Run.value;
                    }
                    else {
                        taskItem_2.Status = TaskStatus_1.TaskStatus.Stop.value;
                    }
                });
                return true;
            }
            else {
                return false;
            }
        };
        ;
        TaskListCacheFactory.prototype.deleteByFaceIds = function (ids) {
            var _this = this;
            if (ids && ids.length > 0) {
                var i_1, len_1;
                angular.forEach(ids, function (val) {
                    i_1 = 0;
                    len_1 = _this.taskFaceList.length;
                    for (; i_1 < len_1; i_1++) {
                        if (_this.taskFaceList[i_1].ID === val) {
                            _this.taskFaceList.splice(i_1, 1);
                            break;
                        }
                    }
                });
                angular.forEach(this.taskFaceList, function (val) {
                    _this.taskListFaceMap[val.ID] = val;
                });
                return true;
            }
            return false;
        };
        ;
        TaskListCacheFactory.prototype.getListByPage = function (params, type) {
            if (params.pageSize < this.getTaskTotal(type)) {
                var startIndex = params.pageSize * (params.currentPage - 1);
                var endIndex = params.pageSize * params.currentPage;
                if (type === this.TaskTypes.Face.value) {
                    return angular.copy(this.taskFaceList.slice(startIndex, endIndex));
                }
                else if (type === this.TaskTypes.Mac.value) {
                    return angular.copy(this.taskMacList.slice(startIndex, endIndex));
                }
                else if (type === this.TaskTypes.Car.value) {
                    return angular.copy(this.taskCarList.slice(startIndex, endIndex));
                }
            }
            else {
                if (type === this.TaskTypes.Face.value) {
                    return angular.copy(this.taskFaceList);
                }
                else if (type === this.TaskTypes.Mac.value) {
                    return angular.copy(this.taskMacList);
                }
                else if (type === this.TaskTypes.Car.value) {
                    return angular.copy(this.taskCarList);
                }
            }
        };
        ;
        return TaskListCacheFactory;
    }());
    main_app_1.app
        .service('taskListCacheFactory', TaskListCacheFactory);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
