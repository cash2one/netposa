define(["require", "exports", "text!../../eventRule/eventRule.popup.html", "../../../common/app/main.app", "../../../../core/server/TaskModel", "../../../../core/server/enum/AuditStatus", "../../../../core/server/enum/TaskStatus", "../../../../core/server/enum/TaskType", "moment", "../../eventRule/eventRule.popup.controller", "css!../../style/new-car-monitor.css", "../../../common/factory/userinfo.cache.factory", "../../../common/services/task.service", "../../../common/services/user.service"], function (require, exports, eventRuleTpl, main_app_1, TaskModel_1, AuditStatus_1, TaskStatus_1, TaskType_1, moment) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ICarOptions = (function () {
        function ICarOptions() {
        }
        ICarOptions.BlackList = { value: 'BlackList', text: '黑名单' };
        ICarOptions.WhiteList = { value: 'WhiteList', text: '白名单' };
        return ICarOptions;
    }());
    var CarOptions = [
        ICarOptions.BlackList,
        ICarOptions.WhiteList
    ];
    var CarForColor = [
        { value: '0', text: '白色' },
        { value: '1', text: '黄色' },
        { value: '2', text: '蓝色' },
        { value: '3', text: '黑色' },
        { value: '101', text: '绿色' },
        { value: '4', text: '其他' },
    ];
    var NewCarMonitor = (function () {
        function NewCarMonitor($scope, $state, $stateParams, $timeout, layer, layerDec, userInfoCacheFactory, taskService, userService) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.$stateParams = $stateParams;
            this.$timeout = $timeout;
            this.layer = layer;
            this.layerDec = layerDec;
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.taskService = taskService;
            this.userService = userService;
            this.taskConfigAuditKey = "toolOption.myCheck";
            this.taskCaseModel = true;
            this.CarTaskType = CarOptions;
            this.TaskModel = new TaskModel_1.CarMonitor();
            this.CarForColor = CarForColor;
            this.isWhiteList = false;
            this.setUserAuditList = function () {
                _this.userService.getListByFuncAuthCode(_this.taskConfigAuditKey).then(function (resp) {
                    if (resp && resp.code == 200) {
                        _this.userAuditList = resp.data;
                    }
                    else {
                        _this.userAuditList = [];
                    }
                });
            };
            this.setUserAuditList();
            this.initTaskModel(this.$stateParams.taskId);
            this.$scope.$on('close.eventRule.popup', function (event, isFresh, eventRule) {
                _this.layer.close(_this.layerIndex);
                if (isFresh) {
                    _this.TaskModel.EventRule = eventRule;
                }
            });
        }
        NewCarMonitor.prototype.initTaskModel = function (id) {
            var _this = this;
            if (id) {
                this.taskService.findCarById(id).then(function (res) {
                    if (res.code === 200) {
                        _this.TaskModel = res.data;
                        _this.TaskModel.OperateType = 'Update';
                        _this.TaskModel.ID = _this.$stateParams.taskId;
                        _this.TaskModel.TaskType = TaskType_1.TaskType.CarMonitor.value;
                    }
                });
            }
            else {
                this.TaskModel.AreaID = this.$stateParams.areaId;
                this.TaskModel.TaskType = TaskType_1.TaskType.CarMonitor.value;
                this.TaskModel.OperateType = 'Add';
            }
        };
        NewCarMonitor.prototype.changeMonitorType = function (type) {
            this.isWhiteList = (type === ICarOptions.WhiteList.value);
        };
        NewCarMonitor.prototype.uploadImage = function (event) {
            var _this = this;
            var from = new FormData();
            from.append('image', event.target.files[0]);
            from.append('storeType', 'LOC');
            from.append('imageCategory', 'CaptureImage');
            from.append('commandType', 'SearchAccessLog');
            from.append('detectType', 'Face');
            this.taskService.uploadCarPhoto(from).then(function (res) {
                if (res.code === 200) {
                    _this.$timeout(function () {
                        _this.TaskModel.CarPhoto = res.data;
                    });
                }
            });
        };
        NewCarMonitor.prototype.addEventRule = function () {
            var scope = this.$scope.$new();
            scope.isTask = true;
            scope.eventRule = this.TaskModel.EventRule;
            this.layerIndex = this.layer.open({
                type: 1,
                content: eventRuleTpl,
                scope: scope,
                skin: "no-scroll",
                title: "选择联动策略",
                area: ["780px", "auto"],
                end: function () {
                    scope.$destroy();
                }
            });
        };
        NewCarMonitor.prototype.newTaskSubmit = function () {
            var _this = this;
            if (!this.TaskModel.ListType) {
                return this.layerDec.warnInfo('请选择布控类型！');
            }
            if (!this.TaskModel.PlateColor) {
                return this.layerDec.warnInfo('请选择车牌颜色！');
            }
            if (!this.TaskModel.AuditUser) {
                return this.layerDec.warnInfo('请选择审核人！');
            }
            if (!this.TaskModel.ValidTimeStart && !this.TaskModel.ValidTimeEnd) {
                return this.layerDec.warnInfo('请选择有效时间！');
            }
            if (this.TaskModel.ValidTimeStart >= this.TaskModel.ValidTimeEnd) {
                return this.layerDec.warnInfo('请选择正确的时间范围！');
            }
            if (!this.isWhiteList) {
                if (!this.TaskModel.EventRule) {
                    return this.layerDec.warnInfo('请选择联动策略！');
                }
            }
            this.TaskModel.CreateTime = moment().format('YYYY-MM-DD hh:mm:ss');
            var params = {};
            params.taskModel = this.TaskModel;
            params.eventRule = this.TaskModel.EventRule;
            params.taskModel.CreateUserID = this.userInfoCacheFactory.getCurrentUserId();
            if (params.taskModel.AuditUser === params.taskModel.CreateUserID) {
                params.taskModel.AuditStatus = AuditStatus_1.AuditStatus.Verified.value;
                params.taskModel.Status = TaskStatus_1.TaskStatus.Run.value;
            }
            else {
                params.taskModel.AuditStatus = AuditStatus_1.AuditStatus.Verifing.value;
                params.taskModel.Status = TaskStatus_1.TaskStatus.Waiting.value;
            }
            this.TaskModel.IsLongEffective = false;
            this.TaskModel.TaskType = TaskType_1.TaskType.CarMonitor.value;
            this.taskService.addOrUpdateCarTask(params).then(function (res) {
                if (res.code === 200) {
                    _this.newTaskCancel();
                }
            });
        };
        NewCarMonitor.prototype.newTaskCancel = function () {
            this.$state.go('baseconfig.task');
        };
        NewCarMonitor.$inject = ['$scope', '$state', '$stateParams',
            '$timeout', 'layer',
            'layerDec', 'userInfoCacheFactory', 'taskService', 'userService'];
        return NewCarMonitor;
    }());
    main_app_1.app.controller('newCarMonitor', NewCarMonitor);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
