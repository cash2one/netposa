define(["require", "exports", "text!../../eventRule/eventRule.popup.html", "../../../common/app/main.app", "../../../../core/server/TaskModel", "../../../../core/server/enum/AuditStatus", "../../../../core/server/enum/TaskStatus", "../../eventRule/eventRule.popup.controller", "css!../../style/new-mac-monitor.css", "../../../common/factory/userinfo.cache.factory", "../../../common/services/task.service", "../../../common/services/user.service"], function (require, exports, eventRuleTpl, main_app_1, TaskModel_1, AuditStatus_1, TaskStatus_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var QueryPattern = [
        { name: "MAC", value: "MAC", key: 0 },
        { name: "IMEI", value: "IMEI", key: 1 },
        { name: "IMSI", value: "IMSI", key: 2 }
    ];
    var TasksOptions = [
        { value: 'Blacklist', text: '黑名单' },
        { value: 'Whitelist', text: '白名单' }
    ];
    var NewMacMonitor = (function () {
        function NewMacMonitor($scope, $state, $stateParams, $timeout, layer, layerDec, userInfoCacheFactory, taskService, userService) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.$stateParams = $stateParams;
            this.$timeout = $timeout;
            this.layer = layer;
            this.layerDec = layerDec;
            this.userInfoCacheFactory = userInfoCacheFactory;
            this.taskService = taskService;
            this.userService = userService;
            this.taskConfigAuditKey = "toolOption.myCheck";
            this.taskCaseModel = true;
            this.RfidTaskType = TasksOptions;
            this.TaskModel = new TaskModel_1.MacMonitor();
            this.queryPattern = QueryPattern;
            this.setUserAuditList();
            this.initTaskModel(this.$stateParams.taskId);
            this.$scope.$on('close.eventRule.popup', function (event, isFresh, eventRule) {
                _this.layer.close(_this.layerIndex);
                if (isFresh) {
                    _this.TaskModel.EventRule = eventRule;
                }
            });
        }
        NewMacMonitor.prototype.initTaskModel = function (id) {
            var _this = this;
            if (id) {
                this.taskService.findRfidById(id).then(function (res) {
                    _this.TaskModel = res.data;
                    _this.TaskModel.OperateType = 'Update';
                });
            }
            else {
                this.TaskModel.TaskType = 'MAC';
                this.TaskModel.OperateType = 'Add';
            }
        };
        NewMacMonitor.prototype.addEventRule = function () {
            var scope = this.$scope.$new();
            scope.isTask = true;
            scope.eventRule = this.TaskModel.EventRule;
            this.layerIndex = this.layer.open({
                type: 1,
                content: eventRuleTpl,
                scope: scope,
                skin: "no-scroll",
                title: "选择联动策略",
                area: ["780px", "auto"],
                end: function () {
                    scope.$destroy();
                }
            });
        };
        NewMacMonitor.prototype.setUserAuditList = function () {
            var _this = this;
            this.userService.getListByFuncAuthCode(this.taskConfigAuditKey).then(function (resp) {
                if (resp && resp.code == 200) {
                    _this.userAuditList = resp.data;
                }
                else {
                    _this.userAuditList = [];
                }
            });
        };
        ;
        NewMacMonitor.prototype.newTaskSubmit = function () {
            var _this = this;
            if (!this.TaskModel.ListType) {
                return this.layerDec.warnInfo('请选择布控类型！');
            }
            if (!this.TaskModel.AuditUser) {
                return this.layerDec.warnInfo('请选择审核人！');
            }
            if (!this.TaskModel.EventRule) {
                return this.layerDec.warnInfo('请选择联动策略！');
            }
            if (this.TaskModel.ValidTimeStart >= this.TaskModel.ValidTimeEnd) {
                return this.layerDec.warnInfo('请选择正确的时间范围！');
            }
            this.TaskModel.CreateTime = Date.now().toString();
            var params = {};
            params.taskModel = this.TaskModel;
            params.eventRule = this.TaskModel.EventRule;
            params.taskModel.CreateUserID = this.userInfoCacheFactory.getCurrentUserId();
            if (params.taskModel.AuditUser === params.taskModel.CreateUserID) {
                params.taskModel.AuditStatus = AuditStatus_1.AuditStatus.Verified.value;
                params.taskModel.Status = TaskStatus_1.TaskStatus.Run.value;
            }
            else {
                params.taskModel.AuditStatus = AuditStatus_1.AuditStatus.Verifing.value;
                params.taskModel.Status = TaskStatus_1.TaskStatus.Waiting.value;
            }
            this.TaskModel.IsLongEffective = (!this.TaskModel.ValidTimeStart && !this.TaskModel.ValidTimeEnd);
            this.taskService.addOrUpdateRfidTask(params).then(function (res) {
                if (res.code === 200) {
                    _this.newTaskCancel();
                }
            });
        };
        NewMacMonitor.prototype.newTaskCancel = function () {
            this.$state.go('baseconfig.task');
        };
        NewMacMonitor.prototype.selectQueryType = function (sel) {
            this.TaskModel.TaskType = sel.value;
        };
        NewMacMonitor.$inject = ['$scope', '$state', '$stateParams',
            '$timeout', 'layer',
            'layerDec', 'userInfoCacheFactory', 'taskService', 'userService'];
        return NewMacMonitor;
    }());
    main_app_1.app.controller('newMacMonitor', NewMacMonitor);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
