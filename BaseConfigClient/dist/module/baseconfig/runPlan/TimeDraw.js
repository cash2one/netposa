define(["require", "exports", "../../../core/entity/ex/TimeTemplateEx", "../../../core/server/enum/ThresholdType", "jquery", "angular"], function (require, exports, TimeTemplateEx_1, ThresholdType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TimeDraw = (function () {
        function TimeDraw() {
            var _this = this;
            this.dataTimeAttrName = "data-time";
            this.dataTimeTypeAttrName = "data-timetype";
            this.drawByDateItems = function (dateItems) {
                var rectXs;
                var liIndex;
                var liBaseNum = 7;
                if (Array.isArray(dateItems) && dateItems.length > 0) {
                    angular.forEach(dateItems, function (dateVal, index) {
                        liIndex = liBaseNum + index;
                        _this.addGripLine(dateVal.StartDateOfItem, dateVal.EndDateOfItem, dateVal.DateName);
                        angular.forEach(dateVal.TimeItems, function (hVal, indexH) {
                            console.log(hVal, "`1``````````````````" + indexH);
                            rectXs = _this.timeCountReverse(hVal.StarTime, hVal.EndTime);
                            _this.shape.drawShape(rectXs[0], rectXs[1], liIndex, hVal.ThresholdType);
                            console.log("+++++++++++++++" + rectXs);
                        });
                    });
                }
            };
            this.timeCountReverse = function (startTime, endTime) {
                var h1 = parseInt(startTime.split(':')[0]);
                var m1 = parseInt(startTime.split(':')[1]);
                var h2 = parseInt(endTime.split(':')[0]);
                var m2 = parseInt(endTime.split(':')[1]);
                var scale = _this.grid.gridW / (24 * 60);
                var x1 = (h1 * 60 + m1) * scale - 0;
                var x2 = (h2 * 60 + m2) * scale - 0;
                console.log(x1 + "=========" + x2);
                return [x1, x2];
            };
            this.changeActiveType = function (drawType) {
                _this.activeTimeType = drawType;
                return _this.getTimeShapeBg(drawType);
            };
            this.getUpdateList = function (lineIndex, aliveTarget, newLeft, newRight) {
                var aliveType = $(aliveTarget).attr(_this.dataTimeTypeAttrName);
                var aliveLeft = parseFloat(aliveTarget.style.left);
                var aliveRight = parseFloat(aliveTarget.style.width) + aliveLeft;
                var shapeItem;
                shapeItem = new ShapeItem();
                shapeItem.startX = newLeft;
                shapeItem.endX = newRight;
                shapeItem.type = _this.activeTimeType;
                var isSameType = (aliveType === _this.activeTimeType);
                console.log("已存在：：" + aliveLeft + "====" + aliveRight);
                console.log("已存在：：" + (aliveLeft ^ 0) + "====" + (aliveRight ^ 0));
                console.log("新：：" + newLeft + "====" + newRight);
                console.log("新：：" + (newLeft ^ 0 + 1) + "====" + (newRight ^ 0 + 1));
                if (aliveLeft <= newLeft && newRight <= aliveRight) {
                    console.log("被包含 已存在 包含 新 （aliveLeft <= (newLeft <<< newRight) <= aliveRight）");
                    if (isSameType) {
                        return null;
                    }
                    else {
                        _this.shape.drawShape(aliveLeft, newLeft, lineIndex, aliveType);
                        _this.shape.drawShape(newRight, aliveRight, lineIndex, aliveType);
                    }
                }
                else if (newLeft <= aliveLeft && aliveRight <= newRight) {
                    console.log("包含 新 包含 已存在  (newLeft <= aliveLeft <<< aliveRight <= newRight)");
                    shapeItem = new ShapeItem();
                    shapeItem.startX = newLeft;
                    shapeItem.endX = newRight;
                    shapeItem.type = _this.activeTimeType;
                }
                else if (newLeft < aliveLeft && (newRight ^ 0 + 1) >= (aliveLeft ^ 0) && newRight <= aliveRight) {
                    console.log("右交集 newLeft < aliveLeft < newRight < aliveRight");
                    if (isSameType) {
                        shapeItem = new ShapeItem();
                        shapeItem.startX = newLeft;
                        shapeItem.endX = aliveRight;
                        shapeItem.type = _this.activeTimeType;
                    }
                    else {
                        _this.shape.drawShape(newRight, aliveRight, lineIndex, aliveType);
                    }
                }
                else if (newLeft >= aliveLeft && ((newLeft ^ 0) - 1) <= (aliveRight ^ 0) && newRight > aliveRight) {
                    console.log("左交集 aliveLeft =< newLeft < aliveRight < newRight");
                    if (isSameType) {
                        shapeItem = new ShapeItem();
                        shapeItem.startX = aliveLeft;
                        shapeItem.endX = newRight;
                        shapeItem.type = _this.activeTimeType;
                    }
                    else {
                        _this.shape.drawShape(aliveLeft, newLeft, lineIndex, aliveType);
                    }
                }
                else {
                    console.log("无交集交集 (aliveLeft << aliveRight) << (newLeft << newRight） || (newLeft << newRight）<< (aliveLeft << aliveRight) ");
                    return null;
                }
                console.log("已存在：：" + aliveLeft + "====" + aliveRight);
                console.log("已存在：：" + (aliveLeft ^ 0) + "====" + (aliveRight ^ 0));
                console.log("新：：" + newLeft + "====" + newRight);
                console.log("新：：" + (newLeft ^ 0 + 1) + "====" + (newRight ^ 0 + 1));
                console.log(isSameType ? "同颜色" : "不同颜色");
                console.log(shapeItem);
                return shapeItem;
            };
            this.clearShapeByType = function (shapeType) {
                $('#drawShow>li>span').each(function (index, val) {
                    if ($(val).attr(_this.dataTimeTypeAttrName) === shapeType) {
                        $(val).remove();
                    }
                });
            };
            this.getDrawArea = function () {
                var timeTemplateEx = new TimeTemplateEx_1.TimeTemplateEx();
                timeTemplateEx.WeekItems = [];
                timeTemplateEx.DateItems = [];
                var weekItem;
                var dateItem;
                var timeItem;
                var divLiList = $('#drawShow>li');
                divLiList.each(function (liIndex, val) {
                    if ($(val).children().length > 0) {
                        if (liIndex < 7) {
                            weekItem = new TimeTemplateEx_1.WeekItem();
                            weekItem.DayOfWeek = $(val).attr("value");
                            weekItem.TimeItems = [];
                            console.log(val);
                            $(val).children().each(function (i, cval) {
                                console.log(cval);
                                console.log($(cval));
                                timeItem = new TimeTemplateEx_1.TimeItem();
                                timeItem.ThresholdType = $(cval).attr(_this.dataTimeTypeAttrName);
                                timeItem.StarTime = $(cval).attr(_this.dataTimeAttrName).split('-')[0] + ":00";
                                timeItem.EndTime = $(cval).attr(_this.dataTimeAttrName).split('-')[1] + ":00";
                                weekItem.TimeItems.push(timeItem);
                            });
                            timeTemplateEx.WeekItems.push(weekItem);
                        }
                        else {
                            console.log(val);
                            dateItem = new TimeTemplateEx_1.DateItem();
                            dateItem.TimeItems = [];
                            dateItem.StartDateOfItem = _this.shape.defineLineList[liIndex - 7].StartDateOfItem;
                            if (_this.shape.defineLineList[liIndex - 7].EndDateOfItem) {
                                dateItem.EndDateOfItem = _this.shape.defineLineList[liIndex - 7].EndDateOfItem;
                            }
                            $(val).children().each(function (i, cval) {
                                timeItem = new TimeTemplateEx_1.TimeItem();
                                timeItem.ThresholdType = $(cval).attr(_this.dataTimeTypeAttrName);
                                timeItem.StarTime = $(cval).attr(_this.dataTimeAttrName).split('-')[0] + ":00";
                                timeItem.EndTime = $(cval).attr(_this.dataTimeAttrName).split('-')[1] + ":00";
                                dateItem.TimeItems.push(timeItem);
                            });
                            timeTemplateEx.DateItems.push(dateItem);
                        }
                    }
                });
                console.log("%c TODO ==========获取选择绘画结果。。。。", "color:blue");
                console.log(timeTemplateEx);
                return timeTemplateEx;
            };
            this.addGripLine = function (lineStartDate, lineEndDate, lineInfo) {
                var vmTimeDraw = _this;
                if ($('#drawShow>li').length !== (vmTimeDraw.shape.selfTimes + vmTimeDraw.grid.rect)) {
                    var St = lineStartDate;
                    var Et = lineEndDate;
                    var validateResult = _this.validateCustomDate(St, Et);
                    if (validateResult !== null) {
                        return validateResult;
                    }
                    if ($('#drawShow>li').length === (vmTimeDraw.shape.selfTimes + vmTimeDraw.grid.rect)) {
                        console.log("超过上限");
                        return "超过上限";
                    }
                    $('#drawShow').append("<li value='" + $('#drawShow').find('li').length + "'></li>");
                    vmTimeDraw.shape.resetDraw(1);
                    var liHtmlStr = vmTimeDraw.getAddLineHtmlStr(St, Et);
                    $('#timeTable .week').append(liHtmlStr);
                    $('.week>li:last-child>i').on('click', function () {
                        var targetThis = this;
                        vmTimeDraw.deleteDateItem(targetThis);
                    });
                    var dateItem = new TimeTemplateEx_1.DateItem();
                    if (St) {
                        dateItem.StartDateOfItem = St;
                    }
                    if (Et) {
                        dateItem.EndDateOfItem = Et;
                    }
                    dateItem.DateName = lineInfo;
                    vmTimeDraw.shape.defineLineList.push(dateItem);
                    console.log(vmTimeDraw.shape.defineLineList);
                    return "添加成功";
                }
            };
            this.validateCustomDate = function (startDate, endDate) {
                if (!startDate) {
                    return "开始时间不得为空";
                }
                if (!!endDate && startDate > endDate) {
                    console.log("开始大于结束");
                    return "开始大于结束";
                }
                var oldStart;
                var oldEnd;
                for (var i = 0; i < _this.shape.defineLineList.length; i++) {
                    oldStart = _this.shape.defineLineList[i].StartDateOfItem;
                    if (angular.isUndefined(_this.shape.defineLineList[i].EndDateOfItem)) {
                        if (startDate === oldStart) {
                            console.log("已添加的单日期时间 存在");
                            return "已添加的单日期时间 存在";
                        }
                    }
                    else {
                        oldEnd = _this.shape.defineLineList[i].EndDateOfItem;
                        if (oldStart <= startDate && startDate <= oldEnd || oldStart <= endDate && endDate <= oldEnd) {
                            console.log("被包含相等的情况");
                            return "被包含相等的情况";
                        }
                    }
                }
                return null;
            };
            this.getAddLineHtmlStr = function (startDate, endDate) {
                var liWidth = $('.week').width();
                var liHeight = $('.week li').height();
                var vmTimeDraw = _this;
                var htmlStr = "";
                var deleteBtnTitle = "删除";
                if (startDate === endDate || startDate && !endDate) {
                    htmlStr =
                        "<li class='position-r' style='width:"
                            + liWidth + "px;height:"
                            + liHeight + "px'><span>"
                            + startDate
                            + "</span><i style='right:"
                            + (-vmTimeDraw.grid.gridW - 16 - 10 - 10) + "px;top:"
                            + (vmTimeDraw.grid.rectH - 16) / 2 + "px' " +
                            "class='position-a i-delete' title='" +
                            deleteBtnTitle + "'></i></li>";
                }
                else {
                    htmlStr =
                        "<li class='position-r' style='width:" + liWidth + "px;height:" + liHeight + "px'>" +
                            "<a style='top:" + liHeight / 3 + "px'>" + startDate + "</a>" +
                            "<a style='top:" + liHeight / 4 * 3 + "px'>" + endDate +
                            "</a><i style='right:" +
                            (-vmTimeDraw.grid.gridW - 16 - 10 - 10) +
                            "px;top:" +
                            (vmTimeDraw.grid.rectH - 16) / 2 +
                            "px' class='position-a i-delete' title='" +
                            deleteBtnTitle + "'></i></li>";
                }
                return htmlStr;
            };
            this.timeTypeParamsList = this.setTimeTypeParamsList();
            this.activeTimeType = "defaultType";
            var vmTimeDraw = this;
            vmTimeDraw.grid = {
                gridW: 630,
                gridLeft: 60,
                rectTop: 36,
                line: 24,
                rect: 7,
                lineOverflow: 20,
                defineShow: 2,
                drawW: 0,
                lineW: 0,
                lineH: 0,
                rectW: 0,
                rectH: 0,
                init: function (currenRects) {
                    this.rectH = this.gridW / this.line + 5;
                    var gridHeight = !!currenRects ? currenRects : this.rect;
                    $('#timeTable').css({
                        "height": this.rectH * gridHeight + this.rectTop
                    });
                    this.drawW = $('#timeTable').width();
                    $('#timeTable .time-bg-grid').css({
                        "width": this.gridW,
                        "marginLeft": this.gridLeft
                    });
                    $('.girds-rect').css({
                        "top": this.rectTop
                    });
                    $('#timeTable ol li').css('height', this.rectH);
                    $('#timeTable ol li span').css('height', this.rectH - 1);
                    $('.time-bg-grid').css({
                        "height": this.rectH * gridHeight + this.rectTop,
                    });
                    $('#draw').css({
                        "width": this.drawW,
                        "top": this.rectTop,
                        "left": -this.gridLeft
                    });
                    $('.border-rect').css({
                        "top": 0,
                        "bottom": 0,
                        "width": this.gridW,
                        "left": this.gridLeft
                    });
                    $('#timeTable ul.week').css({
                        "top": this.rectTop,
                        "left": this.gridLeft - $('#timeTable ul.week').width() - 10,
                        "lineHeight": this.rectH + "px"
                    });
                    $('#drawShow').css({ "left": this.gridLeft });
                    this.lineW = this.gridW;
                    this.lineH = $('.grids-line').height();
                    this.rectW = $('.grids-rect').width();
                    this.drawLine(this.line);
                    if (!!currenRects) {
                        this.drawRect(currenRects);
                    }
                    else {
                        this.drawRect(this.rect);
                    }
                    vmTimeDraw.shape.init();
                },
                drawLine: function (total) {
                    var left = (this.lineW - 1) / this.line;
                    for (var i = 0; i <= total; i++) {
                        $('.grids-line').append("<div style='left:" + left * i + "px'></div>");
                        $('.grids-line').append("<span>" + i + "</span>");
                        var span = $('.grids-line').find('span');
                        var testW = $(span[span.length - 1]).width();
                        var testLeft = left * i - testW / 2;
                        span[span.length - 1].style.left = testLeft + "px";
                    }
                },
                drawRect: function (total) {
                    for (var i = 0; i < total; i++) {
                        var bgcolor = (i % 2 === 0 ? "gray" : "");
                        $('.grids-rect').append("<div class='" + bgcolor + "' style='height:" + this.rectH + "px'></div>");
                    }
                }
            };
            vmTimeDraw.shape = {
                gridW: 0,
                liHeight: 0,
                MSDOWN: false,
                drawX1: 0,
                drawY1: 0,
                drawX2: 0,
                drawY2: 0,
                OSX: 0,
                OSY: 0,
                DRAWED: false,
                li_0: 0,
                li_n: 0,
                sp: 0,
                h1: 0,
                m1: 0,
                h2: 0,
                m2: 0,
                timesStr: "",
                selfTimes: 10,
                defineLineList: [],
                isTargetMSDOWN: false,
                init: function () {
                    var me = this;
                    angular.element("#drawArea").mousedown(function (e) {
                        console.log("drawArea鼠标按下获取起始点坐标");
                        if (e.button == 0) {
                            me.zIndex(96);
                            me.MSdown(e);
                            $('#drawShow>li>span.active').removeClass('active');
                        }
                    });
                    $("#drawArea").on("mouseup", function (e) {
                        console.log("drawArea鼠标按下获取起始点坐标");
                        if (e.button == 0) {
                            me.zIndex(99);
                            me.MSup(e);
                            me.addRect();
                        }
                    });
                    $("#drawArea").mouseover(function () {
                        this.gridW = $('.time-bg-grid').width();
                        $('.time-dot').show();
                    });
                    $("#drawArea").mousemove(function (e) {
                        me.MSmove(e);
                        var X = e.offsetX < vmTimeDraw.grid.gridLeft ? 0 : e.offsetX > (this.gridW + vmTimeDraw.grid.gridLeft) ? this.gridW : (e.offsetX - vmTimeDraw.grid.gridLeft);
                        var h = X / this.gridW * 24 ^ 0;
                        var m = X / this.gridW * 24 * 60 % 60 ^ 0;
                        (h < 10) && (h = "0" + h);
                        (m < 10) && (m = "0" + m);
                        $('.time-dot').html(h + "：" + m + "：00");
                        var x = e.offsetX < vmTimeDraw.grid.gridLeft ? vmTimeDraw.grid.gridLeft - 15 : e.offsetX;
                        var currentRect = $('#timeTable .week').children().length;
                        var bottomSpace = currentRect * vmTimeDraw.grid.rectH - 22 - 10;
                        var y = e.offsetY > bottomSpace ? bottomSpace : e.offsetY;
                        if (e.offsetX > (vmTimeDraw.grid.gridW + vmTimeDraw.grid.gridLeft)) {
                            $('.time-dot').hide();
                        }
                        else {
                            $('.time-dot').show();
                            $('.time-dot').css({
                                'left': x + 15,
                                "top": y + 10
                            });
                        }
                    });
                    $("#drawArea").mouseout(function (e) {
                        me.MSout(e);
                        $('.time-dot').hide();
                    });
                    $("#drawShow").click(function (e) {
                        if (e.target.nodeName == "SPAN") {
                            if ($(e.target).hasClass('active')) {
                                $(e.target).removeClass('active').addClass('normal');
                            }
                            else {
                                $(e.target).addClass('active').removeClass('normal').siblings('span').removeClass('active').addClass('normal');
                                $(e.target).parent('li').siblings('li').children('span').removeClass('active').addClass('normal');
                            }
                            if ($(e.target).hasClass('active')) {
                                var left = parseFloat(e.target.style.left);
                                var right = left + parseFloat(e.target.style.width);
                                var top_1 = $(e.target).parent('li').index() * vmTimeDraw.grid.rectH - $('.time-range').height() - 10 - 5;
                                $('.time-range').css({
                                    "left": left + vmTimeDraw.grid.gridLeft + "px",
                                    "top": top_1 + "px"
                                });
                                me.timeCount(left, right);
                                me.setTime(me.h1, me.m1, me.h2, me.m2, [1, 1]);
                                $('.time-range').show();
                            }
                            else {
                                $('.time-range').hide();
                            }
                        }
                    });
                    $("#timeSet").click(function (e) {
                        function _getTimeForm(points, times, mothod, val) {
                            if (mothod === "get") {
                                return ($(e.target).parent('p').find('span').eq(points).find('input').eq(times).val() ^ 0);
                            }
                            else {
                                $(e.target).parent('p').find('span').eq(points).find('input').eq(times).val(val);
                            }
                        }
                        ;
                        var h_sta = _getTimeForm(0, 0, "get", null);
                        var m_sta = _getTimeForm(0, 1, "get", null);
                        var h_end = _getTimeForm(1, 0, "get", null);
                        var m_end = _getTimeForm(1, 1, "get", null);
                        console.info(h_sta, m_sta, h_end, m_end);
                        if (h_sta > h_end || h_sta === h_end && m_sta > m_end) {
                            console.log("开始时间大于结束时间，提示错误");
                            return;
                        }
                        else if (h_sta === h_end && m_end === m_sta) {
                            console.log("相等提示错误");
                            return;
                        }
                        else if (h_sta === (me.h1 ^ 0) && h_end === (me.h2 ^ 0) && m_sta === (me.m1 ^ 0) && m_end === (me.m2 ^ 0)) {
                            console.log("未做修改不做操作");
                            return;
                        }
                        else if (h_sta > 24 || h_sta < 0 || h_end > 24 || h_end < 0 || m_sta < 0 || m_sta > 59 || m_end < 0 || m_end > 59) {
                            console.log("超过范围  提示错误");
                            return;
                        }
                        me.timeCountReverse(h_sta, m_sta, h_end, m_end);
                        $('.time-range>span>input').each(function (i, d) {
                            if ($(d).val() < 10 && $(d).val().length < 2) {
                                $(d).val("0" + $(d).val());
                            }
                        });
                        console.log($('#drawShow>li>span.active'));
                        var L = parseFloat($('#drawShow>li>span.active')[0].style.left) + vmTimeDraw.grid.gridLeft;
                        $(".time-range").css({ 'left': L });
                    });
                    $("#timeDel").click(function () {
                        $(this).parents('#draw').find('ol>li>span.active').remove();
                        $(this).parents('p').hide();
                    });
                    $("#addTimes").click(function () {
                        if ($('#drawShow>li').length !== (me.selfTimes + vmTimeDraw.grid.rect)) {
                            var St = $('#StartTime').val();
                            var Et = $('#EndTime').val();
                            if (!St) {
                                console.log("空");
                            }
                            else {
                                if ($('#drawShow>li').length === (vmTimeDraw.shape.selfTimes + vmTimeDraw.grid.rect)) {
                                    console.log("超过上限");
                                }
                                else {
                                    if (St > Et && !!Et) {
                                        console.log("开始大于结束");
                                        return;
                                    }
                                    ;
                                    for (var i = 0; i < me.defineLineList.length; i++) {
                                        if ((typeof me.defineLineList[i]) === "string") {
                                            if (St.indexOf(me.defineLineList[i]) !== -1 || Et.indexOf(me.defineLineList[i]) !== -1) {
                                                console.log("已添加的单日期时间 存在");
                                                return;
                                            }
                                        }
                                        else {
                                            var group = me.defineLineList[i].group.split(',');
                                            if (group[0] <= St && St <= group[1] || group[0] <= Et && Et <= group[1]) {
                                                console.log("被包含相等的情况");
                                                return;
                                            }
                                        }
                                    }
                                    ;
                                    $('#drawShow').append("<li value='" + $('#drawShow').find('li').length + "'></li>");
                                    me.resetDraw(1);
                                    var liWidth = $('.week').width();
                                    var liHeight = $('.week li').height();
                                    if (St === Et || St && !Et) {
                                        $('#timeTable .week').append("<li class='position-r' style='width:"
                                            + liWidth + "px;height:"
                                            + liHeight + "px'><span>"
                                            + St
                                            + "</span><i style='right:"
                                            + (-vmTimeDraw.grid.gridW - 16 - 10 - 10) + "px;top:"
                                            + (vmTimeDraw.grid.rectH - 16) / 2 + "px' " +
                                            "class='position-a' title='" +
                                            "$rootATMS" + "'></i></li>");
                                        $('.week>li:last-child>i').on('click', me._defineDel);
                                        me.defineLineList.push(St);
                                    }
                                    else {
                                        $('#timeTable .week').append("<li class='position-r' style='width:" + liWidth + "px;height:" + liHeight + "px'>" +
                                            "<a style='top:" + liHeight / 3 + "px'>" + St + "</a>" +
                                            "<a style='top:" + liHeight / 4 * 3 + "px'>" + Et +
                                            "</a><i style='right:" +
                                            (-vmTimeDraw.grid.gridW - 16 - 10 - 10) +
                                            "px;top:" +
                                            (vmTimeDraw.grid.rectH - 16) / 2 +
                                            "px' class='position-a' title='" +
                                            "$rootATMS" + "'></i></li>");
                                        $('.week>li:last-child>i').on('click', me._defineDel);
                                        me.defineLineList.push({ 'group': St + "," + Et });
                                    }
                                }
                            }
                        }
                    });
                },
                _customLineDel: function _customLineDel() {
                    var n = $(this).parents('li').index();
                    $('#drawShow li').eq(n).remove();
                    $(this).parents('li').remove();
                    this.resetDraw(0);
                },
                resetDraw: function (addOrReduce) {
                    var currentRect = $('#timeTable .week').children().length;
                    console.log(currentRect);
                    $('.grids-rect').html("");
                    $('.grids-line').html("");
                    vmTimeDraw.grid.init(currentRect + Number(addOrReduce));
                },
                _defineDel: function _defineDel() {
                    var n = $(this).parents('li').index();
                    $('#drawShow li').eq(n).remove();
                    $(this).parents('li').remove();
                    this.resetDraw(0);
                },
                setTime: function (h1, m1, h2, m2, arr) {
                    if (arr[0]) {
                        $('.time-range>span').eq(0).find('input').eq(0).val(h1);
                        $('.time-range>span').eq(0).find('input').eq(1).val(m1);
                    }
                    if (arr[1]) {
                        $('.time-range>span').eq(1).find('input').eq(0).val(h2);
                        $('.time-range>span').eq(1).find('input').eq(1).val(m2);
                    }
                },
                timeCount: function (start, end) {
                    this.h1 = (start / vmTimeDraw.grid.gridW * 24) ^ 0;
                    this.m1 = (start / vmTimeDraw.grid.gridW * 24 * 60 % 60) ^ 0;
                    this.h2 = (end / vmTimeDraw.grid.gridW * 24) ^ 0;
                    this.m2 = (end / vmTimeDraw.grid.gridW * 24 * 60 % 60) ^ 0;
                    this.h1 = this.concatStr(this.h1);
                    this.m1 = this.concatStr(this.m1);
                    this.h2 = this.concatStr(this.h2);
                    this.m2 = this.concatStr(this.m2);
                    return (this.h1 + ":" + this.m1 + "-" + this.h2 + ":" + this.m2);
                },
                concatStr: function (num) {
                    return (num < 10) ? ("0" + num) : "" + num;
                },
                timeCountReverse: function (h1, m1, h2, m2) {
                    var scale = vmTimeDraw.grid.gridW / (24 * 60);
                    var x1 = (h1 * 60 + m1) * scale - 0;
                    var x2 = (h2 * 60 + m2) * scale - 0;
                    var li_n = $('#drawShow>li>span.active').parent('li').index();
                    var target = $('#drawShow>li>span.active')[0];
                    this.drawShapeInLine(x1, x2, li_n, "alter", target);
                },
                alterActive: function (x1, x2) {
                    var shapeType = vmTimeDraw.activeTimeType;
                    var shapeBgColor = vmTimeDraw.getTimeShapeBg(shapeType);
                    $("#drawShow>li>span.active").css({
                        "left": x1 + "px",
                        "width": x2 - x1 + "px",
                        "height": this.liHeight - 1 + "px",
                        "background-color": shapeBgColor
                    }).attr(vmTimeDraw.dataTimeAttrName, this.timeCount(x1, x2))
                        .attr(vmTimeDraw.dataTimeTypeAttrName, vmTimeDraw.activeTimeType);
                },
                MSdown: function (e) {
                    this.MSDOWN = true;
                    this.drawX1 = e.offsetX;
                    this.drawY1 = e.offsetY;
                },
                MSmove: function (e) {
                    if (this.MSDOWN) {
                        this.OSX = e.offsetX - this.drawX1;
                        this.OSY = e.offsetY - this.drawY1;
                        this.drawarea();
                        $("#drawBox")[0].style.display = 'block';
                    }
                },
                MSup: function (e) {
                    this.MSDOWN = false;
                    this.drawX2 = e.offsetX;
                    if (this.drawX1 > this.drawX2) {
                        this.drawX1 = [this.drawX2, [this.drawX2 = this.drawX1]][0];
                    }
                    this.drawY2 = e.offsetY;
                    if (this.drawY1 > this.drawY2) {
                        this.drawY1 = [this.drawY2, [this.drawY2 = this.drawY1]][0];
                    }
                    $("#drawBox")[0].style.display = 'none';
                },
                MSout: function (e) {
                    this.drawX2 = e.offsetX;
                    this.drawY2 = e.offsetY;
                    this.MSDOWN = false;
                    $("#drawBox")[0].style.display = 'none';
                    this.resetBox();
                },
                zIndex: function (z) {
                    if (z == 96) {
                        $("#drawShow")[0].style.zIndex = 96;
                    }
                    else if (z == 99) {
                        $("#drawShow")[0].style.zIndex = 99;
                    }
                },
                drawarea: function () {
                    if (this.OSX > 0) {
                        $("#drawBox")[0].style.left = this.drawX1 + "px";
                        $("#drawBox")[0].style.width = this.OSX + "px";
                    }
                    else {
                        $("#drawBox")[0].style.left = this.drawX1 + this.OSX + "px";
                        $("#drawBox")[0].style.width = -this.OSX + "px";
                    }
                    ;
                    if (this.OSY > 0) {
                        $("#drawBox")[0].style.top = this.drawY1 + "px";
                        $("#drawBox")[0].style.height = this.OSY + "px";
                    }
                    else {
                        $("#drawBox")[0].style.top = this.drawY1 + this.OSY + "px";
                        $("#drawBox")[0].style.height = -this.OSY + "px";
                    }
                    this.DRAWED = true;
                },
                resetBox: function () {
                    $("#drawBox")[0].style.top = 0;
                    $("#drawBox")[0].style.left = 0;
                    $("#drawBox")[0].style.width = 0;
                    $("#drawBox")[0].style.height = 0;
                },
                addRect: function () {
                    if (this.DRAWED) {
                        this.li_0 = this.drawY1 / $('.week li').height() ^ 0;
                        this.li_n = this.drawY2 / $('.week li').height() ^ 0;
                        this.drawTime(this.li_0, this.li_n);
                    }
                },
                drawTime: function (start, end) {
                    if (start > end) {
                        start = [end, [end = start]][0];
                    }
                    var x1 = this.drawX1;
                    var x2 = this.drawX2;
                    var left = vmTimeDraw.grid.gridLeft;
                    var w = vmTimeDraw.grid.gridW;
                    x1 = (x1 <= left ? 0 : x1 >= (w + left) ? w : x1 - left);
                    x2 = (x2 <= left ? 0 : x2 >= (w + left) ? w : x2 - left);
                    for (var sta = start; sta <= end; sta++) {
                        this.sp = $('#drawShow li').eq(sta).find('span').length;
                        if (this.sp === 0) {
                            this.drawShape(x1, x2, sta);
                        }
                        else {
                            this.drawShapeInLine(x1, x2, sta, "newShape", null);
                        }
                    }
                },
                drawShape: function (x1, x2, li_n, timeType) {
                    var shapeType = !!timeType ? timeType : vmTimeDraw.activeTimeType;
                    var shapeBgColor = vmTimeDraw.getTimeShapeBg(shapeType);
                    this.liHeight = vmTimeDraw.grid.rectH;
                    var htmlSpanStr = "<span style = 'left:"
                        + x1 + "px"
                        + ";background-color:" + shapeBgColor
                        + ";width:" + Math.abs(x2 - x1) + "px"
                        + ";height:" + (this.liHeight - 1) + "px" + "'"
                        + " class = 'normal'"
                        + " " + vmTimeDraw.dataTimeAttrName + " = '" + this.timeCount(x1, x2) + "'"
                        + " " + vmTimeDraw.dataTimeTypeAttrName + " = '" + shapeType + "'"
                        + " ></span>";
                    console.log(htmlSpanStr);
                    $('#drawShow li').eq(li_n).append(htmlSpanStr);
                    this.deleteWEmpty(li_n);
                    $('.time-range').hide();
                    this.DRAWED = false;
                },
                deleteWEmpty: function (li_n) {
                    $('#drawShow li').eq(li_n).find('span').each(function (i, d) {
                        if (parseFloat($(d)[0].style.width) === 0) {
                            $(d).remove();
                        }
                    });
                },
                drawShapeInLine: function (x1, x2, sta, action, alterTarget) {
                    var left = 0;
                    var right = 0;
                    var newL = null, newR = null;
                    var span = !!alterTarget ?
                        $('#drawShow li').eq(sta).find("span.normal") :
                        $('#drawShow li').eq(sta).find("span");
                    var newShapeItem = {
                        startX: x1,
                        endX: x2,
                        type: vmTimeDraw.activeTimeType
                    };
                    if (span.length > 0) {
                        for (var i = 0; i < span.length; i++) {
                            var _newShapeItem = vmTimeDraw.getUpdateList(sta, span[i], newShapeItem.startX, newShapeItem.endX);
                            if (_newShapeItem === null) {
                            }
                            else {
                                newShapeItem.startX = _newShapeItem.startX;
                                newShapeItem.endX = _newShapeItem.endX;
                                $(span[i]).remove();
                            }
                        }
                    }
                    else {
                        var _newShapeItem = vmTimeDraw.getUpdateList(sta, alterTarget, newShapeItem.startX, newShapeItem.endX);
                        if (_newShapeItem !== null) {
                            newShapeItem.startX = _newShapeItem.startX;
                            newShapeItem.endX = _newShapeItem.endX;
                            if (action === "alter") {
                            }
                        }
                    }
                    if (action === "newShape") {
                        this.drawShape(newShapeItem.startX, newShapeItem.endX, sta);
                    }
                    else {
                        this.alterActive(newShapeItem.startX, newShapeItem.endX);
                    }
                },
                clearShape: function () {
                    $('#drawShow>li').children('span').remove();
                },
            };
        }
        TimeDraw.prototype.drawByWeekItems = function (weekItems) {
            var _this = this;
            var rectXs;
            var liIndex;
            angular.forEach(weekItems, function (val) {
                liIndex = Number(val.DayOfWeek);
                console.log("=============" + liIndex);
                console.log(val.TimeItems.length);
                angular.forEach(val.TimeItems, function (hVal, indexH) {
                    console.log(hVal, "`1``````````````````" + indexH);
                    rectXs = _this.timeCountReverse(hVal.StarTime, hVal.EndTime);
                    _this.shape.drawShape(rectXs[0], rectXs[1], liIndex, hVal.ThresholdType);
                    console.log("+++++++++++++++" + rectXs);
                });
            });
        };
        ;
        TimeDraw.prototype.setTimeTypeParamsList = function () {
            var _timeTypeParamsList = {};
            var _timeTypeParamsItem;
            _timeTypeParamsItem = {
                styleBg: "#fb9d49",
                styleBorder: "1px solid #fb9d49",
                key: ThresholdType_1.ThresholdType.Low.value
            };
            _timeTypeParamsList[ThresholdType_1.ThresholdType.Low.value] = _timeTypeParamsItem;
            _timeTypeParamsItem = {
                styleBg: "#fb9d49",
                styleBorder: "1px solid red",
                key: ThresholdType_1.ThresholdType.Low.value
            };
            _timeTypeParamsList[ThresholdType_1.ThresholdType.Low.value] = _timeTypeParamsItem;
            _timeTypeParamsItem = {
                styleBg: "#4394ff",
                styleBorder: "1px solid red",
                key: ThresholdType_1.ThresholdType.Hight.value
            };
            _timeTypeParamsList[ThresholdType_1.ThresholdType.Hight.value] = _timeTypeParamsItem;
            _timeTypeParamsItem = {
                styleBg: "#2acc57",
                styleBorder: "1px solid red",
                key: ThresholdType_1.ThresholdType.Capture.value
            };
            _timeTypeParamsList[ThresholdType_1.ThresholdType.Capture.value] = _timeTypeParamsItem;
            _timeTypeParamsItem = {
                styleBg: "#BAE1FE",
                styleBorder: "1px solid red",
                key: "default"
            };
            _timeTypeParamsList["defaultType"] = _timeTypeParamsItem;
            return _timeTypeParamsList;
        };
        TimeDraw.prototype.getTimeShapeBg = function (shapeType) {
            var colorStr = "#4394ff";
            if (!!shapeType && this.timeTypeParamsList[shapeType]) {
                colorStr = this.timeTypeParamsList[shapeType].styleBg;
            }
            console.log("%c ========改变将要绘制的颜色========", "color:" + colorStr);
            return colorStr;
        };
        TimeDraw.prototype.deleteDateItem = function (target) {
            console.log($(target).parents('li').index());
            var n = $(target).parents('li').index();
            $('#drawShow li').eq(n).remove();
            $(target).parents('li').remove();
            console.log($(target).parents('li'));
            console.log(this.shape.defineLineList);
            console.log(n - 7);
            this.shape.defineLineList.splice(n - 7, 1);
            console.log(this.shape.defineLineList);
            this.shape.resetDraw(0);
        };
        ;
        return TimeDraw;
    }());
    exports.TimeDraw = TimeDraw;
    var ShapeItem = (function () {
        function ShapeItem() {
        }
        return ShapeItem;
    }());
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
