define(["require", "exports", "text!./runPlan.popup.html", "../../common/app/main.app", "../../common/directive/page/page-params", "../../../core/params/TimeTemplateParams", "./runPlan.popup.controller", "../../common/services/timeTemplate.service"], function (require, exports, runPlanPopupHtml, main_app_1, page_params_1, TimeTemplateParams_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RunPlanController = (function () {
        function RunPlanController($scope, $timeout, layer, i18nFactory, timeTemplateService) {
            var _this = this;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.layer = layer;
            this.i18nFactory = i18nFactory;
            this.timeTemplateService = timeTemplateService;
            this.tableNoData = false;
            this.pageParams = new page_params_1.default();
            this.isSelectAll = false;
            this.getListBySearch = function () {
                _this.findListParams.currentPage = 1;
                _this.getTableListByListParams(_this.findListParams);
            };
            this.initTableParams();
            this.getTableListByListParams(this.findListParams);
        }
        ;
        RunPlanController.prototype.initTableParams = function () {
            this.findListParams = new TimeTemplateParams_1.TimeTemplateListParams();
            this.findListParams.currentPage = this.pageParams.currentPage;
            this.findListParams.pageSize = this.pageParams.pageSize;
            this.ButtonList = [
                { value: 'all', text: '全部' },
                { value: 'peopleControl', text: '人像布控' },
                { value: 'VehicleControl', text: '车辆布控' },
                { value: 'MacControl', text: 'MAC布控' },
                { value: 'peopleStructure', text: '人像结构化' },
                { value: 'VehicleStructure', text: '车辆结构化' },
            ];
            this.tHeadList = [
                { field: "Name", title: "DP_CONFIG_COMMON_03" },
                { field: "Code", title: "DP_CONFIG_COMMON_45" },
                { field: "Description", title: "DP_CONFIG_COMMON_34" },
                { field: "bottoms", title: "DP_CONFIG_COMMON_35" }
            ];
            this.tBodyList = [];
        };
        RunPlanController.prototype.getTableListByListParams = function (reqParams) {
            var _this = this;
            this.timeTemplateService.findByListParams(reqParams).then(function (resp) {
                if (resp.code === 200) {
                    var pageParams = new page_params_1.default();
                    pageParams.setCurrentPage(reqParams.currentPage);
                    pageParams.setPageSize(reqParams.pageSize);
                    pageParams.setTotalCount(resp.data.TotalCount);
                    _this.pageParams = pageParams;
                    _this.findListParams = reqParams;
                    _this.setTBodyList(resp.data.Result);
                }
            });
        };
        ;
        RunPlanController.prototype.deleteById = function (_index) {
            var _this = this;
            var titleStr = this.i18nFactory("DP_CONFIG_RUNPLAN_07", { value: _index.Name });
            this.layer.confirm(titleStr, {
                icon: 0,
                title: this.i18nFactory('DP_CONFIG_COMMON_42'),
                area: ["500px", "200px"],
                btn: [this.i18nFactory('DP_CONFIG_COMMON_05'), this.i18nFactory('DP_CONFIG_COMMON_19')]
            }, function (index) {
                _this.layer.close(index);
                _this.submitDelete([_index.ID]);
            });
        };
        RunPlanController.prototype.deleteByIds = function () {
            var _this = this;
            var selectedDataList = this.getSelectedList();
            if (!selectedDataList || selectedDataList.length == 0) {
                console.error("============", "当前未选择数据");
                return;
            }
            var ids = [];
            selectedDataList.forEach(function (server) {
                ids.push(server.ID);
            });
            var showText = this.i18nFactory("DP_CONFIG_RUNPLAN_08", { value: ids.length });
            this.layer.confirm(showText, {
                icon: 0,
                title: this.i18nFactory('DP_CONFIG_COMMON_42'),
                area: ["500px", "200px"],
                btn: [this.i18nFactory('DP_CONFIG_COMMON_05'), this.i18nFactory('DP_CONFIG_COMMON_19')]
            }, function (index) {
                _this.layer.close(index);
                _this.submitDelete(ids);
            });
        };
        RunPlanController.prototype.submitDelete = function (ids) {
            var _this = this;
            this.timeTemplateService.deleteByIds(ids).then(function (resp) {
                if (resp.code == 200) {
                    _this.findListParams.currentPage = 1;
                    _this.getTableListByListParams(_this.findListParams);
                }
            });
        };
        RunPlanController.prototype.afterChangeCheck = function (resultList, isCheckAll) {
            this.selectedList = resultList;
            this.isSelectAll = isCheckAll;
        };
        ;
        RunPlanController.prototype.getSelectedList = function () {
            var _this = this;
            var selectedDataList = [];
            if (this.selectedList) {
                this.tBodyList.forEach(function (val, index) {
                    if (_this.selectedList[index]) {
                        selectedDataList.push(val);
                    }
                });
            }
            return selectedDataList;
        };
        ;
        RunPlanController.prototype.setTBodyList = function (dataList) {
            console.log(dataList);
            if (dataList && dataList.length > 0) {
                this.tBodyList = dataList;
                this.tableNoData = false;
            }
            else {
                this.tBodyList = [];
                this.tableNoData = true;
            }
        };
        ;
        RunPlanController.prototype.changePage = function (num) {
            this.findListParams.currentPage = num;
            this.getTableListByListParams(this.findListParams);
        };
        RunPlanController.prototype.changePageSize = function (num) {
            this.findListParams.currentPage = 1;
            this.findListParams.pageSize = num;
            this.getTableListByListParams(this.findListParams);
        };
        RunPlanController.prototype.updateModel = function (model) {
            this.openSaveOrUpdateModal(true, model);
        };
        ;
        RunPlanController.prototype.addModel = function () {
            this.openSaveOrUpdateModal(false, null);
        };
        ;
        RunPlanController.prototype.openSaveOrUpdateModal = function (isUpdate, modelData) {
            var _this = this;
            var scope = this.$scope.$new();
            var titleStr = '';
            if (isUpdate) {
                scope.isUpdate = true;
                scope.timeTplModel = modelData;
                titleStr = this.i18nFactory('DP_CONFIG_COMMON_38');
            }
            else {
                scope.isUpdate = false;
                titleStr = this.i18nFactory('DP_CONFIG_COMMON_40');
            }
            this.layer.open({
                type: 1,
                title: titleStr,
                content: runPlanPopupHtml,
                skin: 'update-runPlan-layer',
                scope: scope,
                area: ["auto", "auto"],
                success: function (id) {
                    console.log(id);
                },
                end: function () {
                    scope.$destroy();
                }
            }).then(function (index) {
                _this.openCloseLayerWatch();
                _this.setUpdateLayerIndex(index);
            });
        };
        ;
        RunPlanController.prototype.setUpdateLayerIndex = function (index) {
            this.updateLayerIndex = index;
        };
        ;
        RunPlanController.prototype.closeUpdateLayer = function () {
            this.layer.close(this.updateLayerIndex);
        };
        RunPlanController.prototype.getUpdateLayerIndex = function () {
            return this.updateLayerIndex;
        };
        ;
        RunPlanController.prototype.openCloseLayerWatch = function () {
            var _this = this;
            if (!this.updateLayerIndex) {
                this.$scope.$on('add.runplan.popup', function (even, isFresh) {
                    if (isFresh) {
                        _this.getTableListByListParams(_this.findListParams);
                    }
                    _this.closeUpdateLayer();
                });
            }
        };
        RunPlanController.$inject = ['$scope', '$timeout',
            'layer',
            'i18nFactory',
            'timeTemplateService'];
        return RunPlanController;
    }());
    main_app_1.app.controller('runPlanController', RunPlanController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
