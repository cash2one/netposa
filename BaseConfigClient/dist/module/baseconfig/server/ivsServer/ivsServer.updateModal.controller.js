define(["require", "exports", "../../../common/app/main.app", "../../../common/directive/tree/tree-params", "../../../../core/entity/ex/IvsServerEx", "../../../../core/entity/Area", "../../../../core/enum/IvsServerType", "../../../common/services/area.service", "../../../common/services/ivsServer.service", "../../../common/services/proxyServer.service", "angular"], function (require, exports, main_app_1, tree_params_1, IvsServerEx_1, Area_1, IvsServerType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IvsServerUpdateModalController = (function () {
        function IvsServerUpdateModalController($scope, proxyServerService, ivsServerService, $timeout, areaService) {
            this.$scope = $scope;
            this.proxyServerService = proxyServerService;
            this.ivsServerService = ivsServerService;
            this.$timeout = $timeout;
            this.areaService = areaService;
            this.isUpdate = false;
            this.ivsServerTypeList = [];
            this.proxyServerList = [];
            for (var key in IvsServerType_1.IvsServerType) {
                this.ivsServerTypeList.push(IvsServerType_1.IvsServerType[key]);
            }
            this.areaTreeDatas = new tree_params_1.TreeDataParams(true);
            this.areaTreeDatas.treeId = 'modalArea';
            this.areaTreeDatas.onClick = treeSelectNode;
            this.areaTreeDatas.treeInitComplete = treeInitComplete;
            if (this.$scope.updateModalParams.isUpdate) {
                this.currentServe = this.$scope.updateModalParams.updateModel;
                this.areaTreeDatas.defaultSelectTreeId = this.currentServe.AreaID;
                this.areaTreeDatas.isDefaultSelected = true;
            }
            else {
                this.currentServe = new IvsServerEx_1.IvsServerEx();
                this.currentServe.AreaModel = new Area_1.Area();
                if (this.$scope.updateModalParams.defaultDatas) {
                    this.areaTreeDatas.defaultSelectTreeId = this.$scope.updateModalParams.defaultDatas.areaId;
                    this.areaTreeDatas.isDefaultSelected = true;
                }
            }
            console.log("%c =====VideoServerUpdatePopupController $scope=====start==============", "color:blue");
            console.log("初始化 ctrl 传过来的参数");
            console.log(this.currentServe);
            console.log(this.areaTreeDatas);
            console.log("%c =========end===============", "color:blue");
            var self_this = this;
            $scope.$on("$destroy", function () {
                console.log("%c =====VideoServerUpdatePopupController $scope.$destroy=====start==============", "color:green");
                console.log("销毁了弹出框");
                console.log("%c =========end===============", "color:green");
            });
            this.getProxyServerList();
            this.getAreaTree();
            function treeInitComplete(treeId) {
                console.log("%c ===ivs tree =======start==============", 'color:green');
                console.log(treeId);
                console.log("=========end===============");
            }
            function treeSelectNode(event, treeId, treeNode) {
                console.log("treeSelectNode  treeId", treeId);
                console.log("treeSelectNode 回调函数", treeNode);
                self_this.$timeout(function () {
                    self_this.setIvsServerArea(treeNode);
                });
            }
        }
        IvsServerUpdateModalController.prototype.setIvsServerArea = function (area) {
            this.currentServe.AreaModel = new Area_1.Area();
            this.currentServe.AreaModel.ID = area.ID;
            this.currentServe.AreaModel.Name = area.Name;
            this.currentServe.AreaID = area.ID;
            console.log(this.currentServe);
        };
        ;
        IvsServerUpdateModalController.prototype.commitSaveOrUpdate = function () {
            var _this = this;
            console.log(this.currentServe);
            var checkStr = this.validateParams(this.currentServe);
            if (checkStr) {
                console.log("=======checkStr===result==============");
                console.log(checkStr + "未填写");
                console.log("=========end===============");
                return;
            }
            else {
                console.log("=======checkStr===result==============");
                console.log("参数全已经填写");
                console.log("=========end===============");
            }
            if (this.currentServe.ID) {
                console.log("=========更新===============");
                this.ivsServerService.update(this.currentServe).then(function (resp) {
                    if (resp.code == 200) {
                        _this.closeUpdateModel(true);
                    }
                });
            }
            else {
                console.log("===========新加=============");
                this.ivsServerService.save(this.currentServe).then(function (resp) {
                    if (resp.code == 200) {
                        _this.closeUpdateModel(true);
                    }
                });
            }
        };
        ;
        IvsServerUpdateModalController.prototype.closeUpdateModel = function (isCommit) {
            this.$scope.$emit('closeServerUpdateModel', { isCommit: isCommit });
        };
        IvsServerUpdateModalController.prototype.getAreaTree = function (keyword) {
            var reqParams = {
                keyword: ''
            };
            if (keyword) {
                reqParams.keyword = keyword;
            }
            var self_this = this;
            this.areaService.findListTree(reqParams).then(function (resp) {
                self_this.setModalAreaTree(resp);
            });
        };
        IvsServerUpdateModalController.prototype.changeIsShowAreaTree = function () {
            this.areaTreeDatas.isShow = !this.areaTreeDatas.isShow;
            console.log(this.currentServe);
        };
        ;
        IvsServerUpdateModalController.prototype.setModalAreaTree = function (data) {
            this.areaTreeDatas.treeDatas = data;
        };
        IvsServerUpdateModalController.prototype.getProxyServerList = function () {
            var _this = this;
            this.proxyServerService.findAll().then(function (resp) {
                if (resp.code == 200) {
                    _this.proxyServerList = resp.data;
                }
            });
        };
        IvsServerUpdateModalController.prototype.validateParams = function (model) {
            if (!model.AreaModel) {
                return 'AreaModel';
            }
            if (!model.Code) {
                return 'Code';
            }
            if (!model.IpAddress) {
                return 'IpAddress';
            }
            if (!model.Name) {
                return 'Name';
            }
            if (!model.Port) {
                return 'Port';
            }
            if (!model.Pwd) {
                return 'Pwd';
            }
            if (!model.Uid) {
                return 'Uid';
            }
            if (!model.ServerType) {
                return 'ServerType';
            }
            return '';
        };
        IvsServerUpdateModalController.$inject = ['$scope', 'proxyServerService', 'ivsServerService', '$timeout', 'areaService'];
        return IvsServerUpdateModalController;
    }());
    main_app_1.app
        .controller('ivsServerUpdateModalController', IvsServerUpdateModalController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
