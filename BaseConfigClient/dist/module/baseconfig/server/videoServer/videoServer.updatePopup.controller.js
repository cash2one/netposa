define(["require", "exports", "../../../common/app/main.app", "../../../common/directive/tree/tree-params", "../../../../core/entity/ex/VideoServerEx", "../../../../core/entity/Area", "../../../../core/enum/VideoServerType", "../../../common/services/videoServer.service", "../../../common/services/area.service", "angular"], function (require, exports, main_app_1, tree_params_1, VideoServerEx_1, Area_1, VideoServerType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VideoServerUpdatePopupController = (function () {
        function VideoServerUpdatePopupController($scope, serverService, $timeout, areaService) {
            this.$scope = $scope;
            this.serverService = serverService;
            this.$timeout = $timeout;
            this.areaService = areaService;
            this.isUpdate = false;
            this.videoServerTypeList = [];
            this.ProxyList = [];
            this.ProxyList = this.$scope.proxyListForVideo;
            for (var key in VideoServerType_1.VideoServerType) {
                this.videoServerTypeList.push(VideoServerType_1.VideoServerType[key]);
            }
            this.areaTreeDatas = new tree_params_1.TreeDataParams(true);
            this.areaTreeDatas.treeId = 'modalArea';
            this.areaTreeDatas.onClick = treeSelectNode;
            this.areaTreeDatas.treeInitComplete = treeInitComplete;
            if (this.$scope.updateModalParams.isUpdate) {
                this.currentServe = this.$scope.updateModalParams.updateModel;
                this.areaTreeDatas.defaultSelectTreeId = this.currentServe.AreaID;
                this.areaTreeDatas.isDefaultSelected = true;
            }
            else {
                this.currentServe = new VideoServerEx_1.VideoServerEx();
                this.currentServe.AreaModel = new Area_1.Area();
                if (this.$scope.updateModalParams.defaultDatas) {
                    this.areaTreeDatas.defaultSelectTreeId = this.$scope.updateModalParams.defaultDatas.areaId;
                    this.areaTreeDatas.isDefaultSelected = true;
                }
            }
            console.log("%c =====VideoServerUpdatePopupController $scope=====start==============", "color:blue");
            console.log("初始化 ctrl 传过来的参数");
            console.log(this.currentServe);
            console.log("%c =========end===============", "color:blue");
            var self_this = this;
            $scope.$on("$destroy", function () {
                console.log("%c =====VideoServerUpdatePopupController $scope.$destroy=====start==============", "color:green");
                console.log("销毁了弹出框");
                console.log("%c =========end===============", "color:green");
            });
            this.getAreaTree();
            function treeInitComplete(treeId) {
                console.log("%c ===treeInitComplete=======start==============", 'color:green');
                console.log(treeId);
                console.log("=========end===============");
            }
            function treeSelectNode(event, treeId, treeNode) {
                console.log("treeSelectNode  treeId", treeId);
                console.log("treeSelectNode 回调函数", treeNode);
                self_this.$timeout(function () {
                    self_this.setVideoServerArea(treeNode);
                });
            }
        }
        VideoServerUpdatePopupController.prototype.commitSaveOrUpdate = function () {
            var _this = this;
            console.log(this.currentServe);
            var checkStr = this.validateParams(this.currentServe);
            if (checkStr) {
                console.log("=======checkStr===result==============");
                console.log(checkStr + "未填写");
                console.log("=========end===============");
                return;
            }
            else {
                console.log("=======checkStr===result==============");
                console.log("参数全已经填写");
                console.log("=========end===============");
            }
            this.currentServe.AreaID = this.currentServe.AreaModel.ID;
            if (this.currentServe.ID) {
                console.log("=========更新===============");
                this.serverService.update(this.currentServe).then(function (resp) {
                    if (resp.Code == 200) {
                        _this.closeUpdateModel(true);
                    }
                });
            }
            else {
                console.log("===========新加=============");
                this.serverService.save(this.currentServe).then(function (resp) {
                    if (resp.Code == 200) {
                        _this.closeUpdateModel(true);
                    }
                });
            }
        };
        ;
        VideoServerUpdatePopupController.prototype.closeUpdateModel = function (isCommit) {
            this.$scope.$emit('closeServerUpdateModel', { isCommit: isCommit });
        };
        VideoServerUpdatePopupController.prototype.getAreaTree = function (keyword) {
            var reqParams = {
                keyword: ''
            };
            if (keyword) {
                reqParams.keyword = keyword;
            }
            var self_this = this;
            this.areaService.findListTree(reqParams).then(function (resp) {
                self_this.setModalAreaTree(resp);
            });
        };
        VideoServerUpdatePopupController.prototype.changeIsShowAreaTree = function () {
            this.areaTreeDatas.isShow = !this.areaTreeDatas.isShow;
            console.log(this.currentServe);
        };
        ;
        VideoServerUpdatePopupController.prototype.setVideoServerArea = function (area) {
            this.currentServe.AreaModel = new Area_1.Area();
            this.currentServe.AreaModel.ID = area.ID;
            this.currentServe.AreaModel.Name = area.Name;
            this.currentServe.AreaID = area.ID;
            console.log(this.currentServe);
        };
        ;
        VideoServerUpdatePopupController.prototype.setModalAreaTree = function (data) {
            this.areaTreeDatas.treeDatas = data;
        };
        VideoServerUpdatePopupController.prototype.validateParams = function (model) {
            if (!model.AreaModel) {
                return 'AreaModel';
            }
            if (!model.Code) {
                return 'Code';
            }
            if (!model.IpAddress) {
                return 'IpAddress';
            }
            if (!model.Name) {
                return 'Name';
            }
            if (!model.Port) {
                return 'Port';
            }
            if (!model.Pwd) {
                return 'Pwd';
            }
            if (!model.Uid) {
                return 'Uid';
            }
            if (!model.VideoServerType) {
                return 'VideoServerType';
            }
            return '';
        };
        VideoServerUpdatePopupController.$inject = ['$scope', 'videoServerService', '$timeout', 'areaService'];
        return VideoServerUpdatePopupController;
    }());
    main_app_1.app
        .controller('videoServerUpdatePopupController', VideoServerUpdatePopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
