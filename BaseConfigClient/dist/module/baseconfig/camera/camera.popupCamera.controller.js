define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../../core/enum/TreeType", "../../../core/enum/ObjectType", "../../common/directive/tree/tree.directive.service", "../../common/services/connectTree.service", "../../common/factory/layerMsg.factory"], function (require, exports, main_app_1, tree_params_1, TreeType_1, ObjectType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CameraPopupController = (function () {
        function CameraPopupController($scope, areaService, $timeout, cameraService, treeService, connectTreeService, layerDec) {
            this.$scope = $scope;
            this.areaService = areaService;
            this.$timeout = $timeout;
            this.cameraService = cameraService;
            this.treeService = treeService;
            this.connectTreeService = connectTreeService;
            this.layerDec = layerDec;
            this.cacheChangeNodes = {};
            this.type = $scope.type;
            this.rightSelectTreeNodeId = null;
            this.initTreeParams();
            this.getLeftTreeData();
            this.getRightTreeData();
        }
        CameraPopupController.prototype.initTreeParams = function () {
            var _this = this;
            this.leftTreeParams = new tree_params_1.TreeDataParams(true);
            this.leftTreeParams.treeId = "devicePopupLeftTree";
            this.leftTreeParams.isShowIcon = true;
            this.leftTreeParams.isShowLine = false;
            this.leftTreeParams.isSimpleData = true;
            this.leftTreeParams.checkEnable = false;
            this.leftTreeParams.isSingleSelect = false;
            this.leftTreeParams.editEnable = true;
            this.leftTreeParams.showRemoveBtn = false;
            this.leftTreeParams.showRenameBtn = false;
            this.leftTreeParams.beforeDrop = beforeDropRule;
            this.leftTreeParams.beforeDrag = beforeDragRule;
            if (this.type === TreeType_1.TreeType.lamp.value) {
                this.leftTreeParams.addDiyDom = function (treeId, treeNode) {
                    _this.treeService.addDiyDomIsConfiStatus(treeId, treeNode);
                };
            }
            this.rightTreeParams = new tree_params_1.TreeDataParams(true);
            this.rightTreeParams.treeId = "devicePopupRightTree";
            this.rightTreeParams.isShowIcon = true;
            this.rightTreeParams.isShowLine = false;
            this.rightTreeParams.isSimpleData = true;
            this.rightTreeParams.checkEnable = false;
            this.rightTreeParams.isSingleSelect = false;
            this.rightTreeParams.editEnable = true;
            this.rightTreeParams.showRemoveBtn = false;
            this.rightTreeParams.showRenameBtn = false;
            this.rightTreeParams.beforeDrop = beforeDropRule;
            this.rightTreeParams.beforeDrag = beforeDragRule;
            var _self = this;
            function beforeDropRule(treeId, treeNodes, targetNode) {
                if (treeId == _self.leftTreeParams.treeId) {
                    return false;
                }
                if (_self.type === TreeType_1.TreeType.lamp.value && targetNode.treeType !== TreeType_1.TreeType.lamp.value) {
                    return false;
                }
                if (_self.type === TreeType_1.TreeType.area.value && targetNode.treeType !== TreeType_1.TreeType.area.value) {
                    return false;
                }
                var newNodeList = [];
                var updateNodeList = [];
                treeNodes.forEach(function (item) {
                    item.isConfigLamp = true;
                    item.ParentID = targetNode.ID;
                    var node = _self.treeService.getNodeByParam(treeId, 'ID', item.ID);
                    if (node) {
                        updateNodeList.push(item);
                    }
                    else {
                        newNodeList.push(item);
                    }
                });
                if (updateNodeList.length > 0) {
                    _self.$timeout(function () {
                        _self.treeService.removeNodes(treeId, updateNodeList);
                        _self.treeService.addNodes(treeId, updateNodeList, targetNode);
                    });
                }
                if (newNodeList.length > 0) {
                    _self.treeService.addNodes(treeId, newNodeList, targetNode);
                }
                if (_self.type === TreeType_1.TreeType.lamp.value) {
                    _self.updateTreeDiyDom(treeId, treeNodes);
                }
                _self.changeNodesParentID(treeNodes, targetNode.ID);
                return false;
            }
            function beforeDragRule(treeId, treeNodes) {
                var flag = true;
                if (treeNodes && treeNodes.length > 0) {
                    var i = void 0, len = void 0, treeType = TreeType_1.TreeType.camera.value;
                    for (i = 0, len = treeNodes.length; i < len; i++) {
                        if (treeNodes[i].treeType !== treeType) {
                            flag = false;
                            break;
                        }
                    }
                }
                else {
                    flag = false;
                }
                return flag;
            }
        };
        CameraPopupController.prototype.updateTreeDiyDom = function (treeId, treeNodes) {
            var _this = this;
            this.$timeout(function () {
                treeNodes.forEach(function (item) {
                    console.log(item);
                    _this.leftTreeParams.addDiyDom(treeId, item);
                });
            });
        };
        CameraPopupController.prototype.changeNodesParentID = function (treeNodes, parentId) {
            if (!treeNodes || treeNodes.length <= 0)
                return;
            var i, len, temp, originParentId;
            for (i = 0, len = treeNodes.length; i < len; i++) {
                if (this.type === TreeType_1.TreeType.area.value) {
                    temp = treeNodes[i];
                    originParentId = temp.AreaID;
                    temp.ParentID = parentId;
                    temp.AreaID = parentId;
                }
                else if (this.type === TreeType_1.TreeType.lamp.value) {
                    temp = treeNodes[i];
                    if (!temp.JsonUserData.lampPost) {
                        var lampPost = {};
                        lampPost.ObjectId = parentId;
                        lampPost.ObjectType = ObjectType_1.ObjectType.LampPost.value;
                        lampPost.RelatedObjectId = temp.ID;
                        lampPost.RelatedObjectType = ObjectType_1.ObjectType.Camera.value;
                        temp.JsonUserData.lampPost = lampPost;
                        originParentId = "";
                        temp.ParentID = parentId;
                    }
                    else {
                        originParentId = temp.JsonUserData.lampPost.ID;
                        temp.ParentID = parentId;
                        temp.JsonUserData.lampPost.ID = parentId;
                    }
                }
                this.addOrUpdateTreeChangeCache({
                    id: temp.ID,
                    parentId: temp.ParentID,
                    originParentId: originParentId,
                    deviceReId: temp.JsonUserData.DeviceReId
                });
            }
        };
        CameraPopupController.prototype.addOrUpdateTreeChangeCache = function (model) {
            if (this.cacheChangeNodes[model.id]) {
                this.cacheChangeNodes[model.id].parentId = model.parentId;
            }
            else {
                this.cacheChangeNodes[model.id] = model;
            }
        };
        CameraPopupController.prototype.submit = function () {
            var _this = this;
            var key, temp, models = [], P;
            if (this.type === 'area') {
                for (key in this.cacheChangeNodes) {
                    temp = this.cacheChangeNodes[key];
                    models.push({ id: temp.id, areaId: temp.parentId });
                }
                if (models.length > 0) {
                    P = this.cameraService.updateCameraAreaID(models);
                }
                else {
                    this.layerDec.warnInfo("没有选择任何区域");
                    this.cancel(false);
                }
            }
            else {
                for (key in this.cacheChangeNodes) {
                    temp = this.cacheChangeNodes[key];
                    models.push({
                        id: temp.id,
                        lampId: temp.parentId,
                        deviceReId: temp.deviceReId
                    });
                }
                if (models.length > 0) {
                    P = this.cameraService.updateCameraLampID(models);
                }
                else {
                    this.layerDec.warnInfo("没有选择任何立杆");
                    this.cancel(false);
                }
            }
            if (P) {
                P.then(function (res) {
                    if (res && res.code === 200) {
                        _this.cancel(true);
                    }
                    else {
                        console.error("cameraService.updateRmpGateAreaID error", res);
                    }
                });
            }
        };
        CameraPopupController.prototype.cancel = function (flag) {
            this.$scope.$emit('device.closePopup', flag);
        };
        CameraPopupController.prototype.getLeftTreeData = function () {
            var _this = this;
            this.cameraService.findAll().then(function (res) {
                _this.$timeout(function () {
                    _this.leftTreeParams.treeDatas = res;
                });
            });
        };
        CameraPopupController.prototype.getRightTreeData = function () {
            var _this = this;
            var P;
            if (this.type === 'lamp') {
                P = this.connectTreeService.findLampTreeWithCamera();
            }
            else {
                P = this.connectTreeService.findAreaCamera();
            }
            P.then(function (datas) {
                _this.$timeout(function () {
                    _this.rightTreeParams.treeDatas = datas;
                });
            });
        };
        CameraPopupController.$inject = ['$scope', 'areaService', '$timeout', 'cameraService', 'treeDirectiveService', 'connectTreeService', 'layerDec'];
        return CameraPopupController;
    }());
    main_app_1.app.controller("baseConfigCameraPopup", CameraPopupController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
