define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../common/directive/tree/tree.directive.service", "../../common/services/connectTree.service"], function (require, exports, main_app_1, tree_params_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CameraPopupLampController = (function () {
        function CameraPopupLampController($scope, connectTreeService, $timeout, cameraService, treeService, layer) {
            this.$scope = $scope;
            this.connectTreeService = connectTreeService;
            this.$timeout = $timeout;
            this.cameraService = cameraService;
            this.treeService = treeService;
            this.layer = layer;
            this.IsCheck = false;
            this.deviceData = angular.copy(this.$scope.deviceData);
            this.initTreeParams();
            if (!this.deviceData.JsonUserData.lampPost) {
                this.deviceData.JsonUserData.lampPost = {};
            }
            this.getTreeDatas();
        }
        ;
        CameraPopupLampController.prototype.initTreeParams = function () {
            var _this = this;
            this.treeParams = new tree_params_1.TreeDataParams();
            this.treeParams.treeId = "devicePopupRightTree";
            this.treeParams.isShowIcon = true;
            this.treeParams.isShowLine = false;
            this.treeParams.isSimpleData = true;
            this.treeParams.checkEnable = false;
            this.treeParams.isSingleSelect = false;
            this.treeParams.editEnable = true;
            this.treeParams.showRemoveBtn = false;
            this.treeParams.showRenameBtn = false;
            this.treeParams.onClick = function (event, treeId, treeNode) {
                if (treeNode.treeType === "lamp") {
                    _this.IsCheck = true;
                    _this.deviceData.JsonUserData.lampPost.ID = treeNode.ID;
                    _this.deviceData.JsonUserData.lampPost.Name = treeNode.Name;
                }
            };
        };
        CameraPopupLampController.prototype.getTreeDatas = function () {
            var _this = this;
            this.connectTreeService.findLampTreeWithCamera().then(function (res) {
                _this.$timeout(function () {
                    _this.treeParams.treeDatas = res;
                });
            });
        };
        CameraPopupLampController.prototype.cancel = function (flag) {
            this.$scope.$emit('device.closePopup', flag);
        };
        CameraPopupLampController.prototype.submit = function () {
            var _this = this;
            if (!this.IsCheck) {
                this.layer.msg("没有选择任何立杆");
                this.cancel(false);
                return;
            }
            var models = [];
            models.push({ id: this.deviceData.ID, lampId: this.deviceData.JsonUserData.lampPost.ID, deviceReId: this.deviceData.JsonUserData.deviceReId });
            this.cameraService.updateCameraLampID(models).then(function (res) {
                if (res.data && res.code === 200) {
                    _this.layer.msg("更新成功");
                    _this.cancel(true);
                }
                else {
                    _this.layer.msg("更新失败");
                }
            });
        };
        CameraPopupLampController.$inject = ['$scope', 'connectTreeService', '$timeout', 'cameraService', 'treeDirectiveService', 'layer'];
        return CameraPopupLampController;
    }());
    main_app_1.app.controller("baseConfigCameraPopupLamp", CameraPopupLampController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
