define(["require", "exports", "../../common/app/main.app"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageParams = (function () {
        function PageParams() {
            this.totalCount = 1;
            this.pageSize = 5;
            this.currentPage = 1;
            this.pageCount = 1;
        }
        return PageParams;
    }());
    exports.PageParams = PageParams;
    var FaceMacCrashService = (function () {
        function FaceMacCrashService() {
            this.faceAccompDataList = {};
        }
        FaceMacCrashService.prototype.getAllFaceTrackData = function () {
            return this.faceAccompDataList.result;
        };
        FaceMacCrashService.prototype.setFaceAccompDataList = function (data) {
            if (Array.isArray(data.result)) {
                this.faceAccompDataList = angular.copy(data);
            }
        };
        FaceMacCrashService.prototype.getFaceAccompDataByPage = function (params) {
            var pageParams = new PageParams();
            pageParams.pageSize = params.pageSize || 10;
            pageParams.currentPage = params.currentPage || 1;
            var faceAccompData = angular.copy(this.faceAccompDataList);
            console.log(faceAccompData);
            pageParams.totalCount = faceAccompData.result.length;
            if (pageParams.totalCount % pageParams.pageSize === 0) {
                pageParams.pageCount = Math.round(pageParams.totalCount / pageParams.pageSize);
            }
            else {
                pageParams.pageCount = Math.ceil(pageParams.totalCount / pageParams.pageSize);
            }
            if (pageParams.currentPage > pageParams.pageCount) {
                pageParams.currentPage = pageParams.pageCount;
            }
            if (pageParams.pageSize > pageParams.totalCount) {
                pageParams.pageSize = pageParams.totalCount;
            }
            var start = (pageParams.currentPage - 1) * pageParams.pageSize;
            var end = pageParams.currentPage * pageParams.pageSize;
            var result = faceAccompData.result.slice(start, end);
            faceAccompData.result = angular.copy(result);
            pageParams.data = faceAccompData;
            return pageParams;
        };
        FaceMacCrashService.prototype.delFaceAccompResult = function (id) {
            var arr = [];
            var list = this.faceAccompDataList.result;
            for (var i = 0; i < list.length; i++) {
                if (id === list[i].AccessLog.CameraID) {
                    arr = this.faceAccompDataList.result.splice(i, 1);
                }
            }
            return arr.length > 0;
        };
        return FaceMacCrashService;
    }());
    main_app_1.app.service('faceMacCrashService', FaceMacCrashService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvSW50ZWxsaWdlbnRBbmFseXNpcy9GYWNlTWFjQ3Jhc2gvRmFjZU1hY0NyYXNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBS0E7UUFBQTtZQUNJLGVBQVUsR0FBVyxDQUFDLENBQUM7WUFDdkIsYUFBUSxHQUFXLENBQUMsQ0FBQztZQUNyQixnQkFBVyxHQUFXLENBQUMsQ0FBQztZQUN4QixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBRzFCLENBQUM7UUFBRCxpQkFBQztJQUFELENBUEEsQUFPQyxJQUFBO0lBUFksZ0NBQVU7SUFnQnZCO1FBQUE7WUFDWSx1QkFBa0IsR0FBK0IsRUFBZ0MsQ0FBQztRQStDOUYsQ0FBQztRQTlDRyxpREFBbUIsR0FBbkI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQTtRQUN6QyxDQUFDO1FBQ0QsbURBQXFCLEdBQXJCLFVBQXNCLElBQStCO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEQsQ0FBQztRQUNMLENBQUM7UUFDRCxxREFBdUIsR0FBdkIsVUFBd0IsTUFBa0I7WUFDdEMsSUFBSSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNsQyxVQUFVLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1lBQzVDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUM7WUFDakQsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQStCLENBQUM7WUFDekYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUMzQixVQUFVLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkYsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsVUFBVSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1lBQ2xELENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxVQUFVLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUE7WUFDL0MsQ0FBQztZQUNELElBQUksS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQy9ELElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUN2RCxJQUFJLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFckQsY0FBYyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDdEIsQ0FBQztRQUVELGlEQUFtQixHQUFuQixVQUFvQixFQUFVO1lBQzFCLElBQUksR0FBRyxHQUFHLEVBQW1CLENBQUM7WUFDOUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztZQUMxQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDckQsQ0FBQztZQUNMLENBQUM7WUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDekIsQ0FBQztRQUVMLDBCQUFDO0lBQUQsQ0FoREEsQUFnREMsSUFBQTtJQUVELGNBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyIsImZpbGUiOiJtb2R1bGUvSW50ZWxsaWdlbnRBbmFseXNpcy9GYWNlTWFjQ3Jhc2gvRmFjZU1hY0NyYXNoLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hcHAvbWFpbi5hcHBcIjtcclxuaW1wb3J0IHtBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdCwgUmVzdWx0fSBmcm9tICcuLi8uLi8uLi9jb3JlL2VudGl0eS9BY2NvbXBhbnlpbmdBbmFseXNpc0VudW0nXHJcblxyXG5kZWNsYXJlIGxldCBhbmd1bGFyOiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZVBhcmFtcyB7XHJcbiAgICB0b3RhbENvdW50OiBudW1iZXIgPSAxO1xyXG4gICAgcGFnZVNpemU6IG51bWJlciA9IDU7XHJcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyID0gMTtcclxuICAgIHBhZ2VDb3VudDogbnVtYmVyID0gMTtcclxuICAgIGRhdGE/OiBBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdDtcclxuICAgIGN1cnJlbnRJbmRleDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGYWNlTWFjQ3Jhc2hTZXJ2aWNlIHtcclxuICAgIHNldEZhY2VBY2NvbXBEYXRhTGlzdDogKGRhdGE6QWNjb21wYW55aW5nQW5hbHlzaXNSZXN1bHQpID0+IHZvaWRcclxuICAgIGdldEZhY2VBY2NvbXBEYXRhQnlQYWdlOiAoIHBhcmFtczogUGFnZVBhcmFtcykgPT4gUGFnZVBhcmFtcztcclxuICAgIGRlbEZhY2VBY2NvbXBSZXN1bHQ6IChpZDogc3RyaW5nKSA9PiBib29sZWFuO1xyXG4gICAgZ2V0QWxsRmFjZVRyYWNrRGF0YTooKSA9PiBBcnJheTxSZXN1bHQ+O1xyXG59XHJcblxyXG5jbGFzcyBGYWNlTWFjQ3Jhc2hTZXJ2aWNlIGltcGxlbWVudHMgSUZhY2VNYWNDcmFzaFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBmYWNlQWNjb21wRGF0YUxpc3Q6IEFjY29tcGFueWluZ0FuYWx5c2lzUmVzdWx0ID0ge30gYXMgQWNjb21wYW55aW5nQW5hbHlzaXNSZXN1bHQ7XHJcbiAgICBnZXRBbGxGYWNlVHJhY2tEYXRhKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmFjZUFjY29tcERhdGFMaXN0LnJlc3VsdFxyXG4gICAgfVxyXG4gICAgc2V0RmFjZUFjY29tcERhdGFMaXN0KGRhdGE6QWNjb21wYW55aW5nQW5hbHlzaXNSZXN1bHQpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhLnJlc3VsdCkpIHtcclxuICAgICAgICAgICAgdGhpcy5mYWNlQWNjb21wRGF0YUxpc3QgPSBhbmd1bGFyLmNvcHkoZGF0YSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRGYWNlQWNjb21wRGF0YUJ5UGFnZShwYXJhbXM6IFBhZ2VQYXJhbXMpOiBQYWdlUGFyYW1zIHtcclxuICAgICAgICBsZXQgcGFnZVBhcmFtcyA9IG5ldyBQYWdlUGFyYW1zKCk7XHJcbiAgICAgICAgcGFnZVBhcmFtcy5wYWdlU2l6ZSA9IHBhcmFtcy5wYWdlU2l6ZSB8fCAxMDtcclxuICAgICAgICBwYWdlUGFyYW1zLmN1cnJlbnRQYWdlID0gcGFyYW1zLmN1cnJlbnRQYWdlIHx8IDE7XHJcbiAgICAgICAgbGV0IGZhY2VBY2NvbXBEYXRhID0gYW5ndWxhci5jb3B5KHRoaXMuZmFjZUFjY29tcERhdGFMaXN0KSBhcyBBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdDtcclxuICAgICAgICBjb25zb2xlLmxvZyhmYWNlQWNjb21wRGF0YSlcclxuICAgICAgICBwYWdlUGFyYW1zLnRvdGFsQ291bnQgPSBmYWNlQWNjb21wRGF0YS5yZXN1bHQubGVuZ3RoO1xyXG4gICAgICAgIGlmIChwYWdlUGFyYW1zLnRvdGFsQ291bnQgJSBwYWdlUGFyYW1zLnBhZ2VTaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgIHBhZ2VQYXJhbXMucGFnZUNvdW50ID0gTWF0aC5yb3VuZChwYWdlUGFyYW1zLnRvdGFsQ291bnQgLyBwYWdlUGFyYW1zLnBhZ2VTaXplKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwYWdlUGFyYW1zLnBhZ2VDb3VudCA9IE1hdGguY2VpbChwYWdlUGFyYW1zLnRvdGFsQ291bnQgLyBwYWdlUGFyYW1zLnBhZ2VTaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhZ2VQYXJhbXMuY3VycmVudFBhZ2UgPiBwYWdlUGFyYW1zLnBhZ2VDb3VudCkge1xyXG4gICAgICAgICAgICBwYWdlUGFyYW1zLmN1cnJlbnRQYWdlID0gcGFnZVBhcmFtcy5wYWdlQ291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYWdlUGFyYW1zLnBhZ2VTaXplID4gcGFnZVBhcmFtcy50b3RhbENvdW50KSB7XHJcbiAgICAgICAgICAgIHBhZ2VQYXJhbXMucGFnZVNpemUgPSBwYWdlUGFyYW1zLnRvdGFsQ291bnRcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gKHBhZ2VQYXJhbXMuY3VycmVudFBhZ2UgLSAxKSAqIHBhZ2VQYXJhbXMucGFnZVNpemU7XHJcbiAgICAgICAgbGV0IGVuZCA9IHBhZ2VQYXJhbXMuY3VycmVudFBhZ2UgKiBwYWdlUGFyYW1zLnBhZ2VTaXplO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBmYWNlQWNjb21wRGF0YS5yZXN1bHQuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgICAgIGZhY2VBY2NvbXBEYXRhLnJlc3VsdCA9IGFuZ3VsYXIuY29weShyZXN1bHQpO1xyXG4gICAgICAgIHBhZ2VQYXJhbXMuZGF0YSA9IGZhY2VBY2NvbXBEYXRhO1xyXG4gICAgICAgIHJldHVybiBwYWdlUGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbEZhY2VBY2NvbXBSZXN1bHQoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBhcnIgPSBbXSBhcyBBcnJheTxSZXN1bHQ+O1xyXG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5mYWNlQWNjb21wRGF0YUxpc3QucmVzdWx0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaWQgPT09IGxpc3RbaV0uQWNjZXNzTG9nLkNhbWVyYUlEKSB7XHJcbiAgICAgICAgICAgICAgICBhcnIgPSB0aGlzLmZhY2VBY2NvbXBEYXRhTGlzdC5yZXN1bHQuc3BsaWNlKGksIDEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFyci5sZW5ndGggPiAwXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5hcHAuc2VydmljZSgnZmFjZU1hY0NyYXNoU2VydmljZScsIEZhY2VNYWNDcmFzaFNlcnZpY2UpO1xyXG4iXX0=
