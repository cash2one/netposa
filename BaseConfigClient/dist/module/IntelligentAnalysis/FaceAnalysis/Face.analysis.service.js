define(["require", "exports", "../../common/app/main.app"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageParams = (function () {
        function PageParams() {
            this.totalCount = 1;
            this.pageSize = 5;
            this.currentPage = 1;
            this.pageCount = 1;
        }
        return PageParams;
    }());
    exports.PageParams = PageParams;
    var FaceAnalysisService = (function () {
        function FaceAnalysisService() {
            this.faceAnalysisDataList = {};
        }
        FaceAnalysisService.prototype.setFaceAnalysisDataList = function (data) {
            if (data) {
                this.faceAnalysisDataList = angular.copy(data);
            }
        };
        FaceAnalysisService.prototype.getAllDataForLibName = function (libId) {
            var arr = [];
            var faceAnalysisData = angular.copy(this.faceAnalysisDataList);
            if (libId) {
                faceAnalysisData.Result.forEach(function (item) {
                    if (item.PersonInfo.LibId === libId) {
                        arr.push(item);
                    }
                });
            }
            else {
                arr = faceAnalysisData.Result;
            }
            return arr;
        };
        FaceAnalysisService.prototype.getFaceAnalysisDataByPage = function (params, libId) {
            var pageParams = new PageParams();
            pageParams.pageSize = params.pageSize || 10;
            pageParams.currentPage = params.currentPage || 1;
            var faceAnalysisData = angular.copy(this.faceAnalysisDataList);
            if (libId) {
                var arr_1 = [];
                faceAnalysisData.Result.forEach(function (item) {
                    if (item.LibId === libId) {
                        arr_1.push(item);
                    }
                });
                faceAnalysisData.Result = arr_1;
            }
            console.log(faceAnalysisData);
            pageParams.totalCount = faceAnalysisData.Result.length;
            if (pageParams.totalCount % pageParams.pageSize === 0) {
                pageParams.pageCount = Math.round(pageParams.totalCount / pageParams.pageSize);
            }
            else {
                pageParams.pageCount = Math.ceil(pageParams.totalCount / pageParams.pageSize);
            }
            if (pageParams.currentPage > pageParams.pageCount) {
                pageParams.currentPage = pageParams.pageCount;
            }
            if (pageParams.pageSize > pageParams.totalCount) {
                pageParams.pageSize = pageParams.totalCount;
            }
            var start = (pageParams.currentPage - 1) * pageParams.pageSize;
            var end = pageParams.currentPage * pageParams.pageSize;
            var result = faceAnalysisData.Result.slice(start, end);
            faceAnalysisData.Result = angular.copy(result);
            pageParams.data = faceAnalysisData;
            pageParams.allResult = this.getAllDataForLibName(libId);
            return pageParams;
        };
        FaceAnalysisService.prototype.delFaceAnalysisResult = function (id) {
            return true;
        };
        return FaceAnalysisService;
    }());
    main_app_1.app.service('faceAnalysisService', FaceAnalysisService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
