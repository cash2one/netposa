define(["require", "exports", "../../common/app/main.app"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageParams = (function () {
        function PageParams() {
            this.totalCount = 1;
            this.pageSize = 5;
            this.currentPage = 1;
            this.pageCount = 1;
        }
        return PageParams;
    }());
    exports.PageParams = PageParams;
    var FaceFrequencyService = (function () {
        function FaceFrequencyService() {
            this.faceFrequencyDataList = {};
        }
        FaceFrequencyService.prototype.getAllFaceFrequencyData = function () {
            return this.faceFrequencyDataList.Result;
        };
        FaceFrequencyService.prototype.setFaceFrequencyDataList = function (data) {
            if (Array.isArray(data.Result)) {
                this.faceFrequencyDataList = angular.copy(data);
            }
        };
        FaceFrequencyService.prototype.getFaceFrequencyDataByPage = function (params) {
            var pageParams = new PageParams();
            pageParams.pageSize = params.pageSize || 10;
            pageParams.currentPage = params.currentPage || 1;
            var faceFrequencyData = angular.copy(this.faceFrequencyDataList);
            pageParams.totalCount = faceFrequencyData.Result.length;
            if (pageParams.totalCount % pageParams.pageSize === 0) {
                pageParams.pageCount = Math.round(pageParams.totalCount / pageParams.pageSize);
            }
            else {
                pageParams.pageCount = Math.ceil(pageParams.totalCount / pageParams.pageSize);
            }
            if (pageParams.currentPage > pageParams.pageCount) {
                pageParams.currentPage = pageParams.pageCount;
            }
            if (pageParams.pageSize > pageParams.totalCount) {
                pageParams.pageSize = pageParams.totalCount;
            }
            var start = (pageParams.currentPage - 1) * pageParams.pageSize;
            var end = pageParams.currentPage * pageParams.pageSize;
            var result = faceFrequencyData.Result.slice(start, end);
            faceFrequencyData.Result = angular.copy(result);
            pageParams.data = faceFrequencyData;
            return pageParams;
        };
        FaceFrequencyService.prototype.delFaceFrequencyResult = function (id) {
            var arr = [];
            var list = this.faceFrequencyDataList.Result;
            for (var i = 0; i < list.length; i++) {
                if (id === list[i].AccessLog.CameraID) {
                    arr = this.faceFrequencyDataList.Result.splice(i, 1);
                }
            }
            return arr.length > 0;
        };
        return FaceFrequencyService;
    }());
    main_app_1.app.service('faceFrequencyService', FaceFrequencyService);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvSW50ZWxsaWdlbnRBbmFseXNpcy9NYWNGcmVxdWVuY3kvTWFjLmZyZXF1ZW5jeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUtBO1FBQUE7WUFDSSxlQUFVLEdBQVcsQ0FBQyxDQUFDO1lBQ3ZCLGFBQVEsR0FBVyxDQUFDLENBQUM7WUFDckIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7WUFDeEIsY0FBUyxHQUFXLENBQUMsQ0FBQztRQUcxQixDQUFDO1FBQUQsaUJBQUM7SUFBRCxDQVBBLEFBT0MsSUFBQTtJQVBZLGdDQUFVO0lBZ0J2QjtRQUFBO1lBQ1ksMEJBQXFCLEdBQWdCLEVBQWlCLENBQUM7UUE4Q25FLENBQUM7UUE3Q0csc0RBQXVCLEdBQXZCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUE7UUFDNUMsQ0FBQztRQUNELHVEQUF3QixHQUF4QixVQUF5QixJQUFnQjtZQUNyQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ25ELENBQUM7UUFDTCxDQUFDO1FBQ0QseURBQTBCLEdBQTFCLFVBQTJCLE1BQWtCO1lBQ3pDLElBQUksVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFDbEMsVUFBVSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztZQUM1QyxVQUFVLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDO1lBQ2pELElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQWdCLENBQUM7WUFDaEYsVUFBVSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3hELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkYsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsVUFBVSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1lBQ2xELENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxVQUFVLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUE7WUFDL0MsQ0FBQztZQUNELElBQUksS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQy9ELElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUN2RCxJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUV4RCxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRCxVQUFVLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDdEIsQ0FBQztRQUVELHFEQUFzQixHQUF0QixVQUF1QixFQUFVO1lBQzdCLElBQUksR0FBRyxHQUFHLEVBQW1CLENBQUM7WUFDOUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztZQUM3QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsR0FBRyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDeEQsQ0FBQztZQUNMLENBQUM7WUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDekIsQ0FBQztRQUVMLDJCQUFDO0lBQUQsQ0EvQ0EsQUErQ0MsSUFBQTtJQUVELGNBQUcsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyIsImZpbGUiOiJtb2R1bGUvSW50ZWxsaWdlbnRBbmFseXNpcy9NYWNGcmVxdWVuY3kvTWFjLmZyZXF1ZW5jeS5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthcHB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBwL21haW4uYXBwXCI7XHJcbmltcG9ydCB7UmVzdWx0LCBSZXN1bHRUcmFja30gZnJvbSAnLi4vLi4vLi4vY29yZS9lbnRpdHkvRmFjZVRyYWNrRW51bSc7XHJcblxyXG5kZWNsYXJlIGxldCBhbmd1bGFyOiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZVBhcmFtcyB7XHJcbiAgICB0b3RhbENvdW50OiBudW1iZXIgPSAxO1xyXG4gICAgcGFnZVNpemU6IG51bWJlciA9IDU7XHJcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyID0gMTtcclxuICAgIHBhZ2VDb3VudDogbnVtYmVyID0gMTtcclxuICAgIGRhdGE/OiBSZXN1bHRUcmFjaztcclxuICAgIGN1cnJlbnRJbmRleDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGYWNlRnJlcXVlbmN5U2VydmljZSB7XHJcbiAgICBnZXRBbGxGYWNlRnJlcXVlbmN5RGF0YTogKCk9PiAgQXJyYXk8UmVzdWx0PjtcclxuICAgIHNldEZhY2VGcmVxdWVuY3lEYXRhTGlzdDogKGRhdGE6UmVzdWx0VHJhY2spID0+IHZvaWQ7XHJcbiAgICBnZXRGYWNlRnJlcXVlbmN5RGF0YUJ5UGFnZTogKCBwYXJhbXM6IFBhZ2VQYXJhbXMpID0+IFBhZ2VQYXJhbXM7XHJcbiAgICBkZWxGYWNlRnJlcXVlbmN5UmVzdWx0OiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcclxufVxyXG5cclxuY2xhc3MgRmFjZUZyZXF1ZW5jeVNlcnZpY2UgaW1wbGVtZW50cyBJRmFjZUZyZXF1ZW5jeVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBmYWNlRnJlcXVlbmN5RGF0YUxpc3Q6IFJlc3VsdFRyYWNrID0ge30gYXMgUmVzdWx0VHJhY2s7XHJcbiAgICBnZXRBbGxGYWNlRnJlcXVlbmN5RGF0YSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZhY2VGcmVxdWVuY3lEYXRhTGlzdC5SZXN1bHRcclxuICAgIH1cclxuICAgIHNldEZhY2VGcmVxdWVuY3lEYXRhTGlzdChkYXRhOlJlc3VsdFRyYWNrKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YS5SZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFjZUZyZXF1ZW5jeURhdGFMaXN0ID0gYW5ndWxhci5jb3B5KGRhdGEpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0RmFjZUZyZXF1ZW5jeURhdGFCeVBhZ2UocGFyYW1zOiBQYWdlUGFyYW1zKTogUGFnZVBhcmFtcyB7XHJcbiAgICAgICAgbGV0IHBhZ2VQYXJhbXMgPSBuZXcgUGFnZVBhcmFtcygpO1xyXG4gICAgICAgIHBhZ2VQYXJhbXMucGFnZVNpemUgPSBwYXJhbXMucGFnZVNpemUgfHwgMTA7XHJcbiAgICAgICAgcGFnZVBhcmFtcy5jdXJyZW50UGFnZSA9IHBhcmFtcy5jdXJyZW50UGFnZSB8fCAxO1xyXG4gICAgICAgIGxldCBmYWNlRnJlcXVlbmN5RGF0YSA9IGFuZ3VsYXIuY29weSh0aGlzLmZhY2VGcmVxdWVuY3lEYXRhTGlzdCkgYXMgUmVzdWx0VHJhY2s7XHJcbiAgICAgICAgcGFnZVBhcmFtcy50b3RhbENvdW50ID0gZmFjZUZyZXF1ZW5jeURhdGEuUmVzdWx0Lmxlbmd0aDtcclxuICAgICAgICBpZiAocGFnZVBhcmFtcy50b3RhbENvdW50ICUgcGFnZVBhcmFtcy5wYWdlU2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBwYWdlUGFyYW1zLnBhZ2VDb3VudCA9IE1hdGgucm91bmQocGFnZVBhcmFtcy50b3RhbENvdW50IC8gcGFnZVBhcmFtcy5wYWdlU2l6ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFnZVBhcmFtcy5wYWdlQ291bnQgPSBNYXRoLmNlaWwocGFnZVBhcmFtcy50b3RhbENvdW50IC8gcGFnZVBhcmFtcy5wYWdlU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYWdlUGFyYW1zLmN1cnJlbnRQYWdlID4gcGFnZVBhcmFtcy5wYWdlQ291bnQpIHtcclxuICAgICAgICAgICAgcGFnZVBhcmFtcy5jdXJyZW50UGFnZSA9IHBhZ2VQYXJhbXMucGFnZUNvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFnZVBhcmFtcy5wYWdlU2l6ZSA+IHBhZ2VQYXJhbXMudG90YWxDb3VudCkge1xyXG4gICAgICAgICAgICBwYWdlUGFyYW1zLnBhZ2VTaXplID0gcGFnZVBhcmFtcy50b3RhbENvdW50XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdGFydCA9IChwYWdlUGFyYW1zLmN1cnJlbnRQYWdlIC0gMSkgKiBwYWdlUGFyYW1zLnBhZ2VTaXplO1xyXG4gICAgICAgIGxldCBlbmQgPSBwYWdlUGFyYW1zLmN1cnJlbnRQYWdlICogcGFnZVBhcmFtcy5wYWdlU2l6ZTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gZmFjZUZyZXF1ZW5jeURhdGEuUmVzdWx0LnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG5cclxuICAgICAgICBmYWNlRnJlcXVlbmN5RGF0YS5SZXN1bHQgPSBhbmd1bGFyLmNvcHkocmVzdWx0KTtcclxuICAgICAgICBwYWdlUGFyYW1zLmRhdGEgPSBmYWNlRnJlcXVlbmN5RGF0YTtcclxuICAgICAgICByZXR1cm4gcGFnZVBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICBkZWxGYWNlRnJlcXVlbmN5UmVzdWx0KGlkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgYXJyID0gW10gYXMgQXJyYXk8UmVzdWx0PjtcclxuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuZmFjZUZyZXF1ZW5jeURhdGFMaXN0LlJlc3VsdDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlkID09PSBsaXN0W2ldLkFjY2Vzc0xvZy5DYW1lcmFJRCkge1xyXG4gICAgICAgICAgICAgICAgYXJyID0gdGhpcy5mYWNlRnJlcXVlbmN5RGF0YUxpc3QuUmVzdWx0LnNwbGljZShpLCAxKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnIubGVuZ3RoID4gMFxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuYXBwLnNlcnZpY2UoJ2ZhY2VGcmVxdWVuY3lTZXJ2aWNlJywgRmFjZUZyZXF1ZW5jeVNlcnZpY2UpOyJdfQ==
