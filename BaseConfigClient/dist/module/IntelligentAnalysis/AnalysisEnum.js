define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MarkersIcon = (function () {
        function MarkersIcon() {
        }
        MarkersIcon.NormalBlueIcon = '/images/map/normal-blue.png';
        MarkersIcon.NormalGreenIcon = '/images/map/normal-green.png';
        MarkersIcon.HoverRedIcon = '/images/map/hover-marker.png';
        MarkersIcon.StartBlueIcon = '/images/map/start-blue.png';
        MarkersIcon.StartGreenIcon = '/images/map/start-green.png';
        MarkersIcon.EndIcon = '/images/map/end.png';
        return MarkersIcon;
    }());
    exports.MarkersIcon = MarkersIcon;
    var TrackConfig = (function () {
        function TrackConfig() {
        }
        TrackConfig.TrackSpeed = 10;
        TrackConfig.TrackWeight = 6;
        TrackConfig.PersonTrackBlueHandle = '/images/map/move1.png';
        TrackConfig.PersonTrackGreenHandle = '/images/map/move2.png';
        TrackConfig.LineColorForViolet = '#ccc5ff';
        TrackConfig.LineColorForBlue = '#a8ebff';
        TrackConfig.TrackColorBlue = '#00c0ff';
        TrackConfig.TrackColorViolet = '#7a4bff';
        return TrackConfig;
    }());
    exports.TrackConfig = TrackConfig;
    var OverlayName = (function () {
        function OverlayName() {
        }
        OverlayName.MapForResultLayer = 'MapForResultLayer';
        OverlayName.MapForResultGroup = 'MapForResultGroup';
        OverlayName.MapForAccpGroup = 'MapForAccpGroup';
        OverlayName.MapForTrackLineLayer = 'MapForTrackLineLayer';
        OverlayName.MapForResultLineGroup = 'MapForResultLineGroup';
        OverlayName.MapForAccpLineGroup = 'MapForAccpLineGroup';
        return OverlayName;
    }());
    exports.OverlayName = OverlayName;
    var dt = new Date();
    var y = (dt.getFullYear()).toString();
    var m = (dt.getMonth() + 1).toString();
    var d = (dt.getDate()).toString();
    var hh = (dt.getHours()).toString();
    var mm = (dt.getMinutes()).toString();
    var ss = (dt.getSeconds()).toString();
    parseInt(m) < 10 ? m = "0" + m : m;
    parseInt(d) < 10 ? d = "0" + d : d;
    parseInt(hh) < 10 ? hh = "0" + hh : hh;
    parseInt(mm) < 10 ? mm = "0" + mm : mm;
    parseInt(ss) < 10 ? ss = "0" + ss : ss;
    function GetNDayTime(n) {
        var time = {};
        var dd = new Date();
        dd.setDate(dd.getDate() + n);
        var year = dd.getFullYear();
        var month = (dd.getMonth() + 1).toString();
        var day = (dd.getDate()).toString();
        parseInt(month) < 10 ? month = "0" + month : month;
        parseInt(day) < 10 ? day = "0" + day : day;
        time.startTime = year + "-" + month + "-" + day + " 00:00:00";
        time.endTime = y + "-" + m + "-" + d + " " + hh + ":" + mm + ":" + ss;
        return time;
    }
    exports.GetNDayTime = GetNDayTime;
    exports.FastData = {
        today: { key: 'today', value: GetNDayTime(0), text: '今天' },
        threeDay: { key: 'threeDay', value: GetNDayTime(-3), text: '近三天' },
        weekDay: { key: 'weekDay', value: GetNDayTime(-7), text: '近一周' },
        monthDay: { key: 'monthDay', value: GetNDayTime(-30), text: '近一月' },
    };
    function getFastDataList() {
        var arr = [];
        for (var k in exports.FastData) {
            arr.push({ key: exports.FastData[k].key, value: exports.FastData[k].value, text: exports.FastData[k].text });
        }
        return arr;
    }
    exports.getFastDataList = getFastDataList;
    exports.SexData = {
        all: { key: 'all', value: null, text: '全部' },
        man: { key: 'man', value: 0, text: '男' },
        women: { key: 'women', value: 1, text: '女' },
        unknown: { key: 'unknown', value: -1, text: '未知' }
    };
    function getSexDataList() {
        var arr = [];
        for (var k in exports.SexData) {
            arr.push({ key: exports.SexData[k].key, value: exports.SexData[k].value, text: exports.SexData[k].text });
        }
        return arr;
    }
    exports.getSexDataList = getSexDataList;
    exports.GlassesData = {
        all: { key: 'all', value: null, text: '全部' },
        yes: { key: 'yes', value: 0, text: '戴眼镜' },
        no: { key: 'no', value: 1, text: '不戴眼镜' }
    };
    function getGlassesDataList() {
        var arr = [];
        for (var k in exports.GlassesData) {
            arr.push({ key: exports.GlassesData[k].key, value: exports.GlassesData[k].value, text: exports.GlassesData[k].text });
        }
        return arr;
    }
    exports.getGlassesDataList = getGlassesDataList;
    exports.MaskData = {
        all: { key: 'all', value: null, text: '全部' },
        yes: { key: 'yes', value: 0, text: '戴口罩' },
        no: { key: 'no', value: 1, text: '不戴口罩' }
    };
    function getMaskDataList() {
        var arr = [];
        for (var k in exports.MaskData) {
            arr.push({ key: exports.MaskData[k].key, value: exports.MaskData[k].value, text: exports.MaskData[k].text });
        }
        return arr;
    }
    exports.getMaskDataList = getMaskDataList;
    var ImageResult = (function () {
        function ImageResult() {
        }
        return ImageResult;
    }());
    exports.ImageResult = ImageResult;
    function MockImageResultData(num, path) {
        var arr = [];
        for (var i = 1; i <= num; i++) {
            arr.push({ ID: new Date().getTime().toString(), image: path });
        }
        return arr;
    }
    exports.MockImageResultData = MockImageResultData;
    var Capture = (function () {
        function Capture() {
        }
        return Capture;
    }());
    exports.Capture = Capture;
    var Location = (function () {
        function Location() {
        }
        return Location;
    }());
    exports.Location = Location;
    var MackCrashList = (function () {
        function MackCrashList() {
        }
        return MackCrashList;
    }());
    exports.MackCrashList = MackCrashList;
    function MockCaptureList(num, imageUrl) {
        var arr = [];
        for (var i = 1; i <= num; i++) {
            arr.push({
                sex: Math.round(Math.random()),
                time: '2017-03-02 12:30:48',
                info: '武汉洪山区关山大道保利国际中心',
                isCollection: Math.round(Math.random()),
                image: imageUrl,
                isMonitor: Math.round(Math.random()),
                scale: Math.round(90 + Math.random() * 10),
            });
        }
        return arr;
    }
    exports.MockCaptureList = MockCaptureList;
    function ArrayUnique(arr) {
        var result = [], hash = {};
        for (var i = 0, elem = void 0; (elem = arr[i]) != null; i++) {
            if (!hash[elem]) {
                result.push(elem);
                hash[elem] = true;
            }
        }
        return result;
    }
    exports.ArrayUnique = ArrayUnique;
    var AgeEnum = (function () {
        function AgeEnum() {
        }
        return AgeEnum;
    }());
    exports.AgeEnum = AgeEnum;
    exports.AgeData = {
        Juvenile: { key: 'Juvenile', value: { maxAge: 20, minAge: 0 }, text: '少年' },
        Youth: { key: 'Youth', value: { maxAge: 40, minAge: 21 }, text: '青年' },
        MiddleAged: { key: 'MiddleAged', value: { maxAge: 60, minAge: 41 }, text: '中年' },
        Elderly: { key: 'Elderly', value: { maxAge: 60, minAge: 120 }, text: '老年' },
        Unknown: { key: 'Unknown', value: { maxAge: 0, minAge: 0 }, text: '未知' }
    };
    function getAgeList() {
        var arr = [];
        for (var k in exports.AgeData) {
            arr.push({ key: exports.AgeData[k].key, value: exports.AgeData[k].value, text: exports.AgeData[k].text });
        }
        return arr;
    }
    exports.getAgeList = getAgeList;
    function MockMackCrashList(num, areaNum) {
        var arr = [];
        var location = [];
        for (var i = 0; i < areaNum; i++) {
            location.push({
                time: '2017-01-01',
                locate: '关山大道太阳城'
            });
        }
        for (var i = 0; i < num; i++) {
            arr.push({
                macAddress: '127.120.45' + (Math.floor(Math.random() * 10)).toString(),
                showTime: Math.round(Math.random() * areaNum),
                location: location
            });
        }
        return arr;
    }
    exports.MockMackCrashList = MockMackCrashList;
    function MockAlarmLIstanbul(num) {
        var arr = [];
        for (var i = 0; i < num; i++) {
            arr.push({
                macAddress: '127.120.45.432',
                showTime: Math.round(Math.random() * 100),
                location: '关山大道太阳城'
            });
        }
        return arr;
    }
    exports.MockAlarmLIstanbul = MockAlarmLIstanbul;
    var Size = (function () {
        function Size() {
        }
        return Size;
    }());
    exports.Size = Size;
    function getWidowSize() {
        var size = new Size();
        size.width = $(window).width();
        size.height = $(window).height();
        return size;
    }
    exports.getWidowSize = getWidowSize;
    var timeLength = (function () {
        function timeLength() {
        }
        return timeLength;
    }());
    exports.timeLength = timeLength;
    function getHours(num) {
        var time = {};
        var dt = new Date();
        var y = (dt.getFullYear()).toString();
        var m = (dt.getMonth() + 1).toString();
        var d = (dt.getDate()).toString();
        var hh = (dt.getHours()).toString();
        var mm = (dt.getMinutes()).toString();
        var ss = (dt.getSeconds()).toString();
        m = parseInt(m) < 10 ? "0" + m : m;
        d = parseInt(d) < 10 ? "0" + d : d;
        hh = parseInt(hh) < 10 ? "0" + hh : hh;
        mm = parseInt(mm) < 10 ? "0" + mm : mm;
        ss = parseInt(ss) < 10 ? "0" + ss : ss;
        var tStart = y + "-" + m + "-" + d + " 00:00:00";
        var startY, startM, startD, startH;
        var shh = dt.getHours() - num;
        if (shh >= 0) {
            startH = shh < 10 ? "0" + shh : shh.toString();
            startD = d;
            startM = m;
            startY = y;
        }
        else {
            shh = Math.abs(shh);
            var ddd = Math.floor(num / 24);
            ddd = ddd ? ddd : ddd + 1;
            startH = (24 * ddd - shh).toString();
            startD = (parseInt(d) - ddd).toString();
            if (parseInt(d) <= ddd) {
                startD = (parseInt(d) - ddd + 30).toString();
                startM = (parseInt(m) - 1).toString();
                startY = y;
                if (parseInt(m) - 1 <= 0) {
                    startM = (parseInt(m) - 1 + 12).toString();
                    startY = (parseInt(y) - 1).toString();
                }
            }
            else {
                startM = m;
                startY = y;
            }
        }
        startM = parseInt(startM) < 10 ? "0" + parseInt(startM) : startM;
        startD = parseInt(startD) < 10 ? "0" + parseInt(startD) : startD;
        startH = parseInt(startH) < 10 ? "0" + parseInt(startH) : startH;
        time.startTime = num ? startY + "-" + startM + "-" + startD + " " + startH + ":" + mm + ":" + ss : tStart;
        time.endTime = y + "-" + m + "-" + d + " " + hh + ":" + mm + ":" + ss;
        return time;
    }
    exports.getHours = getHours;
    exports.dataLists = {
        today: { key: 'today', value: getHours(0), text: '今天' },
        lastHour: { key: 'lasthour', value: getHours(1), text: '近1h' },
        lastFourHour: { key: 'lastFourHour', value: getHours(6), text: '近6h' },
        lastThreeDay: { key: 'lastThreeDay', value: getHours(12), text: '近12h' }
    };
    function getdataList() {
        var arr = [];
        for (var k in exports.dataLists) {
            arr.push({ key: exports.dataLists[k].key, value: exports.dataLists[k].value, text: exports.dataLists[k].text });
        }
        return arr;
    }
    exports.getdataList = getdataList;
    exports.QueryPattern = [
        { name: "MAC", value: "MAC", key: 0 },
        { name: "IMEI", value: "IMEI", key: 1 },
        { name: "IMSI", value: "IMSI", key: 2 }
    ];
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
