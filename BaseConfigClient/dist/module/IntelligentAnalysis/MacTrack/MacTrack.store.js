define(["require", "exports", "../../common/app/main.app"], function (require, exports, main_app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageParams = (function () {
        function PageParams() {
            this.totalCount = 1;
            this.pageSize = 5;
            this.currentPage = 1;
            this.pageCount = 1;
        }
        return PageParams;
    }());
    exports.PageParams = PageParams;
    var macTrackStore = (function () {
        function macTrackStore() {
            this.faceAccompDataList = {};
        }
        macTrackStore.prototype.getAllFaceTrackData = function () {
            return this.faceAccompDataList.result;
        };
        macTrackStore.prototype.setFaceAccompDataList = function (data) {
            if (Array.isArray(data.result)) {
                this.faceAccompDataList = angular.copy(data);
            }
        };
        macTrackStore.prototype.getFaceAccompDataByPage = function (params) {
            var pageParams = new PageParams();
            pageParams.pageSize = params.pageSize || 10;
            pageParams.currentPage = params.currentPage || 1;
            var faceAccompData = angular.copy(this.faceAccompDataList);
            console.log(faceAccompData);
            pageParams.totalCount = faceAccompData.result.length;
            if (pageParams.totalCount % pageParams.pageSize === 0) {
                pageParams.pageCount = Math.round(pageParams.totalCount / pageParams.pageSize);
            }
            else {
                pageParams.pageCount = Math.ceil(pageParams.totalCount / pageParams.pageSize);
            }
            if (pageParams.currentPage > pageParams.pageCount) {
                pageParams.currentPage = pageParams.pageCount;
            }
            if (pageParams.pageSize > pageParams.totalCount) {
                pageParams.pageSize = pageParams.totalCount;
            }
            var start = (pageParams.currentPage - 1) * pageParams.pageSize;
            var end = pageParams.currentPage * pageParams.pageSize;
            var result = faceAccompData.result.slice(start, end);
            faceAccompData.result = angular.copy(result);
            pageParams.data = faceAccompData;
            return pageParams;
        };
        macTrackStore.prototype.delFaceAccompResult = function (id) {
            var arr = [];
            var list = this.faceAccompDataList.result;
            for (var i = 0; i < list.length; i++) {
                if (id === list[i].accessLog.CameraID) {
                    arr = this.faceAccompDataList.result.splice(i, 1);
                }
            }
            return arr.length > 0;
        };
        return macTrackStore;
    }());
    main_app_1.app.service('macTrackStore', macTrackStore);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUvSW50ZWxsaWdlbnRBbmFseXNpcy9NYWNUcmFjay9NYWNUcmFjay5zdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFLQTtRQUFBO1lBQ0ksZUFBVSxHQUFXLENBQUMsQ0FBQztZQUN2QixhQUFRLEdBQVcsQ0FBQyxDQUFDO1lBQ3JCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1lBQ3hCLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFHMUIsQ0FBQztRQUFELGlCQUFDO0lBQUQsQ0FQQSxBQU9DLElBQUE7SUFQWSxnQ0FBVTtJQWdCdkI7UUFBQTtZQUNZLHVCQUFrQixHQUErQixFQUFnQyxDQUFDO1FBK0M5RixDQUFDO1FBOUNHLDJDQUFtQixHQUFuQjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFBO1FBQ3pDLENBQUM7UUFDRCw2Q0FBcUIsR0FBckIsVUFBc0IsSUFBK0I7WUFDakQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoRCxDQUFDO1FBQ0wsQ0FBQztRQUNELCtDQUF1QixHQUF2QixVQUF3QixNQUFrQjtZQUN0QyxJQUFJLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2xDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDNUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQztZQUNqRCxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBK0IsQ0FBQztZQUN6RixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1lBQzNCLFVBQVUsQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDckQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xGLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxVQUFVLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7WUFDbEQsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQzlDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQTtZQUMvQyxDQUFDO1lBQ0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDL0QsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQ3ZELElBQUksTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVyRCxjQUFjLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0MsVUFBVSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7WUFDakMsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUN0QixDQUFDO1FBRUQsMkNBQW1CLEdBQW5CLFVBQW9CLEVBQVU7WUFDMUIsSUFBSSxHQUFHLEdBQUcsRUFBbUIsQ0FBQztZQUM5QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDO1lBQzFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNuQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNwQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2dCQUNyRCxDQUFDO1lBQ0wsQ0FBQztZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUN6QixDQUFDO1FBRUwsb0JBQUM7SUFBRCxDQWhEQSxBQWdEQyxJQUFBO0lBRUQsY0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUMiLCJmaWxlIjoibW9kdWxlL0ludGVsbGlnZW50QW5hbHlzaXMvTWFjVHJhY2svTWFjVHJhY2suc3RvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hcHAvbWFpbi5hcHBcIjtcclxuaW1wb3J0IHtBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdCwgUmVzdWx0fSBmcm9tICcuLi8uLi8uLi9jb3JlL2VudGl0eS9BY2NvbXBhbnlpbmdBbmFseXNpc0VudW0nXHJcblxyXG5kZWNsYXJlIGxldCBhbmd1bGFyOiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZVBhcmFtcyB7XHJcbiAgICB0b3RhbENvdW50OiBudW1iZXIgPSAxO1xyXG4gICAgcGFnZVNpemU6IG51bWJlciA9IDU7XHJcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyID0gMTtcclxuICAgIHBhZ2VDb3VudDogbnVtYmVyID0gMTtcclxuICAgIGRhdGE/OiBBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdDtcclxuICAgIGN1cnJlbnRJbmRleDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNYWNUcmFja1NlcnZpY2VTdG9yZSB7XHJcbiAgICBzZXRGYWNlQWNjb21wRGF0YUxpc3Q6IChkYXRhOkFjY29tcGFueWluZ0FuYWx5c2lzUmVzdWx0KSA9PiB2b2lkXHJcbiAgICBnZXRGYWNlQWNjb21wRGF0YUJ5UGFnZTogKCBwYXJhbXM6IFBhZ2VQYXJhbXMpID0+IFBhZ2VQYXJhbXM7XHJcbiAgICBkZWxGYWNlQWNjb21wUmVzdWx0OiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcclxuICAgIGdldEFsbEZhY2VUcmFja0RhdGE6KCkgPT4gQXJyYXk8UmVzdWx0PjtcclxufVxyXG5cclxuY2xhc3MgbWFjVHJhY2tTdG9yZSBpbXBsZW1lbnRzIElNYWNUcmFja1NlcnZpY2VTdG9yZSB7XHJcbiAgICBwcml2YXRlIGZhY2VBY2NvbXBEYXRhTGlzdDogQWNjb21wYW55aW5nQW5hbHlzaXNSZXN1bHQgPSB7fSBhcyBBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdDtcclxuICAgIGdldEFsbEZhY2VUcmFja0RhdGEoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5mYWNlQWNjb21wRGF0YUxpc3QucmVzdWx0XHJcbiAgICB9XHJcbiAgICBzZXRGYWNlQWNjb21wRGF0YUxpc3QoZGF0YTpBY2NvbXBhbnlpbmdBbmFseXNpc1Jlc3VsdCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEucmVzdWx0KSkge1xyXG4gICAgICAgICAgICB0aGlzLmZhY2VBY2NvbXBEYXRhTGlzdCA9IGFuZ3VsYXIuY29weShkYXRhKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldEZhY2VBY2NvbXBEYXRhQnlQYWdlKHBhcmFtczogUGFnZVBhcmFtcyk6IFBhZ2VQYXJhbXMge1xyXG4gICAgICAgIGxldCBwYWdlUGFyYW1zID0gbmV3IFBhZ2VQYXJhbXMoKTtcclxuICAgICAgICBwYWdlUGFyYW1zLnBhZ2VTaXplID0gcGFyYW1zLnBhZ2VTaXplIHx8IDEwO1xyXG4gICAgICAgIHBhZ2VQYXJhbXMuY3VycmVudFBhZ2UgPSBwYXJhbXMuY3VycmVudFBhZ2UgfHwgMTtcclxuICAgICAgICBsZXQgZmFjZUFjY29tcERhdGEgPSBhbmd1bGFyLmNvcHkodGhpcy5mYWNlQWNjb21wRGF0YUxpc3QpIGFzIEFjY29tcGFueWluZ0FuYWx5c2lzUmVzdWx0O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGZhY2VBY2NvbXBEYXRhKVxyXG4gICAgICAgIHBhZ2VQYXJhbXMudG90YWxDb3VudCA9IGZhY2VBY2NvbXBEYXRhLnJlc3VsdC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHBhZ2VQYXJhbXMudG90YWxDb3VudCAlIHBhZ2VQYXJhbXMucGFnZVNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgcGFnZVBhcmFtcy5wYWdlQ291bnQgPSBNYXRoLnJvdW5kKHBhZ2VQYXJhbXMudG90YWxDb3VudCAvIHBhZ2VQYXJhbXMucGFnZVNpemUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhZ2VQYXJhbXMucGFnZUNvdW50ID0gTWF0aC5jZWlsKHBhZ2VQYXJhbXMudG90YWxDb3VudCAvIHBhZ2VQYXJhbXMucGFnZVNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFnZVBhcmFtcy5jdXJyZW50UGFnZSA+IHBhZ2VQYXJhbXMucGFnZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHBhZ2VQYXJhbXMuY3VycmVudFBhZ2UgPSBwYWdlUGFyYW1zLnBhZ2VDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhZ2VQYXJhbXMucGFnZVNpemUgPiBwYWdlUGFyYW1zLnRvdGFsQ291bnQpIHtcclxuICAgICAgICAgICAgcGFnZVBhcmFtcy5wYWdlU2l6ZSA9IHBhZ2VQYXJhbXMudG90YWxDb3VudFxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RhcnQgPSAocGFnZVBhcmFtcy5jdXJyZW50UGFnZSAtIDEpICogcGFnZVBhcmFtcy5wYWdlU2l6ZTtcclxuICAgICAgICBsZXQgZW5kID0gcGFnZVBhcmFtcy5jdXJyZW50UGFnZSAqIHBhZ2VQYXJhbXMucGFnZVNpemU7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZhY2VBY2NvbXBEYXRhLnJlc3VsdC5zbGljZShzdGFydCwgZW5kKTtcclxuXHJcbiAgICAgICAgZmFjZUFjY29tcERhdGEucmVzdWx0ID0gYW5ndWxhci5jb3B5KHJlc3VsdCk7XHJcbiAgICAgICAgcGFnZVBhcmFtcy5kYXRhID0gZmFjZUFjY29tcERhdGE7XHJcbiAgICAgICAgcmV0dXJuIHBhZ2VQYXJhbXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsRmFjZUFjY29tcFJlc3VsdChpZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGFyciA9IFtdIGFzIEFycmF5PFJlc3VsdD47XHJcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLmZhY2VBY2NvbXBEYXRhTGlzdC5yZXN1bHQ7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbGlzdFtpXS5hY2Nlc3NMb2cuQ2FtZXJhSUQpIHtcclxuICAgICAgICAgICAgICAgIGFyciA9IHRoaXMuZmFjZUFjY29tcERhdGFMaXN0LnJlc3VsdC5zcGxpY2UoaSwgMSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyLmxlbmd0aCA+IDBcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmFwcC5zZXJ2aWNlKCdtYWNUcmFja1N0b3JlJywgbWFjVHJhY2tTdG9yZSk7XHJcbiJdfQ==
