define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var timeLength = (function () {
        function timeLength() {
        }
        return timeLength;
    }());
    exports.timeLength = timeLength;
    function getHours(num) {
        var time = {};
        var dt = new Date();
        var y = (dt.getFullYear()).toString();
        var m = (dt.getMonth() + 1).toString();
        var d = (dt.getDate()).toString();
        var hh = (dt.getHours()).toString();
        var mm = (dt.getMinutes()).toString();
        var ss = (dt.getSeconds()).toString();
        var tStart = y + "-" + m + "-" + d + " 00:00:00";
        m = parseInt(m) < 10 ? "0" + m : m;
        d = parseInt(d) < 10 ? "0" + d : d;
        hh = parseInt(hh) < 10 ? "0" + hh : hh;
        mm = parseInt(mm) < 10 ? "0" + mm : mm;
        ss = parseInt(ss) < 10 ? "0" + ss : ss;
        var startY, startM, startD, startH;
        var shh = dt.getHours() - num;
        if (shh >= 0) {
            startH = shh < 10 ? "0" + shh : shh.toString();
            startD = d;
            startM = m;
            startY = y;
        }
        else {
            shh = Math.abs(shh);
            var ddd = Math.floor(num / 24);
            ddd = ddd ? ddd : ddd + 1;
            startH = (24 * ddd - shh).toString();
            startD = (parseInt(d) - ddd).toString();
            if (parseInt(d) <= ddd) {
                startD = (parseInt(d) - ddd + 30).toString();
                startM = (parseInt(m) - 1).toString();
                startY = y;
                if (parseInt(m) - 1 <= 0) {
                    startM = (parseInt(m) - 1 + 12).toString();
                    startY = (parseInt(y) - 1).toString();
                }
            }
            else {
                startM = m;
                startY = y;
            }
        }
        startM = parseInt(startM) < 10 ? "0" + parseInt(startM) : startM;
        startD = parseInt(startD) < 10 ? "0" + parseInt(startD) : startD;
        startH = parseInt(startH) < 10 ? "0" + parseInt(startH) : startH;
        time.startTime = num ? startY + "-" + startM + "-" + startD + " " + startH + ":" + mm + ":" + ss : tStart;
        time.endTime = y + "-" + m + "-" + d + " " + hh + ":" + mm + ":" + ss;
        return time;
    }
    exports.getHours = getHours;
    exports.dataLists = {
        today: { key: 'today', value: getHours(0), text: '今天' },
        lastHour: { key: 'lasthour', value: getHours(1), text: '近1h' },
        lastFourHour: { key: 'lastFourHour', value: getHours(6), text: '近6h' },
        lastThreeDay: { key: 'lastThreeDay', value: getHours(12), text: '近12h' }
    };
    function getdataList() {
        var arr = [];
        for (var k in exports.dataLists) {
            arr.push({ key: exports.dataLists[k].key, value: exports.dataLists[k].value, text: exports.dataLists[k].text });
        }
        return arr;
    }
    exports.getdataList = getdataList;
    function ArrayUnique(arr) {
        var result = [], hash = {};
        for (var i = 0, elem = void 0; (elem = arr[i]) != null; i++) {
            if (!hash[elem]) {
                result.push(elem);
                hash[elem] = true;
            }
        }
        return result;
    }
    exports.ArrayUnique = ArrayUnique;
    var MacTrackIndexParam = (function () {
        function MacTrackIndexParam() {
            this.arrdeviceId = [];
        }
        return MacTrackIndexParam;
    }());
    exports.MacTrackIndexParam = MacTrackIndexParam;
    var singleMacDetailParam = (function () {
        function singleMacDetailParam() {
        }
        return singleMacDetailParam;
    }());
    exports.singleMacDetailParam = singleMacDetailParam;
    var macCrashRecordParam = (function () {
        function macCrashRecordParam() {
        }
        return macCrashRecordParam;
    }());
    exports.macCrashRecordParam = macCrashRecordParam;
    function getMacCrashData(mac, detail) {
        var macArr = [];
        var detailArr = [];
        for (var j = 0; j < detail; j++) {
            detailArr.push({
                ischeck: false,
                ip: Math.round(Math.random() * 100).toString(),
                macAddress: '127-234-' + Math.round(Math.random() * 100),
                collectTime: '2017-09-' + Math.round(Math.random() * 30),
                collectLocate: '关山大道太阳城'
            });
        }
        for (var i = 0; i < mac; i++) {
            macArr.push({
                macAddress: '127-234-' + Math.round(Math.random() * 100),
                fold: true,
                showDetail: detailArr
            });
        }
        return macArr;
    }
    exports.getMacCrashData = getMacCrashData;
    var OverlayName = (function () {
        function OverlayName() {
        }
        OverlayName.MapForResultLayer = 'MapForResultLayer';
        OverlayName.MapForResultGroup = 'MapForResultGroup';
        OverlayName.MapForAccpGroup = 'MapForAccpGroup';
        OverlayName.MapForTrackLineLayer = 'MapForTrackLineLayer';
        OverlayName.MapForResultLineGroup = 'MapForResultLineGroup';
        OverlayName.MapForAccpLineGroup = 'MapForAccpLineGroup';
        return OverlayName;
    }());
    exports.OverlayName = OverlayName;
    var MarkersIcon = (function () {
        function MarkersIcon() {
        }
        MarkersIcon.NormalBlueIcon = '/images/map/normal-blue.png';
        MarkersIcon.NormalGreenIcon = '/images/map/normal-green.png';
        MarkersIcon.HoverRedIcon = '/images/map/hover-marker.png';
        MarkersIcon.StartBlueIcon = '/images/map/start-blue.png';
        MarkersIcon.StartGreenIcon = '/images/map/start-green.png';
        MarkersIcon.EndIcon = '/images/map/end.png';
        return MarkersIcon;
    }());
    exports.MarkersIcon = MarkersIcon;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
