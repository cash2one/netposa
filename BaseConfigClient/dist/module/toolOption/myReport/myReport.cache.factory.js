define(["require", "exports", "../../common/app/main.app", "../../common/portrait-tool"], function (require, exports, main_app_1, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MyReportViewModel = (function () {
        function MyReportViewModel() {
        }
        return MyReportViewModel;
    }());
    exports.MyReportViewModel = MyReportViewModel;
    var MyReportFactory = (function () {
        function MyReportFactory() {
            this.timeSortArr = [];
            this.timeAlarmLogResultMap = {};
        }
        MyReportFactory.prototype.cacheDatas = function (datas) {
            this.cookDatas(datas);
        };
        MyReportFactory.prototype.getDatas = function () {
            var i = 0, len = this.timeSortArr.length, temp, result = [];
            for (; i < len; i++) {
                temp = this.timeSortArr[i];
                result.push({
                    timeKey: temp,
                    isExpand: false,
                    alarmLogResultCount: this.timeAlarmLogResultMap[temp].length,
                    alarmLogResultArr: this.timeAlarmLogResultMap[temp]
                });
            }
            return result;
        };
        MyReportFactory.prototype.clearDatas = function () {
            this.timeSortArr = [];
            this.timeAlarmLogResultMap = {};
        };
        MyReportFactory.prototype.cookDatas = function (datas) {
            var i = 0, len = datas.length, temp;
            for (; i < len; i++) {
                this._cacheData(datas[i]);
            }
        };
        MyReportFactory.prototype.getYearMonthDay = function (dateStr) {
            if (dateStr == null)
                return;
            var date = portrait_tool_1.default.formatDate(dateStr, "yyyy-MM-dd");
            console.debug("getYearMonthDay", date);
            return date;
        };
        MyReportFactory.prototype._cacheData = function (data) {
            if (data.AlarmLog.ObjectType == 'Car') {
                var newData = angular.copy(data);
                data.AlarmLog.AlarmTime = newData.AlarmLog.JsonUserData.detail.passTime;
            }
            var key = this.getYearMonthDay(data.AlarmLog && data.AlarmLog.AlarmTime);
            if (key == null)
                return;
            if (!this.timeAlarmLogResultMap[key]) {
                this.timeAlarmLogResultMap[key] = [];
                this.linkTimeSortAndTimeMap(key);
            }
            this.timeAlarmLogResultMap[key].push(data);
        };
        MyReportFactory.prototype.linkTimeSortAndTimeMap = function (key) {
            var i = 0, len = this.timeSortArr.length, index = 0;
            for (; i < len; i++) {
                if (this.compareKey(key, this.timeSortArr[i])) {
                    index = i;
                    break;
                }
            }
            this.timeSortArr.splice(i, 0, key);
        };
        MyReportFactory.prototype.compareKey = function (key1, key2) {
            var date1 = portrait_tool_1.default.parseDate(key1 + " 00:00:00");
            var date2 = portrait_tool_1.default.parseDate(key2 + " 00:00:00");
            if (date1.getTime() > date2.getTime()) {
                return true;
            }
            else {
                return false;
            }
        };
        return MyReportFactory;
    }());
    exports.MyReportFactory = MyReportFactory;
    main_app_1.app.service("myReportFactory", MyReportFactory);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
