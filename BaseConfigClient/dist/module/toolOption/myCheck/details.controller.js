define(["require", "exports", "../../common/app/main.app", "../../common/directive/tree/tree-params", "../../common/portrait-tool"], function (require, exports, main_app_1, tree_params_1, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DetailsController = (function () {
        function DetailsController($scope, treeDirectiveService) {
            var _this = this;
            this.$scope = $scope;
            this.treeDirectiveService = treeDirectiveService;
            $scope.$on("$destroy", function () {
                _this.userTreeParams.treeDatas = null;
                _this.userTreeParams = null;
                _this.businessLibExParams.treeDatas = null;
                _this.businessLibExParams = null;
                _this.cameraExParams.treeDatas = null;
                _this.cameraExParams = null;
            });
            this.MyCheck = $scope.MyCheck;
            this.MyTaskModel = $scope.MyTaskModel;
            this.userTreeParams = new tree_params_1.TreeDataParams();
            this.userTreeParams.treeDatas = $scope.UserDatas;
            this.userTreeParams.treeId = portrait_tool_1.default.getUUID();
            this.businessLibExParams = new tree_params_1.TreeDataParams();
            this.businessLibExParams.treeDatas = $scope.BusinessLibDatas;
            this.businessLibExParams.treeId = portrait_tool_1.default.getUUID();
            this.businessLibExParams.treeIdKey = "treeID";
            this.businessLibExParams.treePidKey = "treeParentId";
            this.cameraExParams = new tree_params_1.TreeDataParams();
            this.cameraExParams.treeDatas = $scope.CameraDatas;
            this.cameraExParams.treeId = portrait_tool_1.default.getUUID();
            this.AuditStatusMap = $scope.AuditStatusMap;
            this.TaskTypeMap = $scope.TaskTypeMap;
            this.TaskStatusMap = $scope.TaskStatusMap;
        }
        DetailsController.prototype.save = function () {
        };
        DetailsController.prototype.beforeCheck = function () {
            return false;
        };
        DetailsController.prototype.cancel = function (flag) {
            this.$scope.$emit('details.closePopup', flag);
        };
        DetailsController.prototype.treeInitComplete = function (treeId) {
            switch (treeId) {
                case this.businessLibExParams.treeId:
                    this.defaultCheckBusinessLibNode();
                    break;
                case this.userTreeParams.treeId:
                    this.defaultCheckUserNode();
                    break;
                case this.cameraExParams.treeId:
                    this.defaultCheckCameraNode();
                    break;
            }
        };
        DetailsController.prototype.defaultCheckBusinessLibNode = function () {
            var businessIds = [];
            angular.forEach(this.MyTaskModel.ArrLibIds, function (id) {
                businessIds.push(id);
            });
            this.treeDirectiveService.checkNodesByIds(this.businessLibExParams.treeId, businessIds, this.businessLibExParams.treeIdKey, true);
        };
        DetailsController.prototype.defaultCheckUserNode = function () {
        };
        DetailsController.prototype.defaultCheckCameraNode = function () {
            var cameraIds = [];
            angular.forEach(this.MyTaskModel.CameraParams, function (model) {
                cameraIds.push(model.CameraID);
            });
            this.treeDirectiveService.checkNodesByIds(this.cameraExParams.treeId, cameraIds, this.cameraExParams.treeIdKey, true);
        };
        DetailsController.$inject = ['$scope', 'treeDirectiveService'];
        return DetailsController;
    }());
    main_app_1.app.controller("MyCheckDetailsController", DetailsController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
