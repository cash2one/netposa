define(["require", "exports", "../../common/app/main.app", "../../common/portrait-tool"], function (require, exports, main_app_1, portrait_tool_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MyCollectViewModel = (function () {
        function MyCollectViewModel() {
        }
        return MyCollectViewModel;
    }());
    exports.MyCollectViewModel = MyCollectViewModel;
    var MyCollectFactory = (function () {
        function MyCollectFactory() {
            this.timeSortArr = [];
            this.timeCollectResultMap = {};
        }
        MyCollectFactory.prototype.cacheDatas = function (datas) {
            this.cookDatas(datas);
        };
        MyCollectFactory.prototype.getDatas = function () {
            var i = 0, len = this.timeSortArr.length, temp, result = [];
            for (; i < len; i++) {
                temp = this.timeSortArr[i];
                result.push({
                    timeKey: temp,
                    isExpand: false,
                    collectResultArr: this.timeCollectResultMap[temp]
                });
            }
            return result;
        };
        MyCollectFactory.prototype.clearDatas = function () {
            this.timeSortArr = [];
            this.timeCollectResultMap = {};
        };
        MyCollectFactory.prototype.removeData = function (model, cacheDatas) {
            var key = this.getYearMonthDay(model.CollectTime);
            var arr = this.timeCollectResultMap[key], i, len, temp, isDelete = false;
            if (arr && arr.length > 0) {
                for (i = 0, len = arr.length; i < len; i++) {
                    if (arr[i].ID === model.ID) {
                        isDelete = true;
                        arr.splice(i, 1);
                        i--;
                        len--;
                        break;
                    }
                }
            }
        };
        MyCollectFactory.prototype.cookDatas = function (datas) {
            var i = 0, len = datas.length, temp;
            for (; i < len; i++) {
                this._cacheData(datas[i]);
            }
        };
        MyCollectFactory.prototype.getYearMonthDay = function (dateStr) {
            if (dateStr == null)
                return;
            var date = portrait_tool_1.default.formatDate(dateStr, "yyyy-MM-dd");
            return date;
        };
        MyCollectFactory.prototype._cacheData = function (data) {
            var key = this.getYearMonthDay(data.CollectTime);
            if (key == null)
                return;
            if (!this.timeCollectResultMap[key]) {
                this.timeCollectResultMap[key] = [];
                this.linkTimeSortAndTimeMap(key);
            }
            this.timeCollectResultMap[key].push(data);
        };
        MyCollectFactory.prototype.linkTimeSortAndTimeMap = function (key) {
            var i = 0, len = this.timeSortArr.length, index = 0;
            for (; i < len; i++) {
                if (this.compareKey(key, this.timeSortArr[i])) {
                    index = i;
                    break;
                }
            }
            this.timeSortArr.splice(i, 0, key);
        };
        MyCollectFactory.prototype.compareKey = function (key1, key2) {
            var date1 = portrait_tool_1.default.parseDate(key1 + " 00:00:00");
            var date2 = portrait_tool_1.default.parseDate(key2 + " 00:00:00");
            if (date1.getTime() > date2.getTime()) {
                return true;
            }
            else {
                return false;
            }
        };
        return MyCollectFactory;
    }());
    exports.MyCollectFactory = MyCollectFactory;
    main_app_1.app.service("myCollectFactory", MyCollectFactory);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
