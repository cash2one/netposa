define(["require", "exports", "text!./technology.stack.map.popup.html", "../../common/app/main.app", "../../common/enum/MapConfigJsonEnum", "../../common/map/map.main", "css!./technology.stack.map.css", "../../common/services/map.service", "es6-promise", "./technology.stack.map.popup.controller"], function (require, exports, popupHtml, main_app_1, MapConfigJsonEnum_1, map_main_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Promise = require("es6-promise");
    var TechnologyStackMapController = (function () {
        function TechnologyStackMapController($scope, $compile, $timeout, mapService) {
            var vm = this;
            vm.map;
            vm.mapId = "mapShowContainer";
            vm.mapConfigName = MapConfigJsonEnum_1.MapConfigJsonEnum.MAPCONFIG;
            vm.buttonName = "定位一个摄像机结点";
            vm.closeInfoWindowEventName = "closeInfoWindowHandle";
            $scope.$on("$destroy", function () {
                console.log("销毁了MapResourceController");
                if (vm.map) {
                    vm.map.destroy();
                    vm.map = undefined;
                }
            });
            vm.locateCamera = locateCamera;
            vm.measureDistance = measureDistance;
            vm.measureArea = measureArea;
            vm.selectLine = selectLine;
            vm.selectPolygon = selectPolygon;
            vm.selectRect = selectRect;
            vm.selectCircle = selectCircle;
            vm.clearAll = clearAll;
            vm.drawLine = drawLine;
            vm.drawPolygon = drawPolygon;
            vm.drawRect = drawRect;
            vm.drawCircle = drawCircle;
            vm.showCamera = showCamera;
            vm.hideCamera = hideCamera;
            vm.lineId = null;
            vm.startTraceAnalyze = startTraceAnalyze;
            vm.stopTraceAnalyze = stopTraceAnalyze;
            vm.pauseTraceAnalyze = pauseTraceAnalyze;
            vm.reStartTraceAnalyze = reStartTraceAnalyze;
            vm.clearTraceAnalyze = clearTraceAnalyze;
            vm.isRunTraceAnalyze = false;
            function hideCamera() {
                vm.map.setClusterMarkerVisibleByLayerType("camera", false);
            }
            function showCamera() {
                vm.map.setClusterMarkerVisibleByLayerType("camera", true);
            }
            function drawCircle() {
                vm.map.drawCircle(null, {
                    color: "black",
                    fillColor: 'red',
                    weight: 3,
                    opacity: 1,
                    fillOpacity: 1
                });
            }
            function drawRect() {
                vm.map.drawRectangle(function (points) {
                    console.log("画矩形生成的points为", points);
                }, null);
            }
            function drawPolygon() {
                vm.map.drawPolygon(function (points) {
                    console.log("画多边形生成的points为", points);
                }, null);
            }
            function drawLine() {
                vm.map.drawLine(function (points) {
                    console.log("画线生成的points为", points);
                }, null);
            }
            function clearAll() {
                vm.map.clearDraw();
            }
            function measureDistance() {
                vm.map.measureDistance();
            }
            function measureArea() {
                vm.map.measureArea();
            }
            function selectLine() {
                vm.map.selectLine(function (points) {
                    console.log("选中的points为", points);
                    showPoints(points);
                });
            }
            function selectPolygon() {
                vm.map.selectPolygon(function (points) {
                    console.log("选中的points为", points);
                    showPoints(points);
                });
            }
            function selectRect() {
                vm.map.selectRectangle(function (points) {
                    console.log("选中的points为", points);
                    showPoints(points);
                });
            }
            function selectCircle() {
                vm.map.selectCircle(function (points) {
                    showPoints(points);
                });
            }
            function showPoints(points) {
                $timeout(function () {
                    vm.selectPoints = points;
                });
            }
            initCloseInfoWindowEvent();
            _startInitMap().then(_getSystemPoints).then(_initSystemPoints2Map);
            function locateCamera() {
                vm.map.locationMarker("bb9d69d53e6443848e75a7543cc3c5d2");
            }
            function _startInitMap() {
                return mapService.getMapConfig(vm.mapConfigName).then(_initMap);
            }
            function _initMap(data) {
                vm.map = new map_main_1.NPGisMapMain();
                vm.map.init(vm.mapId, data);
            }
            function _initSystemPoints2Map(points) {
                if (vm.map) {
                    vm.map.renderMarkers(points, getMapEvents());
                }
            }
            function getMapEvents() {
                return {
                    click: function (marker) {
                        openInitInfoWindow(marker);
                    }
                };
            }
            function openInitInfoWindow(marker) {
                var scope = $scope.$new();
                scope.$on("$destroy", function () {
                    console.log("销毁地图弹出框scope");
                });
                var winId = vm.map.createInfoWindow(marker.getPosition().lon, marker.getPosition().lat);
                scope.winId = winId;
                scope.closeEventName = "aaa";
                var html = $compile(popupHtml)(scope);
                $timeout(function () {
                    vm.map.openInfoWindow(winId, html[0], {
                        close: function () {
                            scope.$destroy();
                        }
                    });
                });
            }
            function initCloseInfoWindowEvent() {
                $scope.$on("aaa", function (event, winId) {
                    closeInfoWindow(winId);
                });
            }
            function closeInfoWindow(winId) {
                vm.map.closeInfoWindow(winId);
            }
            function _getSystemPoints() {
                return mapService.getSystemPoints()
                    .then(function (data) {
                    if (data && data.code == 200) {
                        var points = data.data || [];
                        return points;
                    }
                    else {
                        return Promise.reject(null);
                    }
                });
            }
            function startTraceAnalyze() {
                clearTraceAnalyze();
                vm.map.selectPolygon(function (points) {
                    console.log("选中的points为", points);
                    points = points.concat(points);
                    points = points.concat(points);
                    vm.lineId = vm.map.createTraceAnalyze(points, {
                        afterDraw: function (evt) {
                            console.log("轨迹分析单条画线完成触发", evt);
                        }
                    });
                    console.log("lineId", vm.lineId);
                    vm.map.startTraceAnalyze(vm.lineId);
                    vm.isRunTraceAnalyze = true;
                });
            }
            function mockPoints(points) {
                var result = [];
                if (points && points.length > 0) {
                    var i = void 0, len = void 0, num = void 0;
                    for (i = 0, len = points.length; i < len; i++) {
                        num = Math.round(Math.random() * 10);
                        if (num === 2 || num === 3 || num === 4 || num === 5) {
                            result.push(points[i]);
                        }
                    }
                }
                return result;
            }
            function stopTraceAnalyze() {
                if (vm.lineId) {
                    vm.map.stopTraceAnalyze(vm.lineId);
                }
                vm.isRunTraceAnalyze = false;
            }
            function pauseTraceAnalyze() {
                if (vm.lineId) {
                    vm.map.pauseTraceAnalyze(vm.lineId, vm.isRunTraceAnalyze);
                    vm.isRunTraceAnalyze = !vm.isRunTraceAnalyze;
                }
            }
            function reStartTraceAnalyze() {
                if (vm.lineId) {
                    vm.map.restartTraceAnalyze(vm.lineId);
                }
            }
            function clearTraceAnalyze() {
                if (vm.lineId) {
                    vm.map.clearTraceAnalyze(vm.lineId);
                    vm.lineId = null;
                }
            }
        }
        TechnologyStackMapController.$inject = ["$scope", "$compile", "$timeout", "mapService"];
        return TechnologyStackMapController;
    }());
    main_app_1.app.controller("technologyStackMapController", TechnologyStackMapController);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
